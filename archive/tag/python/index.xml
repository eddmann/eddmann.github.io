<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Edd Mann</title><link>https://eddmann.com/archive/tag/python/</link><description>Recent content in Python on Edd Mann</description><generator>Hugo</generator><language>en-GB</language><lastBuildDate>Fri, 17 Oct 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://eddmann.com/archive/tag/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Running MCPs Everywhere: Chatting with My Workouts</title><link>https://eddmann.com/posts/running-mcps-everywhere-chatting-with-my-workouts/</link><pubDate>Fri, 17 Oct 2025 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/running-mcps-everywhere-chatting-with-my-workouts/</guid><description>As both a runner and someone curious about MCPs, I wanted to chat about my workouts with an LLM. This led me to build Strava and Garmin Connect MCP servers, exploring the Python/FastMCP stack and discovering patterns for designing effective MCP tools. The result: a system that lets Claude generate throwaway code to analyse my training data in ways I never anticipated.</description></item><item><title>Determining your closest Parkrun Alphabet Challenge using Python and pandas</title><link>https://eddmann.com/posts/determining-your-closest-parkrun-alphabet-challenge-using-python-and-pandas/</link><pubDate>Sat, 22 Jul 2023 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/determining-your-closest-parkrun-alphabet-challenge-using-python-and-pandas/</guid><description>&lt;p>The Parkrun Alphabet is an &lt;a href="https://blog.parkrun.com/uk/2018/07/18/the-parkrun-alphabet/" rel="external noopener" target="_blank">unofficial challenge&lt;/a> that sees runners complete a Parkrun at locations starting with each letter of the English alphabet.
I am a big fan of Parkrun and wanted to work out how feasible it would be for me to complete the challenge based on the closest &lt;em>tourist&lt;/em> locations to my &lt;em>local&lt;/em> weekly run.
I also thought this would be a great opportunity to explore &lt;a href="https://pandas.pydata.org/" rel="external noopener" target="_blank">pandas&lt;/a> and work with &lt;a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html" rel="external noopener" target="_blank">DataFrames&lt;/a>.&lt;/p></description></item><item><title>Solving the Advent of Code 2021 calendar using C in under half-a-second</title><link>https://eddmann.com/posts/solving-the-advent-of-code-2021-calendar-using-c-in-under-half-a-second/</link><pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/solving-the-advent-of-code-2021-calendar-using-c-in-under-half-a-second/</guid><description>&lt;p>Since being introduced to the world of &lt;a href="https://adventofcode.com/" rel="external noopener" target="_blank">Advent of Code&lt;/a> just prior to the 2020 calendar starting, I subsequently spent the majority of 2021 completing (and documenting) the &lt;a href="https://eddmann.com/archive/tag/advent-of-code-2015">2015&lt;/a>, &lt;a href="https://eddmann.com/archive/tag/advent-of-code-2016">2016&lt;/a> and &lt;a href="https://github.com/eddmann/advent-of-code/tree/master/2017/rust" rel="external noopener" target="_blank">2017&lt;/a> calendars.
For the 2021 calendar, I decided that it would be interesting (and challenging) to complete the calendar in C, with an initial solution written in Python to meet the daily aspect of the challenge.
Additionally, with C being such a performant language, I also wanted to set the goal of ensuring that the entire C calendar was solvable on a single CPU core in under half a second (inspired by &lt;a href="https://www.dannyvankooten.com/blog/2021/solving-advent-of-code-2020-under-1-second/" rel="external noopener" target="_blank">this&lt;/a> blog post).
In this post, I wish to discuss how I went about achieving this goal (&lt;em>spoiler&lt;/em>: &lt;code>410315 Î¼s (0.410 s)&lt;/code> on average) and the hurdles I faced along the way.&lt;/p></description></item><item><title>Advent of Code 2016 - Day 11 - Radioisotope Thermoelectric Generators</title><link>https://eddmann.com/posts/advent-of-code-2016-day-11-radioisotope-thermoelectric-generators/</link><pubDate>Wed, 07 Apr 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2016-day-11-radioisotope-thermoelectric-generators/</guid><description>&lt;p>On the eleventh day of Advent of Code 2016, we are tasked with moving all the supplied Generators and Microchips to the top floor using a single elevator.&lt;/p></description></item><item><title>Advent of Code 2016 - Day 10 - Balance Bots</title><link>https://eddmann.com/posts/advent-of-code-2016-day-10-balance-bots/</link><pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2016-day-10-balance-bots/</guid><description>&lt;p>On the tenth day of Advent of Code 2016, we come across a factory in which many robots are zooming around, handing small microchips to each other.&lt;/p></description></item><item><title>Advent of Code 2016 - Day 9 - Explosives in Cyberspace</title><link>https://eddmann.com/posts/advent-of-code-2016-day-9-explosives-in-cyberspace/</link><pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2016-day-9-explosives-in-cyberspace/</guid><description>&lt;p>On the ninth day of Advent of Code 2016, we are asked to calculate the decompressed length of a file.&lt;/p></description></item><item><title>Advent of Code 2016 - Day 8 - Two-Factor Authentication</title><link>https://eddmann.com/posts/advent-of-code-2016-day-8-two-factor-authentication/</link><pubDate>Tue, 30 Mar 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2016-day-8-two-factor-authentication/</guid><description>&lt;p>On the eighth day of Advent of Code 2016, we are required to work out what a &lt;em>smashed&lt;/em> LCD screen would have displayed.&lt;/p></description></item><item><title>Advent of Code 2016 - Day 7 - Internet Protocol Version 7</title><link>https://eddmann.com/posts/advent-of-code-2016-day-7-internet-protocol-version-7/</link><pubDate>Mon, 29 Mar 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2016-day-7-internet-protocol-version-7/</guid><description>&lt;p>On the seventh day of Advent of Code 2016, we are required to determine which IPv7 addresses support TLS (Transport-Layer Snooping) and SSL (Super-Secret Listening).&lt;/p></description></item><item><title>Advent of Code 2016 - Day 6 - Signals and Noise</title><link>https://eddmann.com/posts/advent-of-code-2016-day-6-signals-and-noise/</link><pubDate>Sun, 28 Mar 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2016-day-6-signals-and-noise/</guid><description>&lt;p>On the sixth day of Advent of Code 2016, we are required to determine the error-corrected message that is being sent to Santa.&lt;/p></description></item><item><title>Advent of Code 2016 - Day 5 - How About a Nice Game of Chess?</title><link>https://eddmann.com/posts/advent-of-code-2016-day-5-how-about-a-nice-game-of-chess/</link><pubDate>Sat, 27 Mar 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2016-day-5-how-about-a-nice-game-of-chess/</guid><description>&lt;p>On the fifth day of Advent of Code 2016, we are asked to calculate the password for a security door in Easter Bunny HQ.&lt;/p></description></item><item><title>Advent of Code 2016 - Day 4 - Security Through Obscurity</title><link>https://eddmann.com/posts/advent-of-code-2016-day-4-security-through-obscurity/</link><pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2016-day-4-security-through-obscurity/</guid><description>&lt;p>On the fourth day of Advent of Code 2016, we are asked to validate and decrypt a listing of room names.&lt;/p></description></item><item><title>Advent of Code 2016 - Day 3 - Squares With Three Sides</title><link>https://eddmann.com/posts/advent-of-code-2016-day-3-squares-with-three-sides/</link><pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2016-day-3-squares-with-three-sides/</guid><description>&lt;p>On the third day of Advent of Code 2016, we are asked to work out how many valid triangles are present in a given listing.&lt;/p></description></item><item><title>Advent of Code 2016 - Day 2 - Bathroom Security</title><link>https://eddmann.com/posts/advent-of-code-2016-day-2-bathroom-security/</link><pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2016-day-2-bathroom-security/</guid><description>&lt;p>On the second day of Advent of Code 2016, we are asked to work out what a bathroom code is based on the supplied instructions.&lt;/p></description></item><item><title>Advent of Code 2016 - Day 1 - No Time for a Taxicab</title><link>https://eddmann.com/posts/advent-of-code-2016-day-1-no-time-for-a-taxicab/</link><pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2016-day-1-no-time-for-a-taxicab/</guid><description>&lt;p>Having enjoyed documenting my progress in completing the Advent of Code 2015 advent calendar in TypeScript, I have decided to do the same for 2016.
However, for this year, I wish to instead explore Python.&lt;/p></description></item><item><title>Implementing ROT13 and ROT(n) Caesar Ciphers in Python</title><link>https://eddmann.com/posts/implementing-rot13-and-rot-n-caesar-ciphers-in-python/</link><pubDate>Sat, 12 Apr 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/implementing-rot13-and-rot-n-caesar-ciphers-in-python/</guid><description>&lt;p>The Caesar cipher (shift cipher) is an extremely simple encryption technique.
Substitutions of this kind rely on an invariant - replacing each plain-text letter with the letter at a fixed number of positions across the alphabet.
The recipient is then able to decode the encoded message successfully if they are aware of the chosen shift.&lt;/p></description></item><item><title>Using Iterative deepening depth-first search in Python</title><link>https://eddmann.com/posts/using-iterative-deepening-depth-first-search-in-python/</link><pubDate>Thu, 06 Mar 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/using-iterative-deepening-depth-first-search-in-python/</guid><description>&lt;p>Iterative deepening depth-first search (IDDFS) is an extension to the &amp;lsquo;vanilla&amp;rsquo; depth-first search algorithm, with an added constraint on the total depth explored per iteration.
It produces equivalent results to those achieved using breadth-first search, without incurring the large memory costs.
Due to breadth-first search storing fringe vertices in memory, O(b^d) memory space may be required (where b is the branching factor).
This is in stark contrast to IDDFS&amp;rsquo;s worst-case memory requirements of O(bd).
At each iteration, vertex successors at the depth-cap level are ignored.
If the goal has not been found, the maximum level is increased by one and the process repeated.
Similarly to breadth-first search, it guarantees finding an optimal path between two vertices, as the shallowest goal vertex is reached first due to the depth cap, resulting in no exploration of subsequent, unnecessary branches.&lt;/p></description></item><item><title>Depth-First Search and Breadth-First Search in Python</title><link>https://eddmann.com/posts/depth-first-search-and-breadth-first-search-in-python/</link><pubDate>Wed, 05 Mar 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/depth-first-search-and-breadth-first-search-in-python/</guid><description>Graph theory and, in particular, the graph ADT (abstract data type) is widely explored and implemented in the field of Computer Science and Mathematics. Consisting of vertices (nodes) and the edges (optionally directed or weighted) that connect them, the data structure is effectively able to represent and solve many problem domains. One of the most popular areas of algorithm design within this space is the problem of checking for the existence of, or the (shortest) path between, two or more vertices in the graph.</description></item><item><title>Creating a Basic Auth. WSGI Middleware in Python</title><link>https://eddmann.com/posts/creating-a-basic-auth-wsgi-middleware-in-python/</link><pubDate>Thu, 27 Feb 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/creating-a-basic-auth-wsgi-middleware-in-python/</guid><description>&lt;p>With my recent dedicated introduction to the Python language, I have become very appreciative of the highly composable nature of &lt;a href="http://en.wikipedia.org/wiki/Web_Server_Gateway_Interface" rel="external noopener" target="_blank">WSGI&lt;/a> applications.
In a functional style, you are able to compose a desired application from many different components, using the middleware ideology.
The benefits of this approach can be clearly seen in the contrived example depicted below, which is based on my previous &lt;a href="https://eddmann.com/posts/using-basic-auth-and-decorators-in-pythons-flask/">Flask example&lt;/a>.&lt;/p></description></item><item><title>Processing a List of Links using Python and BeautifulSoup</title><link>https://eddmann.com/posts/processing-a-list-of-links-using-python-and-beautifulsoup/</link><pubDate>Thu, 27 Feb 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/processing-a-list-of-links-using-python-and-beautifulsoup/</guid><description>&lt;p>Whilst uploading the &lt;a href="https://threedevsandamaybe.com/" rel="external noopener" target="_blank">weekly podcast&lt;/a> I am required to produce a list of links discussed on the show.
This can become a little tedious, as I must visit each link to find a suitable title.
Additionally, when using Markdown, you must provide lists in a specific format.
I had been doing this manually for a couple of weeks, and last night I thought, &amp;ldquo;I am a developer; I should automate this.&amp;rdquo;.&lt;/p></description></item><item><title>Understanding Python WSGI with Examples</title><link>https://eddmann.com/posts/understanding-python-wsgi-with-examples/</link><pubDate>Mon, 17 Feb 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/understanding-python-wsgi-with-examples/</guid><description>&lt;p>Coming from a strong PHP background, initially, exploring the web development landscape whilst delving into Python seemed rather confusing.
As Python was not originally developed for the web, a specification called &lt;a href="http://www.python.org/dev/peps/pep-0333/" rel="external noopener" target="_blank">PEP 333&lt;/a> was accepted, which standardised the required interface between web servers and Python web frameworks/applications.
Despite the additional complexity, the manner in which middleware applications can be integrated, along with the server choices, offers possibilities that I find hard to locate a comparable alternative for in PHP.&lt;/p></description></item><item><title>Implementing Basic Python Decorators in PHP</title><link>https://eddmann.com/posts/implementing-basic-python-decorators-in-php/</link><pubDate>Mon, 10 Feb 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/implementing-basic-python-decorators-in-php/</guid><description>&lt;p>Having just stepped into the world of Python, I think it is only human nature to compare, if not contemplate, solutions to discovered strengths in a more familiar language.
My familiar language being, of course, PHP, I thought it would be a good thought experiment to see if I could design a basic decorator implementation in the language.
Decorators, as discussed in &lt;a href="https://eddmann.com/posts/using-basic-auth-and-decorators-in-pythons-flask/">another post&lt;/a>, are an easy concept to explain.
Simply put, they wrap specified functions with other functions, providing a means to compose new functions in a succinct manner.&lt;/p></description></item><item><title>Using Basic Auth. and Decorators in Python's Flask</title><link>https://eddmann.com/posts/using-basic-auth-and-decorators-in-pythons-flask/</link><pubDate>Mon, 10 Feb 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/using-basic-auth-and-decorators-in-pythons-flask/</guid><description>&lt;p>I have recently set aside some time to delve into the world of Python and all its Zen.
Being a web developer at heart, I, of course, had to look at the current options available to me.
In this post, I will guide you through creating a single-script web application using Flask and basic access authentication.
For simplicity, I assume that you have a working installation of either Python 2.7/3.3 and &lt;a href="http://www.virtualenv.org/en/latest/index.html" rel="external noopener" target="_blank">virtualenv&lt;/a>.&lt;/p></description></item></channel></rss>