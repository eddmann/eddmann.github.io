<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Terraform on Edd Mann</title><link>https://eddmann.com/archive/tag/terraform/</link><description>Recent content in Terraform on Edd Mann</description><generator>Hugo</generator><language>en-GB</language><lastBuildDate>Thu, 28 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://eddmann.com/archive/tag/terraform/index.xml" rel="self" type="application/rss+xml"/><item><title>Containerising the DataDog Agent for HTTP health-checks using DigitalOcean App Platform and Terraform</title><link>https://eddmann.com/posts/containerising-the-datadog-agent-for-http-health-checks-using-digitalocean-app-platform-and-terraform/</link><pubDate>Thu, 28 Apr 2022 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/containerising-the-datadog-agent-for-http-health-checks-using-digitalocean-app-platform-and-terraform/</guid><description>&lt;p>We have been big fans of DataDog and the level of telemetry/monitoring it provides us for many years now.
One such aspect of monitoring that we employ throughout the services we maintain is &lt;a href="https://docs.datadoghq.com/integrations/http_check/" rel="external noopener" target="_blank">HTTP health checks&lt;/a>, which are intentionally run on a separate cloud provider to our primary, which is AWS.
DataDog has provided the ability to handle running these checks via &lt;a href="https://docs.datadoghq.com/agent/" rel="external noopener" target="_blank">their agent&lt;/a> for many years, offering us a sufficient black-box means of ensuring a service is functioning as expected.
This past week, we explored the viability of containerising this responsibility into a service that could be run on a serverless platform such as the &lt;a href="https://www.digitalocean.com/products/app-platform" rel="external noopener" target="_blank">DigitalOcean App Platform&lt;/a>.&lt;/p></description></item><item><title>Setting up Caddy Server within AWS using Packer and Terraform</title><link>https://eddmann.com/posts/setting-up-caddy-server-within-aws-using-packer-and-terraform/</link><pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/setting-up-caddy-server-within-aws-using-packer-and-terraform/</guid><description>&lt;p>With the &lt;a href="https://security.googleblog.com/2018/02/a-secure-web-is-here-to-stay.html" rel="external noopener" target="_blank">recent update&lt;/a> to Google Chrome helping shape a more secure Web by marking all HTTP sites as &amp;ldquo;not secure&amp;rdquo;.
I thought it was time that I make the necessary changes to how we host audio files for the &lt;a href="https://threedevsandamaybe.com/" rel="external noopener" target="_blank">Three Devs and a Maybe&lt;/a> podcast.
In this post I would like to discuss setting up &lt;a href="https://caddyserver.com/" rel="external noopener" target="_blank">Caddy Server&lt;/a> (which provides HTTPS out of the box!) as a static-hosting platform on AWS.
I will detail how to provision the instance with Packer and the surrounding infrastructure using Terraform.&lt;/p></description></item></channel></rss>