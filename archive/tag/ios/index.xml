<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ios on Edd Mann</title><link>https://eddmann.com/archive/tag/ios/</link><description>Recent content in Ios on Edd Mann</description><generator>Hugo</generator><language>en-GB</language><lastBuildDate>Thu, 27 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://eddmann.com/archive/tag/ios/index.xml" rel="self" type="application/rss+xml"/><item><title>Bridging the Gap Between iOS Native Functionality and JavaScript Web Applications</title><link>https://eddmann.com/posts/bridging-the-gap-between-ios-native-functionality-and-javascript-web-applications/</link><pubDate>Thu, 27 Mar 2025 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/bridging-the-gap-between-ios-native-functionality-and-javascript-web-applications/</guid><description>In this post, I share a pattern I&amp;rsquo;ve been using to bridge native iOS functionality with JavaScript running inside a WKWebView. It covers setting up a lightweight Swift/JavaScript bridge to handle asynchronous communication between the two.</description></item></channel></rss>