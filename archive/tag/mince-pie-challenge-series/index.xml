<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mince-Pie-Challenge-Series on Edd Mann</title><link>https://eddmann.com/archive/tag/mince-pie-challenge-series/</link><description>Recent content in Mince-Pie-Challenge-Series on Edd Mann</description><generator>Hugo</generator><language>en-GB</language><lastBuildDate>Tue, 16 Oct 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://eddmann.com/archive/tag/mince-pie-challenge-series/index.xml" rel="self" type="application/rss+xml"/><item><title>Mince Pie Challenge: Viewing and Removing Mince Pies with Amazon DynamoDB</title><link>https://eddmann.com/posts/mince-pie-challenge-viewing-and-removing-mince-pies-with-amazon-dynamodb/</link><pubDate>Tue, 16 Oct 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mince-pie-challenge-viewing-and-removing-mince-pies-with-amazon-dynamodb/</guid><description>&lt;p>In this post we will progress in implementing the proposed endpoint behaviour documented in our &lt;a href="https://eddmann.com/posts/mince-pie-challenge-designing-the-restful-api-with-raml/#viewing-the-pies">RAML design&lt;/a>.
Using the online/offline DynamoDB abstractions that we constructed in the &lt;a href="https://eddmann.com/posts/mince-pie-challenge-adding-and-listing-mince-pies-with-amazon-dynamodb/">previous post&lt;/a>, we will incorporate the ability to view and remove specified mince pies from the challenge.&lt;/p></description></item><item><title>Mince Pie Challenge: Adding and Listing Mince Pies with Amazon DynamoDB</title><link>https://eddmann.com/posts/mince-pie-challenge-adding-and-listing-mince-pies-with-amazon-dynamodb/</link><pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mince-pie-challenge-adding-and-listing-mince-pies-with-amazon-dynamodb/</guid><description>&lt;p>In the &lt;a href="https://eddmann.com/posts/mince-pie-challenge-adding-the-bootstrap-endpoint-and-serverless-offline/">previous post&lt;/a> we began to implement the API endpoints, starting off with creating the bootstrap response.
We did this in a manner that catered for both online and offline development access.
In this post we will incorporate the ability to add and list mince pies, persisting the state within &lt;a href="https://aws.amazon.com/dynamodb/" rel="external noopener" target="_blank">Amazon DynamoDB&lt;/a>.
Following this, we will enrich our offline development process by setting up an &lt;a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBLocal.html" rel="external noopener" target="_blank">Amazon DynamoDB Local&lt;/a> instance using Docker.&lt;/p></description></item><item><title>Mince Pie Challenge: Adding the Bootstrap Endpoint and Serverless Offline</title><link>https://eddmann.com/posts/mince-pie-challenge-adding-the-bootstrap-endpoint-and-serverless-offline/</link><pubDate>Fri, 27 Jul 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mince-pie-challenge-adding-the-bootstrap-endpoint-and-serverless-offline/</guid><description>&lt;p>Up until now, we have spent our time setting up the API project to provide a confident testing pipeline (with types) and Amazon Cognito authentication.
We will now move on to implementing the first &lt;strong>real&lt;/strong> API endpoint, that being the Bootstrap response.
Along the way, we will configure &lt;a href="https://github.com/dherault/serverless-offline" rel="external noopener" target="_blank">Serverless Offline&lt;/a>, allowing us to locally interact with the API without having to provision any online resources.&lt;/p></description></item><item><title>Mince Pie Challenge: Adding Test Coverage using Jest and Travis CI</title><link>https://eddmann.com/posts/mince-pie-challenge-adding-test-coverage-using-jest-and-travis-ci/</link><pubDate>Wed, 18 Jul 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mince-pie-challenge-adding-test-coverage-using-jest-and-travis-ci/</guid><description>&lt;p>Following on from &lt;a href="https://eddmann.com/posts/mince-pie-challenge-setting-up-flow-with-babel-and-webpack/">adding Flow&lt;/a> to the API project, I now wish to garner further confidence in the code by adding tests.
In this post I will document the process of setting up the test-runner &lt;a href="https://jestjs.io/" rel="external noopener" target="_blank">Jest&lt;/a>, and adding suitable test coverage to the current authentication example.&lt;/p></description></item><item><title>Mince Pie Challenge: Setting up Flow with Babel and Webpack</title><link>https://eddmann.com/posts/mince-pie-challenge-setting-up-flow-with-babel-and-webpack/</link><pubDate>Mon, 09 Jul 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mince-pie-challenge-setting-up-flow-with-babel-and-webpack/</guid><description>&lt;p>We have now settled on how our application will perform &lt;a href="https://eddmann.com/posts/mince-pie-challenge-authentication-with-amazon-cognito-and-json-web-tokens/">user authentication&lt;/a>.
I now wish to take a step back and help improve our code confidence by adding the static type checker &lt;a href="https://flow.org/" rel="external noopener" target="_blank">Flow&lt;/a>.
In this article, I will document the process of configuring Flow with Babel and Webpack, expanding upon our previous example by adding sufficient typing.&lt;/p></description></item><item><title>Mince Pie Challenge: Authentication with Amazon Cognito and JSON Web Tokens</title><link>https://eddmann.com/posts/mince-pie-challenge-authentication-with-amazon-cognito-and-json-web-tokens/</link><pubDate>Tue, 26 Jun 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mince-pie-challenge-authentication-with-amazon-cognito-and-json-web-tokens/</guid><description>&lt;p>Now that we have set up the Serverless Framework, we can go about investigating how Authentication and Authorisation will be handled within the application.
For this, we will be using &lt;a href="https://aws.amazon.com/cognito/" rel="external noopener" target="_blank">Amazon Cognito&lt;/a>, a fully managed web service which handles the user sign-up, sign-in and management processes.&lt;/p></description></item><item><title>Mince Pie Challenge: Setting up the Serverless Framework with Docker, Webpack and Babel</title><link>https://eddmann.com/posts/mince-pie-challenge-setting-up-the-serverless-framework-with-docker-webpack-and-babel/</link><pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mince-pie-challenge-setting-up-the-serverless-framework-with-docker-webpack-and-babel/</guid><description>&lt;p>Now that we have spent some time working out how the API is going to look, we can move on to building it!
We will start off by configuring the initial API project, setting up a Dockerised &lt;a href="https://serverless.com/" rel="external noopener" target="_blank">Serverless Framework&lt;/a> with &lt;a href="https://webpack.js.org/" rel="external noopener" target="_blank">Webpack&lt;/a> and &lt;a href="https://babeljs.io/" rel="external noopener" target="_blank">Babel&lt;/a> support.&lt;/p></description></item><item><title>Mince Pie Challenge: Designing the RESTful API with RAML</title><link>https://eddmann.com/posts/mince-pie-challenge-designing-the-restful-api-with-raml/</link><pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mince-pie-challenge-designing-the-restful-api-with-raml/</guid><description>&lt;p>Now that we are aware of what needs to be done, we can go about designing the RESTful API that will be used to process and persist those vital mince pies.&lt;/p></description></item><item><title>Mince Pie Challenge: Building a Serverless RESTful API and React Client</title><link>https://eddmann.com/posts/mince-pie-challenge-building-a-serverless-restful-api-and-react-client/</link><pubDate>Thu, 07 Jun 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mince-pie-challenge-building-a-serverless-restful-api-and-react-client/</guid><description>&lt;p>Since moving our infrastructure over to the AWS stack, I have been keen to explore how we can take advantage of the numerous services at our disposal, alongside the serverless methodology.
In this blog &lt;a href="https://eddmann.com/archive/tag/mince-pie-challenge-series">series&lt;/a>, I wish to document my experience of building a complete serverless application which harnesses as many of the AWS offerings as possible.
We will explore building both a RESTful API and a React client, all hosted without any servers to maintain!&lt;/p></description></item></channel></rss>