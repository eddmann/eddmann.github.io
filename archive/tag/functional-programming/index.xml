<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Functional-Programming on Edd Mann</title><link>https://eddmann.com/archive/tag/functional-programming/</link><description>Recent content in Functional-Programming on Edd Mann</description><generator>Hugo</generator><language>en-GB</language><lastBuildDate>Sat, 03 Sep 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://eddmann.com/archive/tag/functional-programming/index.xml" rel="self" type="application/rss+xml"/><item><title>AVL Trees in Clojure</title><link>https://eddmann.com/posts/avl-trees-in-clojure/</link><pubDate>Sat, 03 Sep 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/avl-trees-in-clojure/</guid><description>&lt;p>An AVL tree is a self-balancing binary search tree, whereby the height of a node&amp;rsquo;s children differs by at most one.
In the event that this property is violated, a rebalancing process takes place.&lt;/p></description></item><item><title>Anagram Solver in Clojure</title><link>https://eddmann.com/posts/anagram-solver-in-clojure/</link><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/anagram-solver-in-clojure/</guid><description>&lt;p>This past week, a discussion around solving anagrams was brought up.
I thought it would be interesting to devise a couple of methods for computationally achieving such a task.
Providing an anagram string and a dictionary file, I wished to return all possible matching words from the dictionary.&lt;/p></description></item><item><title>Maybe in JavaScript</title><link>https://eddmann.com/posts/maybe-in-javascript/</link><pubDate>Wed, 08 Jun 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/maybe-in-javascript/</guid><description>&lt;p>Recently, I have been delving into the concepts of &lt;a href="http://learnyouahaskell.com/functors-applicative-functors-and-monoids" rel="external noopener" target="_blank">Functors&lt;/a> and &lt;a href="http://learnyouahaskell.com/a-fistful-of-monads" rel="external noopener" target="_blank">Monads&lt;/a>.
There are many good &lt;a href="https://curiosity-driven.org/monads-in-javascript" rel="external noopener" target="_blank">resources&lt;/a> available online that will do a far better job of explaining these concepts than I could.
However, I do wish to document an example of a Maybe type I have implemented in JavaScript.
Again, there are many excellent external &lt;a href="http://sean.voisen.org/blog/2013/10/intro-monads-maybe/" rel="external noopener" target="_blank">resources&lt;/a> that highlight the characteristics and power of using such a type, so I will direct your attention to those if you wish to learn more.&lt;/p></description></item><item><title>Binary/Octal/Hexadecimal to Decimal using Collection Pipelines in JavaScript</title><link>https://eddmann.com/posts/binary-octal-hexadecimal-to-decimal-using-collection-pipelines-in-javascript/</link><pubDate>Mon, 18 Apr 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/binary-octal-hexadecimal-to-decimal-using-collection-pipelines-in-javascript/</guid><description>&lt;p>In a recent &lt;a href="https://twitter.com/adamwathan/status/720432624548900864" rel="external noopener" target="_blank">tweet&lt;/a> from Adam Wathan, highlighting one of the examples in his &lt;a href="http://adamwathan.me/refactoring-to-collections/" rel="external noopener" target="_blank">upcoming book&lt;/a>, he demonstrated breaking down the process of converting from binary to decimal representation using a pipeline of transformations.
I thought it would be interesting to see how I would go about performing this process in JavaScript.&lt;/p></description></item><item><title>Implementing Transpose and Zip in JavaScript</title><link>https://eddmann.com/posts/implementing-transpose-and-zip-in-javascript/</link><pubDate>Fri, 08 Apr 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/implementing-transpose-and-zip-in-javascript/</guid><description>&lt;p>In a recent &lt;a href="http://www.fullstackradio.com/39" rel="external noopener" target="_blank">Full Stack Radio&lt;/a> podcast, a discussion around the application of &lt;code>transpose&lt;/code> and &lt;code>zip&lt;/code> on collections made me wonder how I would go about implementing such a feature in JavaScript.&lt;/p></description></item><item><title>Map-Filter Combination in PHP</title><link>https://eddmann.com/posts/map-filter-combination-in-php/</link><pubDate>Fri, 04 Mar 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/map-filter-combination-in-php/</guid><description>&lt;p>Following on from my discussion on &lt;a href="https://eddmann.com/posts/mapping-filtering-and-reducing-in-php/">Mapping, Filtering and Reducing in PHP&lt;/a>, over the past couple of months, I have been using a little trick I would like to discuss.
Although a &lt;code>map-filter&lt;/code> combination can be achieved in a single &lt;code>reduce&lt;/code>, while reading the PHP documentation, I found out that &lt;code>array_filter&lt;/code> supplied without a predicate function will remove all &lt;code>false&lt;/code> values from the collection.
This means that you can simply map over a collection and return &lt;code>false&lt;/code> if the desired predicate does not match - leaving the filter to do the clean-up.&lt;/p></description></item><item><title>Mapping, Filtering and Reducing in PHP</title><link>https://eddmann.com/posts/mapping-filtering-and-reducing-in-php/</link><pubDate>Wed, 02 Mar 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mapping-filtering-and-reducing-in-php/</guid><description>&lt;p>Over the past couple of years, I have transitioned from boilerplate-heavy, imperative code to using the more intuitive &lt;code>map&lt;/code>, &lt;code>filter&lt;/code>, and &lt;code>reduce&lt;/code> higher-order functions.
In this article, I hope to highlight the transformation that occurs, along with the simplification, when moving away from the imperative and onto the declarative.
We shall be performing a simple process that transforms a collection of user entries into a filtered collection of their names.
Although trivial in nature, it is a great way to highlight the power of the paradigm shift.&lt;/p></description></item><item><title>Insertion Sort in Clojure</title><link>https://eddmann.com/posts/insertion-sort-in-clojure/</link><pubDate>Mon, 22 Feb 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/insertion-sort-in-clojure/</guid><description>&lt;p>The next sorting algorithm I have decided to explore is the Insertion Sort.
This sorting technique can be completed in-place.
However, using Clojure, we will instead use &lt;code>reduce&lt;/code> to accumulate the final sorted collection.
Each element is iteratively inserted into a &amp;rsquo;new&amp;rsquo; collection, which maintains a sorted invariant, as shown in the implementation documented below.&lt;/p></description></item><item><title>Bubble Sort in Clojure... again</title><link>https://eddmann.com/posts/bubble-sort-in-clojure-again/</link><pubDate>Sun, 21 Feb 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/bubble-sort-in-clojure-again/</guid><description>&lt;p>Following on from my &lt;a href="https://eddmann.com/posts/bubble-sort-in-clojure/">previous solution&lt;/a> to implementing the Bubble Sort algorithm in Clojure, I thought it would be interesting to experiment with a different approach.
Taking advantage of lists and vectors&amp;rsquo; respective cheap head and tail insertions, we can use these two properties to good effect, as shown below.&lt;/p></description></item><item><title>Bubble Sort in Clojure</title><link>https://eddmann.com/posts/bubble-sort-in-clojure/</link><pubDate>Fri, 19 Feb 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/bubble-sort-in-clojure/</guid><description>&lt;p>Following on with my exploration into implementing common sorting algorithms in Clojure, today we have the Bubble Sort.
This sort works by iteratively passing through the supplied sequence, swapping the current element with the next if it is comparably greater.
The operation is complete when a pass through the sequence does not result in a swap occurring.&lt;/p></description></item><item><title>Creating a IPersistentSet compatible Binary Tree in Clojure</title><link>https://eddmann.com/posts/creating-a-ipersistentset-compatible-binary-tree-in-clojure/</link><pubDate>Wed, 27 Jan 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/creating-a-ipersistentset-compatible-binary-tree-in-clojure/</guid><description>&lt;p>Following on from my post on Binary Search Trees &lt;a href="https://eddmann.com/posts/binary-search-trees-in-clojure/">last week&lt;/a>, I decided to explore how I could use types and interfaces to implement the glue required to make the Binary Tree implementation compatible with the &lt;code>clojure.lang.IPersistentSet&lt;/code> interface.&lt;/p></description></item><item><title>QuickSort in Clojure</title><link>https://eddmann.com/posts/quicksort-in-clojure/</link><pubDate>Mon, 11 Jan 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/quicksort-in-clojure/</guid><description>&lt;p>This past weekend I had the opportunity to delve more deeply into Clojure&amp;rsquo;s &lt;a href="https://clojuredocs.org/clojure.core" rel="external noopener" target="_blank">core library&lt;/a>.
I experimented with some interesting aspects of the library by implementing the QuickSort algorithm in a couple of different ways.&lt;/p></description></item><item><title>Even Higher Trampolining in JavaScript</title><link>https://eddmann.com/posts/even-higher-trampolining-in-javascript/</link><pubDate>Fri, 08 Jan 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/even-higher-trampolining-in-javascript/</guid><description>&lt;p>The concept of &lt;em>trampolining&lt;/em> seems to have been a running trend throughout this week.
I noted in my initial post on implementing trampolining in JavaScript that I would document a revised version capable of handling the case when a function is the desired return type.&lt;/p></description></item><item><title>Recursive Functions using a Trampoline in Clojure</title><link>https://eddmann.com/posts/recursive-functions-using-a-trampoline-in-clojure/</link><pubDate>Thu, 07 Jan 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/recursive-functions-using-a-trampoline-in-clojure/</guid><description>&lt;p>Following on from yesterday&amp;rsquo;s post that discussed &lt;a href="https://eddmann.com/posts/recursive-functions-using-a-trampoline-in-javascript/">&amp;lsquo;Trampolining&amp;rsquo; in JavaScript&lt;/a>, I thought it would be interesting to see what Clojure has to offer.&lt;/p></description></item><item><title>Recursive Functions using a Trampoline in JavaScript</title><link>https://eddmann.com/posts/recursive-functions-using-a-trampoline-in-javascript/</link><pubDate>Wed, 06 Jan 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/recursive-functions-using-a-trampoline-in-javascript/</guid><description>&lt;p>An interesting technique for managing perceived tail-call optimised algorithms in an environment that does not provide such capabilities is to use a concept called a &lt;em>trampoline&lt;/em>.
The following two examples provide all their work within the recursive function invocation and are in tail-call position.
However, in environments without such optimisations (before ES2015), a single stack frame is not reused and instead incurs the burden of O(n) memory complexity.&lt;/p></description></item><item><title>Mergesort in Clojure using Post Conditionals</title><link>https://eddmann.com/posts/mergesort-in-clojure-using-post-conditionals/</link><pubDate>Tue, 05 Jan 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mergesort-in-clojure-using-post-conditionals/</guid><description>&lt;p>Whilst currently reading through &lt;a href="https://www.manning.com/books/the-joy-of-clojure" rel="external noopener" target="_blank">The Joy of Clojure&lt;/a> book I was introduced to the concept of pre and post-conditionals, similar to another language called &lt;a href="https://en.wikipedia.org/wiki/Eiffel_%28programming_language%29" rel="external noopener" target="_blank">Eiffel&lt;/a>.
To experiment with this feature I decided to create a simple merge-sort algorithm implementation which ensured that its returned values were sorted by the provided predicate.&lt;/p></description></item><item><title>Cartesian Product in JavaScript</title><link>https://eddmann.com/posts/cartesian-product-in-javascript/</link><pubDate>Sun, 04 Oct 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/cartesian-product-in-javascript/</guid><description>&lt;p>This weekend I have had the chance to explore Cartesian products.
The Cartesian product (cross-product) is essentially an operation that returns a product set from multiple supplied sets.&lt;/p></description></item><item><title>Peano Numbers and Arithmetic in JavaScript</title><link>https://eddmann.com/posts/peano-numbers-and-arithmetic-in-javascript/</link><pubDate>Thu, 01 Oct 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/peano-numbers-and-arithmetic-in-javascript/</guid><description>&lt;p>Whilst completing the &lt;a href="https://www.coursera.org/course/progfun" rel="external noopener" target="_blank">Functional Programming Principles in Scala&lt;/a> course a couple of years ago one of the exercises was in the realm of Peano numbers.
This subject fascinated me, demonstrating how we were able to represent non-negative natural numbers without any pre-existing concepts - relying solely on logical expressions and recursive algorithms.&lt;/p></description></item><item><title>Lifting JavaScript Operators into First-class Functions</title><link>https://eddmann.com/posts/lifting-javascript-operators-into-first-class-functions/</link><pubDate>Mon, 24 Aug 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/lifting-javascript-operators-into-first-class-functions/</guid><description>&lt;p>I have always enjoyed how succinctly you are able to use commonly found operators as first-class functions in languages such as &lt;a href="http://clojure.org/" rel="external noopener" target="_blank">Clojure&lt;/a>.
As a quick thought experiment, I decided to see if it would be possible to use JavaScript&amp;rsquo;s capabilities to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" rel="external noopener" target="_blank">dynamically create functions&lt;/a> to mimic such behaviour.&lt;/p></description></item><item><title>Partial Application (Currying) and Composition using JavaScript ES6</title><link>https://eddmann.com/posts/partial-application-currying-and-composition-using-javascript-es6/</link><pubDate>Wed, 15 Apr 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/partial-application-currying-and-composition-using-javascript-es6/</guid><description>&lt;p>Completion of a recent project sparked discussion surrounding JavaScript ES6 within the team, in part due to the welcome addition of &lt;a href="http://webpack.github.io/" rel="external noopener" target="_blank">Webpack&lt;/a> into our stack.
&lt;a href="http://en.wikipedia.org/wiki/ECMAScript" rel="external noopener" target="_blank">ECMAScript 6&lt;/a> is an upcoming standard which will eventually be used as a reference for all future JavaScript implementations (client and server-side).&lt;/p></description></item><item><title>Cons Lists and Folds in PHP</title><link>https://eddmann.com/posts/cons-lists-and-folds-in-php/</link><pubDate>Fri, 02 Jan 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/cons-lists-and-folds-in-php/</guid><description>&lt;p>Cons cells are used to (cons)truct a data object which represents an ordered pair.
The elements in this pair can be identified as &amp;lsquo;car&amp;rsquo; and &amp;lsquo;cdr&amp;rsquo; accordingly.
Using this simple representation, we are able not only to hold ordered pairs but also to create more complex data structures, such as a List.&lt;/p></description></item><item><title>Functional Quick sort in Scala and JavaScript</title><link>https://eddmann.com/posts/functional-quick-sort-in-scala-and-javascript/</link><pubDate>Sun, 06 Apr 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/functional-quick-sort-in-scala-and-javascript/</guid><description>&lt;p>Functional languages provide you with the ability to concisely define the intent of a piece of code, without low-level issues getting in the way.
This can be clearly seen when implementing the Quick sort algorithm.
Often referred to as &amp;lsquo;partition-exchange&amp;rsquo; sort, this divide and conquer algorithm recursively divides a list into two sub-lists, based on a chosen pivot element.&lt;/p></description></item><item><title>The Y (Fixed-Point) Combinator in PHP</title><link>https://eddmann.com/posts/the-y-fixed-point-combinator-in-php/</link><pubDate>Tue, 01 Apr 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/the-y-fixed-point-combinator-in-php/</guid><description>&lt;p>A combinator is a type of higher-order function that can be used to express functions without the explicit use of variables.
A fixed point is a value that remains unchanged by a function, satisfying the equation which can be found &lt;a href="http://en.wikipedia.org/wiki/Fixed-point_combinator#Y_combinator" rel="external noopener" target="_blank">here&lt;/a>.
Using the Y-combinator allows us to essentially convert non-recursive code into a recursive counterpart (without directly using named recursion or iteration).
To work its magic, the recursive function is computed as the fixed point of the non-recursive function.&lt;/p></description></item><item><title>Using Anonymous Functions (Lambdas) and Closures in PHP</title><link>https://eddmann.com/posts/using-anonymous-functions-lambdas-and-closures-in-php/</link><pubDate>Mon, 17 Mar 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/using-anonymous-functions-lambdas-and-closures-in-php/</guid><description>&lt;p>Having spent some significant time with more functional-oriented languages such as Scala, I have been keen to explore and take advantage of some of these concepts in my current day-to-day language (PHP).
Delving into the subject, however, seems to highlight some confusion between the two concepts discussed.
An anonymous function (also known as a lambda), originating from the &lt;a href="http://en.wikipedia.org/wiki/Lambda_calculus" rel="external noopener" target="_blank">Lambda calculus&lt;/a>, is a function that has no assigned name and can be considered a value in itself.
Functions of this category are first-class value types, on a par with integers, booleans, etc., allowing you to pass them as arguments or return them from functions (also known as higher-order functions).
A closure, on the other hand, is a function that captures the state of the surrounding context or environment upon definition, retaining these references even if the variable falls out of lexical scope.
Neither depends on the other at an implementation level; however, you typically see the two used in conjunction.&lt;/p></description></item><item><title>Using Partial Application in PHP</title><link>https://eddmann.com/posts/using-partial-application-in-php/</link><pubDate>Thu, 26 Dec 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/using-partial-application-in-php/</guid><description>&lt;p>Partial function application is a commonplace feature found in many languages that lean towards the functional paradigm.
Unlike some functional concepts (monads), it can be simply explained as taking a function and binding argument values to one or more of its parameters, resulting in a new function.
Function argument size in computer science circles is described as its &lt;a href="http://en.wikipedia.org/wiki/Arity" rel="external noopener" target="_blank">arity&lt;/a>, and through this process we are reducing the arity based on the partial application call.
Discussion of partial application typically brings up the related topic of &lt;a href="http://en.wikipedia.org/wiki/Currying" rel="external noopener" target="_blank">currying&lt;/a>, which follows the stricter rule of transforming a multiple-argument function into a chain of single-argument calls.
This is useful as it helps simplify the study of functions in theoretical computer science, such as lambda calculus.
Currying, however, is not that useful in general-purpose languages, unlike Haskell which, at its core, only supports the mathematical notion of single-argument functions.
Using a combination of syntactic sugar and currying, the language is able to give the misguided impression of multi-argument calls, when in fact it is just a chain of single-argument curried calls.&lt;/p></description></item><item><title>Reverse Polish Notation (RPN) in Scala</title><link>https://eddmann.com/posts/reverse-polish-notation-rpn-in-scala/</link><pubDate>Sun, 15 Dec 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/reverse-polish-notation-rpn-in-scala/</guid><description>&lt;p>Continuing on with my exploration of the Scala language, I decided to solve the widely documented problem of evaluating a mathematical &lt;a href="http://en.wikipedia.org/wiki/Reverse_Polish_Notation" rel="external noopener" target="_blank">Reverse Polish notation&lt;/a> string.
Popularised by its use in the &lt;a href="http://en.wikipedia.org/wiki/HP-10C_series" rel="external noopener" target="_blank">HP-10C&lt;/a> series of calculators from the 1980s, the notation requires that every operator follow its operands (otherwise called postfix notation).&lt;/p></description></item><item><title>Using For-Comprehensions in Scala</title><link>https://eddmann.com/posts/using-for-comprehensions-in-scala/</link><pubDate>Wed, 11 Dec 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/using-for-comprehensions-in-scala/</guid><description>&lt;p>Scala can be a very deceptive language, as type inference is a good example of this.
Another less understood example that you will soon be introduced to upon closer exploration of the language is the &amp;lsquo;for-comprehension&amp;rsquo;.
The first point I wish to highlight is that in Scala everything is an expression which returns a value, even if this be Unit (which is equivalent to nothing).
This is a fundamental design principle of Scala which allows for productive use of its functional nature.
In an imperative manner, for example, we have become very accustomed to declaring and assigning a default value, only to reassign it with another if a condition is met on the next line.
Due to the expressive nature of the language, this can instead be condensed into one line, immutably and as a result is less prone to error.&lt;/p></description></item><item><title>Merge sort in Scala using Tail-recursion and Streams</title><link>https://eddmann.com/posts/merge-sort-in-scala-using-tail-recursion-and-streams/</link><pubDate>Sun, 01 Dec 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/merge-sort-in-scala-using-tail-recursion-and-streams/</guid><description>&lt;p>In a previous &lt;a href="https://eddmann.com/posts/merge-sort-comparison-in-java-and-scala/">post&lt;/a> I made a rudimentary comparison of Java and Scala using the &lt;a href="http://en.wikipedia.org/wiki/Merge_sort" rel="external noopener" target="_blank">Merge sort&lt;/a> algorithm as a case study.
There I described a trivial Scala implementation which did not take into consideration tail recursion, resulting in an unavoidable stack overflow when faced with a sufficiently sized list.
In this post I wish to describe two very different implementations that resolve this glaring omission.&lt;/p></description></item><item><title>Merge sort comparison in Java and Scala</title><link>https://eddmann.com/posts/merge-sort-comparison-in-java-and-scala/</link><pubDate>Wed, 27 Nov 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/merge-sort-comparison-in-java-and-scala/</guid><description>&lt;p>Having only just recently got a complete shot of functional goodness in the form of the &lt;a href="http://www.coursera.org/course/progfun" rel="external noopener" target="_blank">Functional Programming Principles in Scala&lt;/a> &lt;a href="http://en.wikipedia.org/wiki/Massive_open_online_course" rel="external noopener" target="_blank">MOOC&lt;/a>, my imperative standing is in a state of confusion.
Is mutability the devil, should every function not have side-effects, what really is a monad?
Okay, so I may be joking a little with these semi-rhetorical remarks - boy, have I read enough monad posts for a lifetime.
Added to the mainstream application design consensus, the functional paradigm is making inroads out of multi-core necessity (goodbye &lt;a href="http://en.wikipedia.org/wiki/Moore%27s_law" rel="external noopener" target="_blank">Moore&amp;rsquo;s law&lt;/a>).&lt;/p></description></item></channel></rss>