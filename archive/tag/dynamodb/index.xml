<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dynamodb on Edd Mann</title><link>https://eddmann.com/archive/tag/dynamodb/</link><description>Recent content in Dynamodb on Edd Mann</description><generator>Hugo</generator><language>en-GB</language><lastBuildDate>Mon, 31 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://eddmann.com/archive/tag/dynamodb/index.xml" rel="self" type="application/rss+xml"/><item><title>Building a Serverless Wedding Photo Gallery using AWS Lambda, S3 and DynamoDB</title><link>https://eddmann.com/posts/building-a-serverless-wedding-photo-gallery-using-aws-lambda-s3-and-dynamodb/</link><pubDate>Mon, 31 Oct 2022 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/building-a-serverless-wedding-photo-gallery-using-aws-lambda-s3-and-dynamodb/</guid><description>&lt;p>Whilst &lt;a href="https://github.com/eddmann/our-wedding-infra#stage-applications" rel="external noopener" target="_blank">documenting&lt;/a> how I structured the &lt;a href="https://github.com/eddmann/our-wedding-infra" rel="external noopener" target="_blank">infrastructure&lt;/a> used for hosting our wedding website, I mentioned the possibility of showcasing its use for another application concern.
In the tradition of over-engineering a problem related to our wedding, we really did not want resized/compressed photos shared through WhatsApp/iMessage of the big day.
So instead, I decided to create a serverless photo gallery that provided guests with the ability to share the original photos in one place.
I also wanted to explore the ability to achieve this while having 100% feature parity locally in a development setting.
In this post, I would like to discuss how I went about building these photo-upload/resizing and lazy-loaded gallery capabilities using AWS Lambda, S3 and DynamoDB.
The final implementation can be found in &lt;a href="https://github.com/eddmann/our-wedding-gallery" rel="external noopener" target="_blank">this GitHub repository&lt;/a>.&lt;/p></description></item><item><title>Mince Pie Challenge: Viewing and Removing Mince Pies with Amazon DynamoDB</title><link>https://eddmann.com/posts/mince-pie-challenge-viewing-and-removing-mince-pies-with-amazon-dynamodb/</link><pubDate>Tue, 16 Oct 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mince-pie-challenge-viewing-and-removing-mince-pies-with-amazon-dynamodb/</guid><description>&lt;p>In this post we will progress in implementing the proposed endpoint behaviour documented in our &lt;a href="https://eddmann.com/posts/mince-pie-challenge-designing-the-restful-api-with-raml/#viewing-the-pies">RAML design&lt;/a>.
Using the online/offline DynamoDB abstractions that we constructed in the &lt;a href="https://eddmann.com/posts/mince-pie-challenge-adding-and-listing-mince-pies-with-amazon-dynamodb/">previous post&lt;/a>, we will incorporate the ability to view and remove specified mince pies from the challenge.&lt;/p></description></item><item><title>Mince Pie Challenge: Adding and Listing Mince Pies with Amazon DynamoDB</title><link>https://eddmann.com/posts/mince-pie-challenge-adding-and-listing-mince-pies-with-amazon-dynamodb/</link><pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mince-pie-challenge-adding-and-listing-mince-pies-with-amazon-dynamodb/</guid><description>&lt;p>In the &lt;a href="https://eddmann.com/posts/mince-pie-challenge-adding-the-bootstrap-endpoint-and-serverless-offline/">previous post&lt;/a> we began to implement the API endpoints, starting off with creating the bootstrap response.
We did this in a manner that catered for both online and offline development access.
In this post we will incorporate the ability to add and list mince pies, persisting the state within &lt;a href="https://aws.amazon.com/dynamodb/" rel="external noopener" target="_blank">Amazon DynamoDB&lt;/a>.
Following this, we will enrich our offline development process by setting up an &lt;a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBLocal.html" rel="external noopener" target="_blank">Amazon DynamoDB Local&lt;/a> instance using Docker.&lt;/p></description></item></channel></rss>