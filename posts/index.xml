<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Edd Mann</title><link>https://eddmann.com/posts/</link><description>Recent content in Posts on Edd Mann</description><generator>Hugo</generator><language>en-GB</language><lastBuildDate>Thu, 06 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://eddmann.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>How I Used ChatGPT to Fix My Old Blog Posts (And What I Learned)</title><link>https://eddmann.com/posts/how-i-used-chatgpt-to-fix-my-old-blog-posts-and-what-i-learned/</link><pubDate>Thu, 06 Mar 2025 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/how-i-used-chatgpt-to-fix-my-old-blog-posts-and-what-i-learned/</guid><description>&lt;p>Over the past week, I have dedicated some of my free time to a long-overdue blog redesign.
During this process, I stumbled upon several glaring spelling mistakes in older posts, which led me down the path of manually reviewing all my previous entries.
This felt a lot like &lt;a href="https://en.wiktionary.org/wiki/yak_shaving" rel="external noopener" target="_blank">yak shaving&lt;/a>, prompting me to consider whether leveraging a Large Language Model (LLM) could be an effective solution to this problem.&lt;/p></description></item><item><title>Solving the Advent of Code 2023 calendar in Kotlin and Swift</title><link>https://eddmann.com/posts/solving-the-advent-of-code-2023-calendar-in-kotlin-and-swift/</link><pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/solving-the-advent-of-code-2023-calendar-in-kotlin-and-swift/</guid><description>&lt;p>Another year, another &lt;a href="https://adventofcode.com/2023" rel="external noopener" target="_blank">Advent of Code&lt;/a>, another excuse to explore new languages.
After my recent exploration into &lt;a href="https://eddmann.com/posts/building-a-secret-santa-draw-pwa-in-react-and-typescript/">PWAs&lt;/a> this past year, I wanted a reason to explore Kotlin and Swift, two languages equipped for native mobile (Android and iOS) development.
Before delving into the mobile domain, I wanted to see what each language had to offer.
In this post, I will document my experience completing the Advent of Code 2023 calendar in both &lt;a href="https://github.com/eddmann/advent-of-code/tree/master/2023/kotlin" rel="external noopener" target="_blank">Kotlin&lt;/a> and &lt;a href="https://github.com/eddmann/advent-of-code/tree/master/2023/swift" rel="external noopener" target="_blank">Swift&lt;/a>.&lt;/p></description></item><item><title>Building a Secret Santa Draw PWA in React and TypeScript</title><link>https://eddmann.com/posts/building-a-secret-santa-draw-pwa-in-react-and-typescript/</link><pubDate>Sat, 25 Nov 2023 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/building-a-secret-santa-draw-pwa-in-react-and-typescript/</guid><description>&lt;p>Over the &lt;a href="https://eddmann.com/posts/allocating-and-notifying-secret-santas-via-email-using-clojure/">past&lt;/a> &lt;a href="https://eddmann.com/posts/building-a-secret-santa-allocator-and-sms-sender-using-a-raspberry-pi-pico-micropython-and-sim800l-module/">several&lt;/a> &lt;a href="https://eddmann.com/posts/allocating-secret-santas-using-an-aws-step-function-workflow-and-every-available-lambda-runtime/">years&lt;/a>, I have taken the opportunity of allocating Secret Santas for members of my family as a means of exploring new technologies.
For the past several months, I have been interested in the concept of Progressive Web Applications (thanks in large part to &lt;a href="https://frontendmasters.com/courses/pwas/" rel="external noopener" target="_blank">this series&lt;/a>), and getting more hands-on experience with the ever-changing frontend landscape.
As such, I decided that this year I would build a small application that works across Desktop, iOS, and Android to perform Secret Santa draws in both a local and remote setting.
In this post, I would like to document how I went about building this application.&lt;/p></description></item><item><title>Building a Running Calculator PWA in React and TypeScript</title><link>https://eddmann.com/posts/building-a-running-calculator-pwa-in-react-and-typescript/</link><pubDate>Tue, 31 Oct 2023 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/building-a-running-calculator-pwa-in-react-and-typescript/</guid><description>&lt;p>I have been an avid runner for many years now, but I still get confused by imperial and metric measurements.
On top of this, the number of times I seek out a random website to perform some form of pace/distance calculation is too often to count.
What I wanted was a desktop and mobile application that could perform pace, distance, and time calculations, along with imperial/metric conversions - &lt;em>a swiss-army knife of running calculators&lt;/em>.
In this post, I would like to document my experience building a &lt;a href="https://web.dev/articles/what-are-pwas" rel="external noopener" target="_blank">Progressive Web Application&lt;/a> (PWA) that does just this, providing a native app-like experience across iOS, Android, and Desktop.&lt;/p></description></item><item><title>Rewriting the santa-lang Interpreter in Rust, Part 4 - Distribution</title><link>https://eddmann.com/posts/rewriting-the-santa-lang-interpreter-in-rust-part-4-distribution/</link><pubDate>Tue, 08 Aug 2023 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/rewriting-the-santa-lang-interpreter-in-rust-part-4-distribution/</guid><description>&lt;p>Now that the interpreter&amp;rsquo;s performance concerns had been addressed, it was time to decide how each of the available runtimes would be packaged and distributed.
In the final post within the &lt;a href="https://eddmann.com/archive/tag/santa-lang-in-rust-series">series&lt;/a>, I will document how the language and runtimes were built, tested, and distributed using a custom CI/CD pipeline.&lt;/p></description></item><item><title>Rewriting the santa-lang Interpreter in Rust, Part 3 - Performance</title><link>https://eddmann.com/posts/rewriting-the-santa-lang-interpreter-in-rust-part-3-performance/</link><pubDate>Mon, 07 Aug 2023 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/rewriting-the-santa-lang-interpreter-in-rust-part-3-performance/</guid><description>&lt;p>Now that we have discussed building the core language and desired runtimes, it is time to highlight one of the biggest reasons why I decided to rewrite the interpreter in a lower-level systems language - performance!
In this post, I will document how I went about benchmarking the two implementations (TypeScript/Node and Rust), greatly improving performance and highlighting interesting findings along the way.&lt;/p></description></item><item><title>Rewriting the santa-lang Interpreter in Rust, Part 2 - Runtimes</title><link>https://eddmann.com/posts/rewriting-the-santa-lang-interpreter-in-rust-part-2-runtimes/</link><pubDate>Sun, 06 Aug 2023 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/rewriting-the-santa-lang-interpreter-in-rust-part-2-runtimes/</guid><description>&lt;p>With the &lt;a href="https://eddmann.com/posts/rewriting-the-santa-lang-interpreter-in-rust-part-1-implementing-the-core/">core language library&lt;/a> now written, I could go about building the desired (delivery) runtimes.
In this post within the &lt;a href="https://eddmann.com/archive/tag/santa-lang-in-rust-series">series&lt;/a>, I will delve into my experience integrating the core language library with these chosen runtimes, documenting some of the challenges that I faced along the way.&lt;/p></description></item><item><title>Rewriting the santa-lang Interpreter in Rust, Part 1 - Implementing the Core</title><link>https://eddmann.com/posts/rewriting-the-santa-lang-interpreter-in-rust-part-1-implementing-the-core/</link><pubDate>Sat, 05 Aug 2023 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/rewriting-the-santa-lang-interpreter-in-rust-part-1-implementing-the-core/</guid><description>&lt;p>After implementing santa-lang in &lt;a href="https://eddmann.com/posts/designing-santa-lang-a-language-for-solving-advent-of-code-puzzles/">TypeScript (Node)&lt;/a>, I wanted to explore rewriting the tree-walking interpreter in a lower-level systems language for efficiency and performance gains.
My goal was to be able to run the entire &lt;a href="https://adventofcode.com/2022" rel="external noopener" target="_blank">Advent of Code 2022 calendar&lt;/a> &lt;em>quicker&lt;/em> than the Node variant.
I settled on using Rust due to its blend of high and low-level constructs, its vibrant package registry (Cargo), memory management model, and previous &lt;a href="https://eddmann.com/posts/building-a-rubik-cube-solver-using-rust-wasm-threejs-and-react/">enjoyable experience using the language&lt;/a>.
In this first post within the &lt;a href="https://eddmann.com/archive/tag/santa-lang-in-rust-series">series&lt;/a>, I will document how I went about organising the project and rewriting the core language within Rust.&lt;/p></description></item><item><title>Determining your closest Parkrun Alphabet Challenge using Python and pandas</title><link>https://eddmann.com/posts/determining-your-closest-parkrun-alphabet-challenge-using-python-and-pandas/</link><pubDate>Sat, 22 Jul 2023 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/determining-your-closest-parkrun-alphabet-challenge-using-python-and-pandas/</guid><description>&lt;p>The Parkrun Alphabet is an &lt;a href="https://blog.parkrun.com/uk/2018/07/18/the-parkrun-alphabet/" rel="external noopener" target="_blank">unofficial challenge&lt;/a> that sees runners complete a Parkrun at locations starting with each letter of the English alphabet.
I am a big fan of Parkrun and wanted to work out how feasible it would be for me to complete the challenge based on the closest &lt;em>tourist&lt;/em> locations to my &lt;em>local&lt;/em> weekly run.
I also thought this would be a great opportunity to explore &lt;a href="https://pandas.pydata.org/" rel="external noopener" target="_blank">pandas&lt;/a> and work with &lt;a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html" rel="external noopener" target="_blank">DataFrames&lt;/a>.&lt;/p></description></item><item><title>Using LangChain Agents and Tools to answer questions on the NBA with OpenAI</title><link>https://eddmann.com/posts/using-langchain-agents-and-tools-to-answer-questions-on-the-nba-with-openai/</link><pubDate>Fri, 23 Jun 2023 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/using-langchain-agents-and-tools-to-answer-questions-on-the-nba-with-openai/</guid><description>&lt;p>Large language models (OpenAI/ChatGPT in particular) are all the rage at the moment.
Like many developers, I am interested in exploring what is possible with this new technology.
This post documents the use of &lt;a href="https://www.langchain.com/" rel="external noopener" target="_blank">LangChain&lt;/a> &lt;a href="https://python.langchain.com/docs/modules/agents/" rel="external noopener" target="_blank">Agents&lt;/a>/&lt;a href="https://python.langchain.com/docs/modules/tools/" rel="external noopener" target="_blank">Tools&lt;/a> to aid in answering questions based on recent NBA events.&lt;/p></description></item><item><title>Q&amp;A Retrieval Augmented Generation (RAG) with LangChain and Postgres</title><link>https://eddmann.com/posts/qa-retrieval-augmented-generation-rag-with-langchain-and-postgres/</link><pubDate>Mon, 15 May 2023 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/qa-retrieval-augmented-generation-rag-with-langchain-and-postgres/</guid><description>&lt;p>Large-language models (OpenAI/ChatGPT in particular) are all the rage at the moment.
Like many developers, I am interested in exploring what is possible with this new technology.
This post documents my experience exploring how to implement &lt;a href="https://python.langchain.com/docs/use_cases/question_answering/" rel="external noopener" target="_blank">Q&amp;amp;A Retrieval Augmented Generation&lt;/a> (RAG) using LangChain and Postgres (using the &lt;a href="https://github.com/pgvector/pgvector" rel="external noopener" target="_blank">pgvector&lt;/a> extension).&lt;/p></description></item><item><title>Q&amp;A Retrieval Augmented Generation (RAG) with LangChain and Chroma</title><link>https://eddmann.com/posts/qa-retrieval-augmented-generation-rag-with-langchain-and-chroma/</link><pubDate>Wed, 10 May 2023 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/qa-retrieval-augmented-generation-rag-with-langchain-and-chroma/</guid><description>&lt;p>Large-language models (OpenAI/ChatGPT in particular) are all the rage at the moment.
Like many developers, I am interested in exploring what is possible with this new technology.
This post documents my experience exploring how to implement &lt;a href="https://python.langchain.com/docs/use_cases/question_answering/" rel="external noopener" target="_blank">Q&amp;amp;A Retrieval Augmented Generation&lt;/a> (RAG) using LangChain and the &lt;a href="https://www.trychroma.com/" rel="external noopener" target="_blank">Chroma&lt;/a> vector database.&lt;/p></description></item><item><title>Solving the Advent of Code 2022 calendar using my own programming language, santa-lang</title><link>https://eddmann.com/posts/solving-the-advent-of-code-2022-calendar-using-my-own-programming-language-santa-lang/</link><pubDate>Sat, 28 Jan 2023 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/solving-the-advent-of-code-2022-calendar-using-my-own-programming-language-santa-lang/</guid><description>&lt;p>December has come and gone, and the dust has settled on completing the Advent of Code 2022 calendar.
As highlighted in my &lt;a href="https://eddmann.com/posts/designing-santa-lang-a-language-for-solving-advent-of-code-puzzles/">previous post&lt;/a>, I wanted to complete this year&amp;rsquo;s puzzles using my own programming language, santa-lang, which I have tailored to help aid in solving such problems.
In this post, I want to discuss this experience, how the language aided in solution development, and where additions or changes were made to improve it along the way.&lt;/p></description></item><item><title>Designing santa-lang, a language for solving Advent of Code puzzles</title><link>https://eddmann.com/posts/designing-santa-lang-a-language-for-solving-advent-of-code-puzzles/</link><pubDate>Wed, 30 Nov 2022 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/designing-santa-lang-a-language-for-solving-advent-of-code-puzzles/</guid><description>&lt;p>Over the past several years, I have been slowly working &lt;a href="https://github.com/eddmann/advent-of-code/tree/master/2015" rel="external noopener" target="_blank">my&lt;/a> &lt;a href="https://github.com/eddmann/advent-of-code/tree/master/2016/python" rel="external noopener" target="_blank">way&lt;/a> &lt;a href="https://github.com/eddmann/advent-of-code/tree/master/2017/rust" rel="external noopener" target="_blank">through&lt;/a> the previous Advent of Code calendars.
For each calendar, I opt to solve the puzzles in a new programming language to familiarise myself with other ways of understanding and working.
However, there comes a time in each calendar when I grow to dislike some aspect of the language.
So I had an idea&amp;hellip; why not give this whole programming language design a go?
That way, if I grow to dislike the language, I only have myself to blame!&lt;/p></description></item><item><title>Allocating Secret Santas using an AWS Step Function workflow and every available Lambda runtime</title><link>https://eddmann.com/posts/allocating-secret-santas-using-an-aws-step-function-workflow-and-every-available-lambda-runtime/</link><pubDate>Tue, 01 Nov 2022 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/allocating-secret-santas-using-an-aws-step-function-workflow-and-every-available-lambda-runtime/</guid><description>&lt;p>Over the past several years, I have taken the opportunity of allocating Secret Santas for members of my family as an excuse to explore different &lt;a href="https://eddmann.com/posts/allocating-and-notifying-secret-santas-via-email-using-clojure/">programming languages&lt;/a> and &lt;a href="https://eddmann.com/posts/building-a-secret-santa-allocator-and-sms-sender-using-a-raspberry-pi-pico-micropython-and-sim800l-module/">technologies&lt;/a>.
This year has been no different, with me opting to &lt;em>over-engineer&lt;/em> the problem of allocating and notifying participants by diving into &lt;a href="https://aws.amazon.com/step-functions/" rel="external noopener" target="_blank">AWS Step Functions&lt;/a> and the many runtimes available on Lambda.
In this post, I wish to document how I went about designing the Step Function workflow and breaking up the problem into many specific-purpose Lambda behaviours.
The final implementation can be found in &lt;a href="https://github.com/eddmann/step-function-secret-santa" rel="external noopener" target="_blank">this GitHub repository&lt;/a>.&lt;/p></description></item><item><title>Building a Serverless Wedding Photo Gallery using AWS Lambda, S3 and DynamoDB</title><link>https://eddmann.com/posts/building-a-serverless-wedding-photo-gallery-using-aws-lambda-s3-and-dynamodb/</link><pubDate>Mon, 31 Oct 2022 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/building-a-serverless-wedding-photo-gallery-using-aws-lambda-s3-and-dynamodb/</guid><description>&lt;p>Whilst &lt;a href="https://github.com/eddmann/our-wedding-infra#stage-applications" rel="external noopener" target="_blank">documenting&lt;/a> how I structured the &lt;a href="https://github.com/eddmann/our-wedding-infra" rel="external noopener" target="_blank">infrastructure&lt;/a> used for hosting our wedding website, I mentioned the possibility of showcasing its use for another application concern.
In the tradition of over-engineering a problem related to our wedding, we really did not want resized/compressed photos shared through WhatsApp/iMessage of the big day.
So instead, I decided to create a serverless photo gallery that provided guests with the ability to share the original photos in one place.
I also wanted to explore the ability to achieve this while having 100% feature parity locally in a development setting.
In this post, I would like to discuss how I went about building these photo-upload/resizing and lazy-loaded gallery capabilities using AWS Lambda, S3 and DynamoDB.
The final implementation can be found in &lt;a href="https://github.com/eddmann/our-wedding-gallery" rel="external noopener" target="_blank">this GitHub repository&lt;/a>.&lt;/p></description></item><item><title>Solving the Advent of Code 2021 calendar on a Raspberry Pi Pico</title><link>https://eddmann.com/posts/solving-the-advent-of-code-2021-calendar-on-a-raspberry-pi-pico/</link><pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/solving-the-advent-of-code-2021-calendar-on-a-raspberry-pi-pico/</guid><description>&lt;p>Over the past year or so, I have been interested in microcontrollers and finding ways I can look to &lt;a href="https://eddmann.com/posts/building-a-2fa-totp-generator-using-a-raspberry-pi-pico-and-micropython/">use them&lt;/a> within personal projects.
Having just completed the &lt;a href="https://eddmann.com/posts/solving-the-advent-of-code-2021-calendar-using-c-in-under-half-a-second/">Advent of Code 2021&lt;/a> calendar in C, I thought it would be interesting to see how many of these solutions I could get to run on the constrained hardware of a Raspberry Pi Pico.
In this article, I will discuss how I went about achieving this, presenting the solutions&amp;rsquo; answers on a &lt;a href="https://shop.pimoroni.com/products/pico-display-pack?variant=32368664215635" rel="external noopener" target="_blank">Pimoroni Display&lt;/a> via an interactive menu (with paging).&lt;/p></description></item><item><title>Solving the Advent of Code 2021 calendar using C in under half-a-second</title><link>https://eddmann.com/posts/solving-the-advent-of-code-2021-calendar-using-c-in-under-half-a-second/</link><pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/solving-the-advent-of-code-2021-calendar-using-c-in-under-half-a-second/</guid><description>&lt;p>Since being introduced to the world of &lt;a href="https://adventofcode.com/" rel="external noopener" target="_blank">Advent of Code&lt;/a> just prior to the 2020 calendar starting, I subsequently spent the majority of 2021 completing (and documenting) the &lt;a href="https://eddmann.com/archive/tag/advent-of-code-2015">2015&lt;/a>, &lt;a href="https://eddmann.com/archive/tag/advent-of-code-2016">2016&lt;/a> and &lt;a href="https://github.com/eddmann/advent-of-code/tree/master/2017/rust" rel="external noopener" target="_blank">2017&lt;/a> calendars.
For the 2021 calendar, I decided that it would be interesting (and challenging) to complete the calendar in C, with an initial solution written in Python to meet the daily aspect of the challenge.
Additionally, with C being such a performant language, I also wanted to set the goal of ensuring that the entire C calendar was solvable on a single CPU core in under half a second (inspired by &lt;a href="https://www.dannyvankooten.com/blog/2021/solving-advent-of-code-2020-under-1-second/" rel="external noopener" target="_blank">this&lt;/a> blog post).
In this post, I wish to discuss how I went about achieving this goal (&lt;em>spoiler&lt;/em>: &lt;code>410315 μs (0.410 s)&lt;/code> on average) and the hurdles I faced along the way.&lt;/p></description></item><item><title>Deploying our Wedding Website onto a Raspberry Pi Kubernetes Cluster using K3s and Helm</title><link>https://eddmann.com/posts/deploying-our-wedding-website-onto-a-raspberry-pi-kubernetes-cluster-using-k3s-and-helm/</link><pubDate>Fri, 29 Apr 2022 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/deploying-our-wedding-website-onto-a-raspberry-pi-kubernetes-cluster-using-k3s-and-helm/</guid><description>&lt;p>Over the past couple of weeks, I have been considering how feasible it would be to deploy the &lt;a href="https://github.com/eddmann/our-wedding-website" rel="external noopener" target="_blank">wedding website&lt;/a> I released earlier this year on Kubernetes using a Raspberry Pi cluster.
After a little research, this past bank holiday weekend, I set myself the goal of building and deploying the web application on Kubernetes by the end of the Monday bank holiday!
In this post, I would like to discuss how I went about achieving this goal and what I learnt in the process.&lt;/p></description></item><item><title>Containerising the DataDog Agent for HTTP health-checks using DigitalOcean App Platform and Terraform</title><link>https://eddmann.com/posts/containerising-the-datadog-agent-for-http-health-checks-using-digitalocean-app-platform-and-terraform/</link><pubDate>Thu, 28 Apr 2022 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/containerising-the-datadog-agent-for-http-health-checks-using-digitalocean-app-platform-and-terraform/</guid><description>&lt;p>We have been big fans of DataDog and the level of telemetry/monitoring it provides us for many years now.
One such aspect of monitoring that we employ throughout the services we maintain is &lt;a href="https://docs.datadoghq.com/integrations/http_check/" rel="external noopener" target="_blank">HTTP health checks&lt;/a>, which are intentionally run on a separate cloud provider to our primary, which is AWS.
DataDog has provided the ability to handle running these checks via &lt;a href="https://docs.datadoghq.com/agent/" rel="external noopener" target="_blank">their agent&lt;/a> for many years, offering us a sufficient black-box means of ensuring a service is functioning as expected.
This past week, we explored the viability of containerising this responsibility into a service that could be run on a serverless platform such as the &lt;a href="https://www.digitalocean.com/products/app-platform" rel="external noopener" target="_blank">DigitalOcean App Platform&lt;/a>.&lt;/p></description></item><item><title>Can you name that AWS service?</title><link>https://eddmann.com/posts/can-you-name-that-aws-service/</link><pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/can-you-name-that-aws-service/</guid><description>&lt;p>I have always been amazed by the sheer number of services AWS offers.
Although I spend a lot of time working within AWS, I am always surprised to find yet another service that I did not know existed.
Better still, with each new service comes an associated new service icon.
This is why I thought it would be interesting (and somewhat educational) to build a small trivia game that quizzes you on AWS service icons.&lt;/p></description></item><item><title>Managing long-running AWS Fargate ECS tasks within your Serverless project</title><link>https://eddmann.com/posts/managing-long-running-aws-fargate-ecs-tasks-within-your-serverless-project/</link><pubDate>Wed, 16 Mar 2022 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/managing-long-running-aws-fargate-ecs-tasks-within-your-serverless-project/</guid><description>&lt;p>I am a big proponent of the Serverless movement.
The ability to concentrate efforts on only the code and infrastructure concerns that directly add business value is very powerful.
Function-as-a-Service (FaaS) offerings like AWS Lambda impose limitations that help in designing more fault-tolerant and scalable systems, leaning towards event-driven architectures.
However, there are times when we need to execute behaviour that exceeds common FaaS duration limits (i.e. AWS Lambda&amp;rsquo;s 15-minute limit).
In this case, we ideally do not want to resort to a lower level of compute (i.e. a VPS such as EC2), but instead, be able to define and run such behaviour alongside our FaaS counterparts.
In this post, I would like to discuss a &lt;a href="https://github.com/eddmann/serverless-fargate" rel="external noopener" target="_blank">Serverless Framework plugin&lt;/a> I have written, which aids in bridging this gap by way of ECS and &lt;a href="https://aws.amazon.com/fargate/" rel="external noopener" target="_blank">AWS Fargate&lt;/a>.&lt;/p></description></item><item><title>Separating out the Lambda Bref runtime from your project's Composer dependencies</title><link>https://eddmann.com/posts/separating-out-the-lambda-bref-runtime-from-your-projects-composer-dependencies/</link><pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/separating-out-the-lambda-bref-runtime-from-your-projects-composer-dependencies/</guid><description>&lt;p>Having had great success using AWS Lambda within our insurance product (&lt;a href="https://mybuilder-plus.com/" rel="external noopener" target="_blank">MyBuilder Plus&lt;/a>), late last year we made the decision to move &lt;strong>all&lt;/strong> our web request traffic over to the platform!
However, we noticed when attempting to migrate over one application in particular, that we could not use the latest release of &lt;a href="https://bref.sh/" rel="external noopener" target="_blank">Bref&lt;/a> (the PHP runtime) due to a conflict between required Symfony &lt;a href="https://symfony.com/doc/current/components/process.html" rel="external noopener" target="_blank">Process component&lt;/a> versions.&lt;/p></description></item><item><title>Using GitHub Actions to send Gone Live release notes via Email and Slack</title><link>https://eddmann.com/posts/using-github-actions-to-send-gone-live-release-notes-via-email-and-slack/</link><pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/using-github-actions-to-send-gone-live-release-notes-via-email-and-slack/</guid><description>&lt;p>Ensuring that both the tech team and the company as a whole are aware of changes that have just been released is very important.
This keeps everyone &lt;em>in the loop&lt;/em> with the work that the tech team are carrying out and how the system is changing over time.
Last year, MyBuilder transitioned away from Jenkins to GitHub Actions to manage our CI pipelines, and in the process, we were able to revise how we notified interested parties about releases.&lt;/p></description></item><item><title>Our Wedding Website, Three Years in the Making...</title><link>https://eddmann.com/posts/our-wedding-website-three-years-in-the-making/</link><pubDate>Fri, 28 Jan 2022 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/our-wedding-website-three-years-in-the-making/</guid><description>&lt;p>Like many developers, over-engineering personal projects in the spirit of learning is something I am well aware of doing.
So, when it came time to decide how we were going to collect RSVPs for our upcoming wedding, I already had ideas.
What resulted was a solution that follows DDD, CQRS, Hexagonal Architecture, Event Sourcing, and is deployed on AWS Lambda using PHP.&lt;/p></description></item><item><title>Building a Secret Santa allocator and SMS sender using a Raspberry Pi Pico/MicroPython and SIM800L module</title><link>https://eddmann.com/posts/building-a-secret-santa-allocator-and-sms-sender-using-a-raspberry-pi-pico-micropython-and-sim800l-module/</link><pubDate>Wed, 03 Nov 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/building-a-secret-santa-allocator-and-sms-sender-using-a-raspberry-pi-pico-micropython-and-sim800l-module/</guid><description>&lt;p>Over the past couple of years, I have explored &lt;a href="https://eddmann.com/posts/allocating-secret-santas-with-a-substitution-cipher-using-clojure/">several&lt;/a> &lt;a href="https://eddmann.com/posts/allocating-and-notifying-secret-santas-via-email-using-clojure/">different&lt;/a> ways to solve the problem of allocating Secret Santas for members of my family.
Having spent a couple of months recently exploring microcontrollers, I decided that this year I would send out automatically allocated Secret Santas via SMS using a Raspberry Pi Pico, MicroPython, and a &lt;a href="https://lastminuteengineers.com/sim800l-gsm-module-arduino-tutorial/" rel="external noopener" target="_blank">SIM800L GSM module&lt;/a>.&lt;/p></description></item><item><title>Building a 2FA TOTP generator using a Raspberry Pi Pico and MicroPython</title><link>https://eddmann.com/posts/building-a-2fa-totp-generator-using-a-raspberry-pi-pico-and-micropython/</link><pubDate>Wed, 20 Oct 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/building-a-2fa-totp-generator-using-a-raspberry-pi-pico-and-micropython/</guid><description>&lt;p>I have recently become very interested in microcontrollers, particularly the &lt;a href="https://www.raspberrypi.com/products/raspberry-pi-pico/" rel="external noopener" target="_blank">Raspberry Pi Pico&lt;/a>.
Not only is it ridiculously affordable (just over £3), but it also provides extensive scope for use in various projects.
One such project I wanted to explore was building an independent &lt;a href="https://en.wikipedia.org/wiki/Time-based_one-time_password" rel="external noopener" target="_blank">Time-based One-time Password&lt;/a> (TOTP) device.&lt;/p></description></item><item><title>Building a Rubik's Cube Solver using Rust/WASM and Three.js/React</title><link>https://eddmann.com/posts/building-a-rubik-cube-solver-using-rust-wasm-threejs-and-react/</link><pubDate>Tue, 06 Jul 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/building-a-rubik-cube-solver-using-rust-wasm-threejs-and-react/</guid><description>&lt;p>After building the &lt;a href="https://eddmann.com/posts/building-an-optimal-pocket-cube-solver-using-rust-wasm-threejs-and-react/">Pocket Cube Solver&lt;/a>, I wished to expand upon this design and cater for a conventional 3x3x3 Rubik&amp;rsquo;s Cube.
In this post, I discuss the process I went through in designing and building the solver and visual client alike - taking the learnings garnered from implementing the previous solver.&lt;/p></description></item><item><title>Building an optimal Pocket Cube (2x2x2) Solver using Rust/WASM and Three.js/React</title><link>https://eddmann.com/posts/building-an-optimal-pocket-cube-solver-using-rust-wasm-threejs-and-react/</link><pubDate>Sun, 04 Jul 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/building-an-optimal-pocket-cube-solver-using-rust-wasm-threejs-and-react/</guid><description>&lt;p>Over the past couple of months, I have been very interested in exploring how to efficiently visualise and solve a Rubik&amp;rsquo;s Cube.
Coupled with my desire to experiment with Rust and WASM, this felt like a great opportunity to blend the two.
However, before solving a 3x3x3 Rubik&amp;rsquo;s Cube, I thought it would be beneficial to explore how to optimally solve a Pocket Cube first.&lt;/p></description></item><item><title>Advent of Code 2016 - Day 11 - Radioisotope Thermoelectric Generators</title><link>https://eddmann.com/posts/advent-of-code-2016-day-11-radioisotope-thermoelectric-generators/</link><pubDate>Wed, 07 Apr 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2016-day-11-radioisotope-thermoelectric-generators/</guid><description>&lt;p>On the eleventh day of Advent of Code 2016, we are tasked with moving all the supplied Generators and Microchips to the top floor using a single elevator.&lt;/p></description></item><item><title>Advent of Code 2016 - Day 10 - Balance Bots</title><link>https://eddmann.com/posts/advent-of-code-2016-day-10-balance-bots/</link><pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2016-day-10-balance-bots/</guid><description>&lt;p>On the tenth day of Advent of Code 2016, we come across a factory in which many robots are zooming around, handing small microchips to each other.&lt;/p></description></item><item><title>Advent of Code 2016 - Day 9 - Explosives in Cyberspace</title><link>https://eddmann.com/posts/advent-of-code-2016-day-9-explosives-in-cyberspace/</link><pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2016-day-9-explosives-in-cyberspace/</guid><description>&lt;p>On the ninth day of Advent of Code 2016, we are asked to calculate the decompressed length of a file.&lt;/p></description></item><item><title>Advent of Code 2016 - Day 8 - Two-Factor Authentication</title><link>https://eddmann.com/posts/advent-of-code-2016-day-8-two-factor-authentication/</link><pubDate>Tue, 30 Mar 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2016-day-8-two-factor-authentication/</guid><description>&lt;p>On the eighth day of Advent of Code 2016, we are required to work out what a &lt;em>smashed&lt;/em> LCD screen would have displayed.&lt;/p></description></item><item><title>Advent of Code 2016 - Day 7 - Internet Protocol Version 7</title><link>https://eddmann.com/posts/advent-of-code-2016-day-7-internet-protocol-version-7/</link><pubDate>Mon, 29 Mar 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2016-day-7-internet-protocol-version-7/</guid><description>&lt;p>On the seventh day of Advent of Code 2016, we are required to determine which IPv7 addresses support TLS (Transport-Layer Snooping) and SSL (Super-Secret Listening).&lt;/p></description></item><item><title>Advent of Code 2016 - Day 6 - Signals and Noise</title><link>https://eddmann.com/posts/advent-of-code-2016-day-6-signals-and-noise/</link><pubDate>Sun, 28 Mar 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2016-day-6-signals-and-noise/</guid><description>&lt;p>On the sixth day of Advent of Code 2016, we are required to determine the error-corrected message that is being sent to Santa.&lt;/p></description></item><item><title>Advent of Code 2016 - Day 5 - How About a Nice Game of Chess?</title><link>https://eddmann.com/posts/advent-of-code-2016-day-5-how-about-a-nice-game-of-chess/</link><pubDate>Sat, 27 Mar 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2016-day-5-how-about-a-nice-game-of-chess/</guid><description>&lt;p>On the fifth day of Advent of Code 2016, we are asked to calculate the password for a security door in Easter Bunny HQ.&lt;/p></description></item><item><title>Advent of Code 2016 - Day 4 - Security Through Obscurity</title><link>https://eddmann.com/posts/advent-of-code-2016-day-4-security-through-obscurity/</link><pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2016-day-4-security-through-obscurity/</guid><description>&lt;p>On the fourth day of Advent of Code 2016, we are asked to validate and decrypt a listing of room names.&lt;/p></description></item><item><title>Advent of Code 2016 - Day 3 - Squares With Three Sides</title><link>https://eddmann.com/posts/advent-of-code-2016-day-3-squares-with-three-sides/</link><pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2016-day-3-squares-with-three-sides/</guid><description>&lt;p>On the third day of Advent of Code 2016, we are asked to work out how many valid triangles are present in a given listing.&lt;/p></description></item><item><title>Advent of Code 2016 - Day 2 - Bathroom Security</title><link>https://eddmann.com/posts/advent-of-code-2016-day-2-bathroom-security/</link><pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2016-day-2-bathroom-security/</guid><description>&lt;p>On the second day of Advent of Code 2016, we are asked to work out what a bathroom code is based on the supplied instructions.&lt;/p></description></item><item><title>Advent of Code 2016 - Day 1 - No Time for a Taxicab</title><link>https://eddmann.com/posts/advent-of-code-2016-day-1-no-time-for-a-taxicab/</link><pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2016-day-1-no-time-for-a-taxicab/</guid><description>&lt;p>Having enjoyed documenting my progress in completing the Advent of Code 2015 advent calendar in TypeScript, I have decided to do the same for 2016.
However, for this year, I wish to instead explore Python.&lt;/p></description></item><item><title>Advent of Code 2015 - Day 25 - Let It Snow</title><link>https://eddmann.com/posts/advent-of-code-2015-day-25-let-it-snow/</link><pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2015-day-25-let-it-snow/</guid><description>&lt;p>On the twenty-fifth day of Advent of Code 2015, we are asked to help Santa boot up his weather machine.&lt;/p></description></item><item><title>Advent of Code 2015 - Day 24 - It Hangs in the Balance</title><link>https://eddmann.com/posts/advent-of-code-2015-day-24-it-hangs-in-the-balance/</link><pubDate>Fri, 19 Feb 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2015-day-24-it-hangs-in-the-balance/</guid><description>&lt;p>On the twenty-fourth day of Advent of Code 2015, we are asked to help Santa balance his sleigh based on all the presents he has to carry.&lt;/p></description></item><item><title>Advent of Code 2015 - Day 23 - Opening the Turing Lock</title><link>https://eddmann.com/posts/advent-of-code-2015-day-23-opening-the-turing-lock/</link><pubDate>Thu, 18 Feb 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2015-day-23-opening-the-turing-lock/</guid><description>&lt;p>On the twenty-third day of Advent of Code 2015, we are asked to help &amp;lsquo;Little Jane Marie&amp;rsquo; run a program on a computer she got for Christmas.&lt;/p></description></item><item><title>Advent of Code 2015 - Day 22 - Wizard Simulator 20XX</title><link>https://eddmann.com/posts/advent-of-code-2015-day-22-wizard-simulator-20xx/</link><pubDate>Wed, 17 Feb 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2015-day-22-wizard-simulator-20xx/</guid><description>&lt;p>On the twenty-second day of Advent of Code 2015, we are asked to help &amp;lsquo;Little Henry Case&amp;rsquo; beat the boss in another video game he is stuck on.&lt;/p></description></item><item><title>Advent of Code 2015 - Day 21 - RPG Simulator 20XX</title><link>https://eddmann.com/posts/advent-of-code-2015-day-21-rpg-simulator-20xx/</link><pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2015-day-21-rpg-simulator-20xx/</guid><description>&lt;p>On the twenty-first day of Advent of Code 2015, we are asked to help &amp;lsquo;Little Henry Case&amp;rsquo; beat the boss in a new video game he got for Christmas.&lt;/p></description></item><item><title>Advent of Code 2015 - Day 20 - Infinite Elves and Infinite Houses</title><link>https://eddmann.com/posts/advent-of-code-2015-day-20-infinite-elves-and-infinite-houses/</link><pubDate>Sat, 13 Feb 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2015-day-20-infinite-elves-and-infinite-houses/</guid><description>&lt;p>On the twentieth day of Advent of Code 2015, we are asked to help work out how many presents the Elves will deliver to specific houses.&lt;/p></description></item><item><title>Advent of Code 2015 - Day 19 - Medicine for Rudolph</title><link>https://eddmann.com/posts/advent-of-code-2015-day-19-medicine-for-rudolph/</link><pubDate>Fri, 12 Feb 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2015-day-19-medicine-for-rudolph/</guid><description>&lt;p>On the nineteenth day of Advent of Code 2015, Rudolph is sick, and we have been tasked with helping develop the &lt;em>custom-made&lt;/em> medicine required.&lt;/p></description></item><item><title>Advent of Code 2015 - Day 18 - Like a GIF For Your Yard</title><link>https://eddmann.com/posts/advent-of-code-2015-day-18-like-a-gif-for-your-yard/</link><pubDate>Thu, 11 Feb 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2015-day-18-like-a-gif-for-your-yard/</guid><description>&lt;p>On the eighteenth day of Advent of Code 2015, we are asked to re-arrange the light show we created on &lt;a href="https://eddmann.com/posts/advent-of-code-2015-day-6-probably-a-fire-hazard/">a previous day&lt;/a>.&lt;/p></description></item><item><title>Advent of Code 2015 - Day 17 - No Such Thing as Too Much</title><link>https://eddmann.com/posts/advent-of-code-2015-day-17-no-such-thing-as-too-much/</link><pubDate>Wed, 10 Feb 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2015-day-17-no-such-thing-as-too-much/</guid><description>&lt;p>On the seventeenth day of Advent of Code 2015, the elves bought 150 litres of eggnog that we are asked to fit in the supplied containers for refrigeration.&lt;/p></description></item><item><title>Advent of Code 2015 - Day 16 - Aunt Sue</title><link>https://eddmann.com/posts/advent-of-code-2015-day-16-aunt-sue/</link><pubDate>Tue, 09 Feb 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2015-day-16-aunt-sue/</guid><description>&lt;p>On the sixteenth day of Advent of Code 2015, we are tasked with working out which Aunt Sue (there are 500!?) sent us a gift, so we can send them a thank you card.&lt;/p></description></item><item><title>Advent of Code 2015 - Day 15 - Science for Hungry People</title><link>https://eddmann.com/posts/advent-of-code-2015-day-15-science-for-hungry-people/</link><pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2015-day-15-science-for-hungry-people/</guid><description>&lt;p>On the fifteenth day of Advent of Code 2015, we are tasked with finding the right balance of ingredients to make the perfect milk-dunking cookie recipe.&lt;/p></description></item><item><title>Advent of Code 2015 - Day 14 - Reindeer Olympics</title><link>https://eddmann.com/posts/advent-of-code-2015-day-14-reindeer-olympics/</link><pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2015-day-14-reindeer-olympics/</guid><description>&lt;p>On the fourteenth day of Advent of Code 2015, Santa wants to find out who is the fastest reindeer.&lt;/p></description></item><item><title>Advent of Code 2015 - Day 13 - Knights of the Dinner Table</title><link>https://eddmann.com/posts/advent-of-code-2015-day-13-knights-of-the-dinner-table/</link><pubDate>Sat, 06 Feb 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2015-day-13-knights-of-the-dinner-table/</guid><description>&lt;p>On the thirteenth day of Advent of Code 2015, we are tasked with finding the optimal seating arrangement for our family &lt;em>holiday feast&lt;/em>.&lt;/p></description></item><item><title>Advent of Code 2015 - Day 12 - JSAbacusFramework.io</title><link>https://eddmann.com/posts/advent-of-code-2015-day-12-jsabacusframework-io/</link><pubDate>Fri, 05 Feb 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2015-day-12-jsabacusframework-io/</guid><description>&lt;p>On the twelfth day of Advent of Code 2015, Santa&amp;rsquo;s Accounting-Elves need help balancing the books after a recent order.&lt;/p></description></item><item><title>Advent of Code 2015 - Day 11 - Corporate Policy</title><link>https://eddmann.com/posts/advent-of-code-2015-day-11-corporate-policy/</link><pubDate>Thu, 04 Feb 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2015-day-11-corporate-policy/</guid><description>&lt;p>On the eleventh day of Advent of Code 2015, we are asked to help Santa pick a new &lt;em>memorable&lt;/em> password, as his last one has expired.&lt;/p></description></item><item><title>Advent of Code 2015 - Day 10 - Elves Look, Elves Say</title><link>https://eddmann.com/posts/advent-of-code-2015-day-10-elves-look-elves-say/</link><pubDate>Wed, 03 Feb 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2015-day-10-elves-look-elves-say/</guid><description>&lt;p>On the tenth day of Advent of Code 2015, the Elves are playing a game of &lt;a href="https://en.wikipedia.org/wiki/Look-and-say_sequence" rel="external noopener" target="_blank">look-and-say&lt;/a>, in which we are asked to find several terms in the sequence.&lt;/p></description></item><item><title>Advent of Code 2015 - Day 9 - All in a Single Night</title><link>https://eddmann.com/posts/advent-of-code-2015-day-9-all-in-a-single-night/</link><pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2015-day-9-all-in-a-single-night/</guid><description>&lt;p>On the ninth day of Advent of Code 2015, Santa wants us to examine some new locations (and distances) he is required to visit.&lt;/p></description></item><item><title>Advent of Code 2015 - Day 8 - Matchsticks</title><link>https://eddmann.com/posts/advent-of-code-2015-day-8-matchsticks/</link><pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2015-day-8-matchsticks/</guid><description>&lt;p>On the eighth day of Advent of Code 2015, Santa wants to know how much space his newly digitised list will take up when stored.&lt;/p></description></item><item><title>Advent of Code 2015 - Day 7 - Some Assembly Required</title><link>https://eddmann.com/posts/advent-of-code-2015-day-7-some-assembly-required/</link><pubDate>Sun, 31 Jan 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2015-day-7-some-assembly-required/</guid><description>&lt;p>On the seventh day of Advent of Code 2015, we are tasked with helping little Bobby Tables assemble a circuit (wires and bitwise logic gates) that Santa brought him for Christmas.&lt;/p></description></item><item><title>Advent of Code 2015 - Day 6 - Probably a Fire Hazard</title><link>https://eddmann.com/posts/advent-of-code-2015-day-6-probably-a-fire-hazard/</link><pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2015-day-6-probably-a-fire-hazard/</guid><description>&lt;p>On the sixth day of Advent of Code 2015, we are tasked with trying to win the holiday house decorating contest - by designing the best light sequence 💡.&lt;/p></description></item><item><title>Advent of Code 2015 - Day 5 - Doesn't He Have Intern-Elves For This?</title><link>https://eddmann.com/posts/advent-of-code-2015-day-5-doesnt-he-have-intern-elves-for-this/</link><pubDate>Fri, 29 Jan 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2015-day-5-doesnt-he-have-intern-elves-for-this/</guid><description>&lt;p>On the fifth day of Advent of Code 2015, Santa needs help figuring out which strings in his text file are &lt;em>naughty or nice&lt;/em> - a.k.a best load up a &lt;a href="https://regex101.com/" rel="external noopener" target="_blank">Regular Expression tester&lt;/a>!&lt;/p></description></item><item><title>Advent of Code 2015 - Day 4 - The Ideal Stocking Stuffer</title><link>https://eddmann.com/posts/advent-of-code-2015-day-4-the-ideal-stocking-stuffer/</link><pubDate>Thu, 28 Jan 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2015-day-4-the-ideal-stocking-stuffer/</guid><description>&lt;p>On the fourth day of Advent of Code 2015, Santa needs help mining some AdventCoins 💵.&lt;/p></description></item><item><title>Advent of Code 2015 - Day 3 - Perfectly Spherical Houses in a Vacuum</title><link>https://eddmann.com/posts/advent-of-code-2015-day-3-perfectly-spherical-houses-in-a-vacuum/</link><pubDate>Wed, 27 Jan 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2015-day-3-perfectly-spherical-houses-in-a-vacuum/</guid><description>&lt;p>On the third day of Advent of Code 2015, we are asked to help determine (based on supplied directions) how many houses Santa (and Robo-Santa) will deliver presents to.&lt;/p></description></item><item><title>Implementing a Compound Set in TypeScript</title><link>https://eddmann.com/posts/implementing-a-compound-set-in-typescript/</link><pubDate>Wed, 27 Jan 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/implementing-a-compound-set-in-typescript/</guid><description>&lt;p>Since being introduced to Advent of Code, one feature missing from JavaScript that I have seen available in other languages (such as Python and Clojure) is Sets that handle &lt;a href="https://www.oreilly.com/library/view/javascript-design/0735711674/0735711674_ch03lev1sec3.html" rel="external noopener" target="_blank">Compound data-types&lt;/a>.
To focus each puzzle solution on the problem at hand and not &lt;em>re-invent the wheel&lt;/em>, I decided to implement a &lt;code>CompoundSet&lt;/code> data structure to fill this void.&lt;/p></description></item><item><title>Advent of Code 2015 - Day 2 - I Was Told There Would Be No Math</title><link>https://eddmann.com/posts/advent-of-code-2015-day-2-i-was-told-there-would-be-no-math/</link><pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2015-day-2-i-was-told-there-would-be-no-math/</guid><description>&lt;p>The second day of Advent of Code 2015 brings us a small maths problem by way of Elves &lt;em>running low&lt;/em> on wrapping paper.
With the present dimensions (perfect right rectangular prisms) provided, we are to answer several related questions.&lt;/p></description></item><item><title>Advent of Code 2015 - Day 1 - Not Quite Lisp</title><link>https://eddmann.com/posts/advent-of-code-2015-day-1-not-quite-lisp/</link><pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/advent-of-code-2015-day-1-not-quite-lisp/</guid><description>&lt;p>This past December, a &lt;a href="https://github.com/tomcant" rel="external noopener" target="_blank">fellow colleague&lt;/a> introduced us to &lt;a href="https://adventofcode.com/" rel="external noopener" target="_blank">Advent of Code&lt;/a>.
What initially started out as completing each daily 2020 puzzle &lt;em>in my own time&lt;/em> soon turned into a daily obsession, and in turn, an incredible learning experience shared amongst the team.&lt;/p>
&lt;p>Having completed the 2020 calendar at the end of last year, over the past couple of weeks we have begun working through the previous calendars.
Over the coming months, I hope to record each of my solutions, with the goal of completing all the previous puzzles just in time for the 2021 calendar to commence.&lt;/p></description></item><item><title>Building an Enigma Machine in Haskell</title><link>https://eddmann.com/posts/building-an-enigma-machine-in-haskell/</link><pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/building-an-enigma-machine-in-haskell/</guid><description>&lt;p>Following on from my previous post which highlighted my experience building an &lt;a href="https://eddmann.com/posts/building-an-enigma-machine-in-clojurescript/">Enigma Machine in ClojureScript&lt;/a>.
I decided it would be interesting to model the machine within Haskell.
I felt solving the same problem in this manner would be a great way to compare and contrast Lisp and heavily-typed languages such as Haskell.
Through this process I also wanted to explore using Hspec and QuickCheck for comparable property-based testing that I achieved in the ClojureScript counterpart.&lt;/p></description></item><item><title>Building an Enigma Machine in ClojureScript</title><link>https://eddmann.com/posts/building-an-enigma-machine-in-clojurescript/</link><pubDate>Wed, 25 Nov 2020 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/building-an-enigma-machine-in-clojurescript/</guid><description>&lt;p>The Enigma Machine is a typewriter-sized substitution encryption device used by Germany in World War 2.
It was so important to the war-time efforts that work carried out by Alan Turing at Bletchley Park to decode the resulting ciphers helped end the war.
For years I have been fascinated by this device, and I thought it would be interesting to explore implementing a web-based Enigma Machine using ClojureScript.
I also thought it would be a great opportunity to explore how I can use property-based testing to help garner confidence from the resulting implementation.&lt;/p></description></item><item><title>Creating a React-based Chess Game with WASM Bots in TypeScript</title><link>https://eddmann.com/posts/creating-a-react-based-chess-game-with-wasm-bots-in-typescript/</link><pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/creating-a-react-based-chess-game-with-wasm-bots-in-typescript/</guid><description>&lt;p>A couple of years ago I explored using a &lt;a href="https://github.com/niklasf/stockfish.wasm" rel="external noopener" target="_blank">WebAssembly port&lt;/a> of &lt;a href="https://stockfishchess.org/" rel="external noopener" target="_blank">Stockfish&lt;/a> (the popular Chess engine) as a &amp;lsquo;Bot&amp;rsquo; for a small React-based Chess implementation.
I decided over the past week to revisit it and rewrite the implementation in TypeScript, along with providing more Bot types to choose from.&lt;/p></description></item><item><title>Binary Addition using Half and Full Adders within TypeScript</title><link>https://eddmann.com/posts/binary-addition-using-half-and-full-adders-within-typescript/</link><pubDate>Fri, 06 Nov 2020 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/binary-addition-using-half-and-full-adders-within-typescript/</guid><description>&lt;p>Recently, I watched an interesting talk about &lt;a href="https://www.youtube.com/watch?v=7lyb22x9tcM" rel="external noopener" target="_blank">Binary Addition in the TypeScript Type System&lt;/a>.
I thought it would be fascinating to explore this concept in more depth.
I wanted to pay close attention to how I could leverage the TypeScript type system to help ensure validity in the final implementation.&lt;/p></description></item><item><title>The Mystery Calculator in ClojureScript and Reagent</title><link>https://eddmann.com/posts/the-mystery-calculator-in-clojurescript-and-reagent/</link><pubDate>Sat, 31 Oct 2020 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/the-mystery-calculator-in-clojurescript-and-reagent/</guid><description>&lt;p>The Mystery Calculator is a commonly found Christmas cracker gift that uses a neat powers-of-two (binary) addition trick to fool the spectator.
I thought it would be interesting to create a small web application in &lt;a href="https://clojurescript.org/" rel="external noopener" target="_blank">ClojureScript&lt;/a> and &lt;a href="http://reagent-project.github.io/" rel="external noopener" target="_blank">Reagent&lt;/a> that provides the ability to generate a selection of these cards and perform the trick.&lt;/p></description></item><item><title>Building a Nokia Composer (RTTTL) Player and WAV-file Generator in the Browser</title><link>https://eddmann.com/posts/building-a-nokia-composer-rtttl-player-and-wav-file-generator-in-the-browser/</link><pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/building-a-nokia-composer-rtttl-player-and-wav-file-generator-in-the-browser/</guid><description>&lt;p>Who remembers punching in key-combinations found online into their Nokia 3210 to create &lt;em>custom ringtones&lt;/em>?
I spent more time than I would care to admit doing this in my youth.
Over the weekend I decided, as a bit of a nostalgic exercise, to see if I could implement a &lt;a href="https://nokia.fandom.com/wiki/Composer" rel="external noopener" target="_blank">Nokia Composer&lt;/a> clone using JavaScript and the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API" rel="external noopener" target="_blank">Web Audio API&lt;/a>.
From here, I expanded on the player to provide the ability to download the generated ringtone as a WAV file.&lt;/p></description></item><item><title>Allocating and Notifying Secret Santas via Email using Clojure</title><link>https://eddmann.com/posts/allocating-and-notifying-secret-santas-via-email-using-clojure/</link><pubDate>Fri, 23 Oct 2020 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/allocating-and-notifying-secret-santas-via-email-using-clojure/</guid><description>&lt;p>My close family have been doing Secret Santa over the past couple of years, and although there are plenty of free services out there to solve the problem of allocating and notifying participants, I thought it would be a great opportunity to explore building a solution using Clojure and Lein.&lt;/p></description></item><item><title>Creating a Contact Tracing Scanner using Swift for macOS</title><link>https://eddmann.com/posts/creating-a-contact-tracing-scanner-using-swift-for-macos/</link><pubDate>Tue, 20 Oct 2020 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/creating-a-contact-tracing-scanner-using-swift-for-macos/</guid><description>&lt;p>Following on from my &lt;a href="https://eddmann.com/posts/creating-a-contact-tracing-scanner-using-web-bluetooth/">previous experiment&lt;/a> which highlighted what an Exposure Notification-enabled device actually emits using Web Bluetooth, I decided to explore how I could do the same using Swift and Interface Builder for macOS.&lt;/p></description></item><item><title>Creating a Contact Tracing Scanner using Web Bluetooth</title><link>https://eddmann.com/posts/creating-a-contact-tracing-scanner-using-web-bluetooth/</link><pubDate>Mon, 19 Oct 2020 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/creating-a-contact-tracing-scanner-using-web-bluetooth/</guid><description>&lt;p>I have recently been looking at the &lt;a href="https://covid19.apple.com/contacttracing" rel="external noopener" target="_blank">Contact Tracing specifications&lt;/a> that Apple and Google released earlier this year in aid of the fight against COVID-19.
Looking through these documents allowed me to grasp how the system was put together.
It also helped ease concerns that family members had regarding how privacy-conscious the Exposure Notification system is.&lt;/p></description></item><item><title>Building a Flag Guessing Game using React Hooks</title><link>https://eddmann.com/posts/building-a-flag-guessing-game-using-react-hooks/</link><pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/building-a-flag-guessing-game-using-react-hooks/</guid><description>&lt;p>Since &lt;a href="https://reactjs.org/docs/hooks-intro.html" rel="external noopener" target="_blank">React Hooks&lt;/a> were announced last autumn, I&amp;rsquo;ve been looking at ways to experiment with them in a couple of small side-projects.
In this post we will create a simple flag guessing game (called &lt;a href="https://eddmann.com/fun-with-flags/">Fun with Flags&lt;/a>) leveraging &lt;a href="https://facebook.github.io/create-react-app/" rel="external noopener" target="_blank">Create React App&lt;/a>, &lt;a href="https://www.styled-components.com/" rel="external noopener" target="_blank">Styled Components&lt;/a> and React Hooks.
Along the way we will highlight use-cases for several different hooks such as State, Effect and Memoization.
Finally, we will automate the process of publishing the compiled game to &lt;a href="https://pages.github.com/" rel="external noopener" target="_blank">GitHub Pages&lt;/a>.&lt;/p></description></item><item><title>Adding Running Shoes (aka Speeding up walking) in Pokémon Red (pokered)</title><link>https://eddmann.com/posts/adding-running-shoes-aka-speeding-up-walking-in-pokered/</link><pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/adding-running-shoes-aka-speeding-up-walking-in-pokered/</guid><description>&lt;p>One item I feel is missing from the Pokémon Generation 1 games is the &lt;a href="https://bulbapedia.bulbagarden.net/wiki/Running_Shoes" rel="external noopener" target="_blank">Running Shoes&lt;/a>.
When activated, they increase the speed at which you move around the game.
You can achieve this with the &lt;a href="https://bulbapedia.bulbagarden.net/wiki/Bicycle" rel="external noopener" target="_blank">Bicycle&lt;/a>, but it is only available later in the game.
In this post, I will document how I simply added this running ability globally whilst the &amp;lsquo;B button&amp;rsquo; is pressed.&lt;/p></description></item><item><title>Changing the Starter Pokémon within Pokémon Red (pokered)</title><link>https://eddmann.com/posts/changing-the-starter-pokemon-within-pokered/</link><pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/changing-the-starter-pokemon-within-pokered/</guid><description>&lt;p>Taking a closer look through the &lt;a href="https://github.com/pret/pokered" rel="external noopener" target="_blank">pokered&lt;/a> source, I stumbled upon the &lt;a href="https://bulbapedia.bulbagarden.net/wiki/Starter_Pok%C3%A9mon" rel="external noopener" target="_blank">Starter Pokémon&lt;/a> choices and thought how it would be possible to change these.
In this post I will document how I went about customising the Starter Pokémon choices available in Pokémon Red, and the modifications required to the &amp;lsquo;pokered&amp;rsquo; source.&lt;/p></description></item><item><title>Creating a Time-lapse Camera with HypriotOS/Docker using a Raspberry Pi 3B+ and Raspberry Pi Zero W</title><link>https://eddmann.com/posts/creating-a-time-lapse-camera-with-hypriotos-docker-using-a-raspberry-pi-3b-plus-and-raspberry-pi-zero-w/</link><pubDate>Sat, 16 Feb 2019 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/creating-a-time-lapse-camera-with-hypriotos-docker-using-a-raspberry-pi-3b-plus-and-raspberry-pi-zero-w/</guid><description>&lt;p>I have recently started a project that requires the ability to create a time-lapse video over a set duration.
Looking at all the possible ways of achieving this, I felt that a Raspberry Pi would be well suited for the job.
In this post, I will discuss how I went about setting up both a &lt;a href="https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/" rel="external noopener" target="_blank">Raspberry Pi 3 Model B+&lt;/a> and a &lt;a href="https://www.raspberrypi.org/products/raspberry-pi-zero-w/" rel="external noopener" target="_blank">Raspberry Pi Zero W&lt;/a> with &lt;a href="https://blog.hypriot.com/" rel="external noopener" target="_blank">HypriotOS&lt;/a> to run a Docker-based time-lapse camera Node application.&lt;/p></description></item><item><title>Allocating Secret Santas with a Substitution Cipher using Clojure</title><link>https://eddmann.com/posts/allocating-secret-santas-with-a-substitution-cipher-using-clojure/</link><pubDate>Sat, 09 Feb 2019 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/allocating-secret-santas-with-a-substitution-cipher-using-clojure/</guid><description>&lt;p>Over Christmas I found myself delving back into a bit of Clojure.
One such problem I stumbled upon solving was allocating &lt;a href="https://en.wikipedia.org/wiki/Secret_Santa" rel="external noopener" target="_blank">Secret Santas&lt;/a>.
In this post I will discuss how I went about grouping a given list of names based on certain criteria, and then correctly pairing up each person.
From here, I will highlight how I expanded upon the solution to allow these allocations to be distributed and hidden from prying eyes using a simple &lt;a href="https://en.wikipedia.org/wiki/ROT13" rel="external noopener" target="_blank">ROT13&lt;/a> substitution cipher.&lt;/p></description></item><item><title>Compiling Pokémon Red (pokered) using Docker and adding 'Super B' button behaviour</title><link>https://eddmann.com/posts/compiling-pokered-using-docker-and-adding-super-b-button-behaviour/</link><pubDate>Tue, 29 Jan 2019 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/compiling-pokered-using-docker-and-adding-super-b-button-behaviour/</guid><description>&lt;p>Over the Christmas break I found myself on a bit of a nostalgic gaming journey.
Along with building a &lt;a href="https://retropie.org.uk/" rel="external noopener" target="_blank">RetroPie&lt;/a>, I dusted off my old Game Boy and decided to &amp;lsquo;catch them all&amp;rsquo; one more time on Pokémon Red.
Whilst playing, the developer in me started to contrive how a game like this was created, and better still could be changed.
Enter &lt;a href="https://github.com/pret/pokered" rel="external noopener" target="_blank">pokered&lt;/a>, a disassembly of Pokémon Red/Blue which has been organised so that an assembly code novice like myself can understand it.
In this post, I will go through compiling the ASM, tweaking the game to add &lt;a href="https://github.com/eddmann/pokered/commit/e2d6662bc13348234d58a262e9d6faef0a2507de" rel="external noopener" target="_blank">&amp;lsquo;Super B&amp;rsquo; button behaviour&lt;/a>, and then running the compiled ROM on an actual handheld!&lt;/p></description></item><item><title>Unlocking Tsunekazu Ishihara's team in Pokémon Red (pokered)</title><link>https://eddmann.com/posts/unlocking-tsunekazu-ishiharas-team-in-pokered/</link><pubDate>Tue, 29 Jan 2019 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/unlocking-tsunekazu-ishiharas-team-in-pokered/</guid><description>&lt;p>Continuing on from the modifications made to &lt;a href="https://github.com/pret/pokered" rel="external noopener" target="_blank">pokered&lt;/a> in the &lt;a href="https://eddmann.com/posts/compiling-pokered-using-docker-and-adding-super-b-button-behaviour/">previous post&lt;/a>, I noticed an interesting unused behaviour in the assembly code.
It appeared to be an unused &lt;a href="https://github.com/eddmann/pokered/blob/master/engine/debug1.asm" rel="external noopener" target="_blank">debug function&lt;/a> which gives the player &lt;a href="https://bulbapedia.bulbagarden.net/wiki/Tsunekazu_Ishihara" rel="external noopener" target="_blank">Tsunekazu Ishihara&amp;rsquo;s&lt;/a> favourite Pokémon.
In this post I will document making this function accessible by &lt;a href="https://github.com/eddmann/pokered/commit/3450a335207c79018c4c157139ad5a6ac2755081" rel="external noopener" target="_blank">talking to Mom&lt;/a> in Pallet Town.&lt;/p></description></item><item><title>Mince Pie Challenge: Viewing and Removing Mince Pies with Amazon DynamoDB</title><link>https://eddmann.com/posts/mince-pie-challenge-viewing-and-removing-mince-pies-with-amazon-dynamodb/</link><pubDate>Tue, 16 Oct 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mince-pie-challenge-viewing-and-removing-mince-pies-with-amazon-dynamodb/</guid><description>&lt;p>In this post we will progress in implementing the proposed endpoint behaviour documented in our &lt;a href="https://eddmann.com/posts/mince-pie-challenge-designing-the-restful-api-with-raml/#viewing-the-pies">RAML design&lt;/a>.
Using the online/offline DynamoDB abstractions that we constructed in the &lt;a href="https://eddmann.com/posts/mince-pie-challenge-adding-and-listing-mince-pies-with-amazon-dynamodb/">previous post&lt;/a>, we will incorporate the ability to view and remove specified mince pies from the challenge.&lt;/p></description></item><item><title>Creating a Command Line Application to Fetch URL Titles in Go</title><link>https://eddmann.com/posts/creating-a-command-line-application-to-fetch-url-titles-in-go/</link><pubDate>Thu, 23 Aug 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/creating-a-command-line-application-to-fetch-url-titles-in-go/</guid><description>&lt;p>When writing show-notes for &lt;a href="https://threedevsandamaybe.com/" rel="external noopener" target="_blank">Three Devs and a Maybe&lt;/a> it is tedious work to extract the associated show-link titles and generate a Markdown list from them.
This is something that I have &lt;a href="https://eddmann.com/posts/fetching-link-titles-using-promises-and-async-await-in-javascript/">documented in the past&lt;/a>, providing an automated solution to this problem.
However, in this post I would like to discuss implementing such a command-line tool using &lt;a href="https://golang.org/" rel="external noopener" target="_blank">Golang&lt;/a>, creating self-reliant executables that can be cross-compiled for Mac, Windows and Linux.&lt;/p></description></item><item><title>Mince Pie Challenge: Adding and Listing Mince Pies with Amazon DynamoDB</title><link>https://eddmann.com/posts/mince-pie-challenge-adding-and-listing-mince-pies-with-amazon-dynamodb/</link><pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mince-pie-challenge-adding-and-listing-mince-pies-with-amazon-dynamodb/</guid><description>&lt;p>In the &lt;a href="https://eddmann.com/posts/mince-pie-challenge-adding-the-bootstrap-endpoint-and-serverless-offline/">previous post&lt;/a> we began to implement the API endpoints, starting off with creating the bootstrap response.
We did this in a manner that catered for both online and offline development access.
In this post we will incorporate the ability to add and list mince pies, persisting the state within &lt;a href="https://aws.amazon.com/dynamodb/" rel="external noopener" target="_blank">Amazon DynamoDB&lt;/a>.
Following this, we will enrich our offline development process by setting up an &lt;a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBLocal.html" rel="external noopener" target="_blank">Amazon DynamoDB Local&lt;/a> instance using Docker.&lt;/p></description></item><item><title>How to Expand a Linux AWS EBS Root/Partition Volume without Rebooting</title><link>https://eddmann.com/posts/how-to-expand-a-linux-aws-ebs-root-partition-volume-without-rebooting/</link><pubDate>Fri, 10 Aug 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/how-to-expand-a-linux-aws-ebs-root-partition-volume-without-rebooting/</guid><description>&lt;p>Over the past couple of months I have found myself having to look up how to expand a Linux-based AWS EBS volume.
This post showcases a simple step-by-step guide to performing this action.&lt;/p></description></item><item><title>Setting up Caddy Server within AWS using Packer and Terraform</title><link>https://eddmann.com/posts/setting-up-caddy-server-within-aws-using-packer-and-terraform/</link><pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/setting-up-caddy-server-within-aws-using-packer-and-terraform/</guid><description>&lt;p>With the &lt;a href="https://security.googleblog.com/2018/02/a-secure-web-is-here-to-stay.html" rel="external noopener" target="_blank">recent update&lt;/a> to Google Chrome helping shape a more secure Web by marking all HTTP sites as &amp;ldquo;not secure&amp;rdquo;.
I thought it was time that I make the necessary changes to how we host audio files for the &lt;a href="https://threedevsandamaybe.com/" rel="external noopener" target="_blank">Three Devs and a Maybe&lt;/a> podcast.
In this post I would like to discuss setting up &lt;a href="https://caddyserver.com/" rel="external noopener" target="_blank">Caddy Server&lt;/a> (which provides HTTPS out of the box!) as a static-hosting platform on AWS.
I will detail how to provision the instance with Packer and the surrounding infrastructure using Terraform.&lt;/p></description></item><item><title>Mince Pie Challenge: Adding the Bootstrap Endpoint and Serverless Offline</title><link>https://eddmann.com/posts/mince-pie-challenge-adding-the-bootstrap-endpoint-and-serverless-offline/</link><pubDate>Fri, 27 Jul 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mince-pie-challenge-adding-the-bootstrap-endpoint-and-serverless-offline/</guid><description>&lt;p>Up until now, we have spent our time setting up the API project to provide a confident testing pipeline (with types) and Amazon Cognito authentication.
We will now move on to implementing the first &lt;strong>real&lt;/strong> API endpoint, that being the Bootstrap response.
Along the way, we will configure &lt;a href="https://github.com/dherault/serverless-offline" rel="external noopener" target="_blank">Serverless Offline&lt;/a>, allowing us to locally interact with the API without having to provision any online resources.&lt;/p></description></item><item><title>Building a Babel Plugin: Adding a Function Composition Operator and Auto-Curried Functions to JavaScript</title><link>https://eddmann.com/posts/building-a-babel-plugin-adding-a-function-composition-operator-and-auto-curried-functions-to-javascript/</link><pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/building-a-babel-plugin-adding-a-function-composition-operator-and-auto-curried-functions-to-javascript/</guid><description>&lt;p>In a recent Software Engineering Daily &lt;a href="https://softwareengineeringdaily.com/2018/06/21/babel-with-henry-zhu/" rel="external noopener" target="_blank">podcast&lt;/a> Henry Zhu discussed the &lt;a href="https://babeljs.io/" rel="external noopener" target="_blank">Babel&lt;/a> project, and shed some light on how the transpiler works under the hood.
He touched upon how &lt;a href="https://babeljs.io/docs/en/plugins.html" rel="external noopener" target="_blank">Plugins&lt;/a> can be created to alter the resulting compiled code.
I was very interested in experimenting with this capability.
In this post I wish to highlight the process by which Babel transforms your code, developing several interesting plugins along the way.&lt;/p></description></item><item><title>Mince Pie Challenge: Adding Test Coverage using Jest and Travis CI</title><link>https://eddmann.com/posts/mince-pie-challenge-adding-test-coverage-using-jest-and-travis-ci/</link><pubDate>Wed, 18 Jul 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mince-pie-challenge-adding-test-coverage-using-jest-and-travis-ci/</guid><description>&lt;p>Following on from &lt;a href="https://eddmann.com/posts/mince-pie-challenge-setting-up-flow-with-babel-and-webpack/">adding Flow&lt;/a> to the API project, I now wish to garner further confidence in the code by adding tests.
In this post I will document the process of setting up the test-runner &lt;a href="https://jestjs.io/" rel="external noopener" target="_blank">Jest&lt;/a>, and adding suitable test coverage to the current authentication example.&lt;/p></description></item><item><title>Mince Pie Challenge: Setting up Flow with Babel and Webpack</title><link>https://eddmann.com/posts/mince-pie-challenge-setting-up-flow-with-babel-and-webpack/</link><pubDate>Mon, 09 Jul 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mince-pie-challenge-setting-up-flow-with-babel-and-webpack/</guid><description>&lt;p>We have now settled on how our application will perform &lt;a href="https://eddmann.com/posts/mince-pie-challenge-authentication-with-amazon-cognito-and-json-web-tokens/">user authentication&lt;/a>.
I now wish to take a step back and help improve our code confidence by adding the static type checker &lt;a href="https://flow.org/" rel="external noopener" target="_blank">Flow&lt;/a>.
In this article, I will document the process of configuring Flow with Babel and Webpack, expanding upon our previous example by adding sufficient typing.&lt;/p></description></item><item><title>Mince Pie Challenge: Authentication with Amazon Cognito and JSON Web Tokens</title><link>https://eddmann.com/posts/mince-pie-challenge-authentication-with-amazon-cognito-and-json-web-tokens/</link><pubDate>Tue, 26 Jun 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mince-pie-challenge-authentication-with-amazon-cognito-and-json-web-tokens/</guid><description>&lt;p>Now that we have set up the Serverless Framework, we can go about investigating how Authentication and Authorisation will be handled within the application.
For this, we will be using &lt;a href="https://aws.amazon.com/cognito/" rel="external noopener" target="_blank">Amazon Cognito&lt;/a>, a fully managed web service which handles the user sign-up, sign-in and management processes.&lt;/p></description></item><item><title>Mince Pie Challenge: Setting up the Serverless Framework with Docker, Webpack and Babel</title><link>https://eddmann.com/posts/mince-pie-challenge-setting-up-the-serverless-framework-with-docker-webpack-and-babel/</link><pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mince-pie-challenge-setting-up-the-serverless-framework-with-docker-webpack-and-babel/</guid><description>&lt;p>Now that we have spent some time working out how the API is going to look, we can move on to building it!
We will start off by configuring the initial API project, setting up a Dockerised &lt;a href="https://serverless.com/" rel="external noopener" target="_blank">Serverless Framework&lt;/a> with &lt;a href="https://webpack.js.org/" rel="external noopener" target="_blank">Webpack&lt;/a> and &lt;a href="https://babeljs.io/" rel="external noopener" target="_blank">Babel&lt;/a> support.&lt;/p></description></item><item><title>Mince Pie Challenge: Designing the RESTful API with RAML</title><link>https://eddmann.com/posts/mince-pie-challenge-designing-the-restful-api-with-raml/</link><pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mince-pie-challenge-designing-the-restful-api-with-raml/</guid><description>&lt;p>Now that we are aware of what needs to be done, we can go about designing the RESTful API that will be used to process and persist those vital mince pies.&lt;/p></description></item><item><title>Mince Pie Challenge: Building a Serverless RESTful API and React Client</title><link>https://eddmann.com/posts/mince-pie-challenge-building-a-serverless-restful-api-and-react-client/</link><pubDate>Thu, 07 Jun 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mince-pie-challenge-building-a-serverless-restful-api-and-react-client/</guid><description>&lt;p>Since moving our infrastructure over to the AWS stack, I have been keen to explore how we can take advantage of the numerous services at our disposal, alongside the serverless methodology.
In this blog &lt;a href="https://eddmann.com/archive/tag/mince-pie-challenge-series">series&lt;/a>, I wish to document my experience of building a complete serverless application which harnesses as many of the AWS offerings as possible.
We will explore building both a RESTful API and a React client, all hosted without any servers to maintain!&lt;/p></description></item><item><title>Determining if an IPv4 address is within a CIDR range in JavaScript</title><link>https://eddmann.com/posts/determining-if-an-ipv4-address-is-within-a-cidr-range-in-javascript/</link><pubDate>Tue, 05 Jun 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/determining-if-an-ipv4-address-is-within-a-cidr-range-in-javascript/</guid><description>&lt;p>Recently I was required to process a group of &lt;a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing" rel="external noopener" target="_blank">CIDR&lt;/a> ranges in JavaScript to determine if a given IPv4 address fell within one of them.
In this post I would like to discuss how I went about completing this.&lt;/p></description></item><item><title>Insight into Site Reliability Engineering with Niall Murphy</title><link>https://eddmann.com/posts/insight-into-site-reliability-engineering-with-niall-murphy/</link><pubDate>Wed, 23 May 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/insight-into-site-reliability-engineering-with-niall-murphy/</guid><description>&lt;p>In a recent &lt;a href="https://threedevsandamaybe.com/site-reliability-engineering-with-niall-murphy/" rel="external noopener" target="_blank">podcast&lt;/a>, I was lucky to have a discussion with &lt;a href="https://twitter.com/niallm" rel="external noopener" target="_blank">Niall Murphy&lt;/a> about the role of Site Reliability Engineering.
Having contributed to the seminal &lt;a href="https://landing.google.com/sre/book.html" rel="external noopener" target="_blank">SRE book&lt;/a>, and having experience in this field for many years, it was an honour to get the opportunity to chat with him.&lt;/p></description></item><item><title>Setting up GitHub Pages HTTPS Custom Domains using CloudFront and Lambda@Edge</title><link>https://eddmann.com/posts/setting-up-github-pages-https-custom-domains-using-cloudfront-and-lambda-edge/</link><pubDate>Wed, 24 Jan 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/setting-up-github-pages-https-custom-domains-using-cloudfront-and-lambda-edge/</guid><description>&lt;p>We recently wished to switch over our sites hosted on &lt;a href="https://pages.github.com/" rel="external noopener" target="_blank">GitHub Pages&lt;/a> to be solely HTTPS.
However, although you are able to supply a &lt;a href="https://help.github.com/articles/using-a-custom-domain-with-github-pages/" rel="external noopener" target="_blank">custom domain&lt;/a> or support &lt;a href="https://github.com/blog/2186-https-for-github-pages" rel="external noopener" target="_blank">HTTPS traffic&lt;/a>, you are not able to do both.
In this article, I would like to guide you through the process of how we went about achieving this using &lt;a href="https://aws.amazon.com/cloudfront/" rel="external noopener" target="_blank">CloudFront&lt;/a>, &lt;a href="https://aws.amazon.com/route53/" rel="external noopener" target="_blank">Route 53&lt;/a> and &lt;a href="https://aws.amazon.com/lambda/edge/" rel="external noopener" target="_blank">Lambda@Edge&lt;/a>.&lt;/p></description></item><item><title>Unlocking the AWS WAF Logs</title><link>https://eddmann.com/posts/unlocking-the-aws-waf-logs/</link><pubDate>Fri, 12 Jan 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/unlocking-the-aws-waf-logs/</guid><description>&lt;p>In this post we discuss our recent move to route all requests through &lt;a href="https://aws.amazon.com/cloudfront/" rel="external noopener" target="_blank">CloudFront&lt;/a>.
This allows us to parse all traffic through the &lt;a href="https://aws.amazon.com/waf/" rel="external noopener" target="_blank">AWS Web Application Firewall&lt;/a> (WAF).
We highlight the reasoning behind this change, and some issues and remedies encountered when trying to garner concrete logs from the WAF instance.&lt;/p></description></item><item><title>Creating a 'Winning' Audio Lambda Service using Serverless, Polly and compiled SOX</title><link>https://eddmann.com/posts/creating-a-winning-audio-lambda-service-using-serverless-polly-and-compiled-sox/</link><pubDate>Mon, 11 Dec 2017 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/creating-a-winning-audio-lambda-service-using-serverless-polly-and-compiled-sox/</guid><description>&lt;p>Following on from my previous post which discussed &lt;a href="https://eddmann.com/posts/memes-as-a-service-using-lambda-serverless-and-imagemagick/">manipulating images&lt;/a>, I would now like to expand upon this and look into how you can interact with audio using Lambda.
To highlight this use-case we will be creating a simple service which, given a name and an optional voice (provided by &lt;a href="https://aws.amazon.com/polly/" rel="external noopener" target="_blank">Polly&lt;/a>), will synthesise the name and include it in a returned &amp;ldquo;And the winner is&amp;hellip;&amp;rdquo; applause MP3 file.
This will demonstrate how to integrate Polly within Lambda, compile and execute native code within Lambda and return a binary MP3 file to the client.&lt;/p></description></item><item><title>'Memes as a Service' using Lambda, Serverless and ImageMagick</title><link>https://eddmann.com/posts/memes-as-a-service-using-lambda-serverless-and-imagemagick/</link><pubDate>Mon, 04 Dec 2017 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/memes-as-a-service-using-lambda-serverless-and-imagemagick/</guid><description>&lt;p>I&amp;rsquo;ve recently become really interested in the concept of Functions as a Service (FaaS) and the &lt;a href="https://serverless.com/" rel="external noopener" target="_blank">Serverless Framework&lt;/a>.
I decided to create a small experimental AWS Lambda function to explore how it could be used to manipulate images.
For this contrived example, I came up with the (silly) idea of &amp;lsquo;Memes as a Service&amp;rsquo; (everything needs to be a service nowadays).&lt;/p></description></item><item><title>Scheduling EC2 Instances using Lambda and CloudWatch Events</title><link>https://eddmann.com/posts/scheduling-ec2-instances-using-lambda-and-cloudwatch-events/</link><pubDate>Fri, 24 Nov 2017 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/scheduling-ec2-instances-using-lambda-and-cloudwatch-events/</guid><description>&lt;p>Over the past couple of months, MyBuilder has been transitioning from primarily a dedicated server stack (with orchestration through &lt;a href="https://puppet.com/" rel="external noopener" target="_blank">Puppet&lt;/a>) to cloud infrastructure by way of &lt;a href="https://aws.amazon.com/" rel="external noopener" target="_blank">Amazon Web Services&lt;/a>.
We have been a proponent of AWS for quite some time, taking advantage of services such as S3 and CloudFront in our current setup.
We are also not unfamiliar with EC2, spreading some of our application requirements onto several instances over the past couple of years.
However, we have not been fully embracing the &amp;lsquo;Cloud nature&amp;rsquo; of the product and are still treating each server as something between a &lt;a href="https://martinfowler.com/bliki/SnowflakeServer.html" rel="external noopener" target="_blank">Snowflake&lt;/a> and a &lt;a href="https://martinfowler.com/bliki/PhoenixServer.html" rel="external noopener" target="_blank">Phoenix&lt;/a>.&lt;/p></description></item><item><title>Using Homebrew to Manage Project Development Scripts</title><link>https://eddmann.com/posts/using-homebrew-to-manage-project-development-scripts/</link><pubDate>Wed, 10 May 2017 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/using-homebrew-to-manage-project-development-scripts/</guid><description>&lt;p>When a project becomes sufficiently large in size, you will undoubtedly encounter the need to simplify certain tasks, such as managing external dependencies or configuring environment parameters.
Within the MyBuilder codebase, we have required these kinds of processes for some time.&lt;/p></description></item><item><title>Handling Retries and Back-off Attempts with JavaScript Promises</title><link>https://eddmann.com/posts/handling-retries-and-back-off-attempts-with-javascript-promises/</link><pubDate>Fri, 21 Apr 2017 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/handling-retries-and-back-off-attempts-with-javascript-promises/</guid><description>&lt;p>Promises are an invaluable abstraction around &amp;rsquo;eventual&amp;rsquo; results within asynchronous operations.
I recently needed to retry a Promise-based action in the event of a failure.
It turned out to be very easy to implement such a process using simple recursive constructs.&lt;/p></description></item><item><title>Managing Newlines and Unicode within JavaScript and PHP</title><link>https://eddmann.com/posts/managing-newlines-and-unicode-within-javascript-and-php/</link><pubDate>Thu, 22 Dec 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/managing-newlines-and-unicode-within-javascript-and-php/</guid><description>&lt;p>We were recently sent a tweet regarding a text-area client/server-side length validation not correlating.
After some detective work, we were able to find two issues that could have caused this to occur.
In this post, I wish to discuss our findings and how we resolved each issue.&lt;/p></description></item><item><title>Designing Immutable Concepts with Transient Mutation in PHP</title><link>https://eddmann.com/posts/designing-immutable-concepts-with-transient-mutation-in-php/</link><pubDate>Wed, 14 Dec 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/designing-immutable-concepts-with-transient-mutation-in-php/</guid><description>&lt;p>In a recent project, we found it beneficial to introduce the Money pattern.
There are many good &lt;a href="http://martinfowler.com/eaaCatalog/money.html" rel="external noopener" target="_blank">resources&lt;/a> on this pattern, so I will defer to those for further definition.
We decided that encapsulating this into an &lt;a href="http://hangar.runway7.net/punditry/immutability-value-objects" rel="external noopener" target="_blank">immutable value object&lt;/a> allowed for a cleaner API and removed the fear of unexpected mutation bugs.
However, we noticed a spike in memory and processor usage when performing many successive actions on such values, such as summation.&lt;/p></description></item><item><title>Managing Background Processes within Symfony</title><link>https://eddmann.com/posts/managing-background-processes-within-symfony/</link><pubDate>Thu, 01 Dec 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/managing-background-processes-within-symfony/</guid><description>&lt;p>When a web application reaches a sufficiently large size, it can become infeasible to perform all actions required within a single web request/response lifecycle.
You may find yourself wishing to, for example, batch up and send queued emails at particular intervals or process payments asynchronously to the point in time when the user made the initial request.
In this post, I would like to discuss our evolving use of background processes (both time-dependent and continuous) due to increasing throughput demands.&lt;/p></description></item><item><title>Using Constraint-based Ordering in PHP</title><link>https://eddmann.com/posts/using-constraint-based-ordering-in-php/</link><pubDate>Thu, 24 Nov 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/using-constraint-based-ordering-in-php/</guid><description>&lt;p>An interesting problem arose last week when we wished to generate a listing of recently completed jobs (along with their shortlist fees).
Upon reviewing some earlier attempts, we did not like the aesthetics present when many of a particular shortlist fee were clustered together (i.e. two or more adjacent jobs with the same shortlist fee).
What we were instead looking for was to create a constraint-based ordering that, when applied to the recently completed jobs, would give an even distribution of shortlist fees (data-set permitting).&lt;/p></description></item><item><title>Throttling and Debouncing Function Invocation in JavaScript</title><link>https://eddmann.com/posts/throttling-and-debouncing-function-invocation-in-javascript/</link><pubDate>Tue, 22 Nov 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/throttling-and-debouncing-function-invocation-in-javascript/</guid><description>&lt;p>Whilst working on resolving a recent JavaScript event handler bug, it became necessary to implement a form of throttling to ensure a race condition would not occur.
Throughout the fix, I found myself seeking a clear definition of what both &lt;code>throttling&lt;/code> and &lt;code>debouncing&lt;/code> a function actually entailed, as it can be very easy to mix up these subtly different concepts.&lt;/p></description></item><item><title>AVL Trees in Clojure</title><link>https://eddmann.com/posts/avl-trees-in-clojure/</link><pubDate>Sat, 03 Sep 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/avl-trees-in-clojure/</guid><description>&lt;p>An AVL tree is a self-balancing binary search tree, whereby the height of a node&amp;rsquo;s children differs by at most one.
In the event that this property is violated, a rebalancing process takes place.&lt;/p></description></item><item><title>Anagram Solver in Clojure</title><link>https://eddmann.com/posts/anagram-solver-in-clojure/</link><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/anagram-solver-in-clojure/</guid><description>&lt;p>This past week, a discussion around solving anagrams was brought up.
I thought it would be interesting to devise a couple of methods for computationally achieving such a task.
Providing an anagram string and a dictionary file, I wished to return all possible matching words from the dictionary.&lt;/p></description></item><item><title>An 'array_column' re-indexing trick in PHP</title><link>https://eddmann.com/posts/an-array-column-re-indexing-trick-in-php/</link><pubDate>Wed, 08 Jun 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/an-array-column-re-indexing-trick-in-php/</guid><description>&lt;p>The &lt;code>array_column&lt;/code> function has been a welcome addition to the PHP language, allowing us to remove the need for common-place &lt;code>array_map&lt;/code> invocations that simply pluck specific values from arrays.
However, I recently discovered that you can provide a third argument that allows you to define what the returning array&amp;rsquo;s keys will be.
This, combined with &lt;code>null&lt;/code> for the value argument, allows you to easily re-index an array based on a key value whilst maintaining the original array&amp;rsquo;s values and ordering.&lt;/p></description></item><item><title>Maybe in JavaScript</title><link>https://eddmann.com/posts/maybe-in-javascript/</link><pubDate>Wed, 08 Jun 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/maybe-in-javascript/</guid><description>&lt;p>Recently, I have been delving into the concepts of &lt;a href="http://learnyouahaskell.com/functors-applicative-functors-and-monoids" rel="external noopener" target="_blank">Functors&lt;/a> and &lt;a href="http://learnyouahaskell.com/a-fistful-of-monads" rel="external noopener" target="_blank">Monads&lt;/a>.
There are many good &lt;a href="https://curiosity-driven.org/monads-in-javascript" rel="external noopener" target="_blank">resources&lt;/a> available online that will do a far better job of explaining these concepts than I could.
However, I do wish to document an example of a Maybe type I have implemented in JavaScript.
Again, there are many excellent external &lt;a href="http://sean.voisen.org/blog/2013/10/intro-monads-maybe/" rel="external noopener" target="_blank">resources&lt;/a> that highlight the characteristics and power of using such a type, so I will direct your attention to those if you wish to learn more.&lt;/p></description></item><item><title>Generating Podcast Stats in PHP</title><link>https://eddmann.com/posts/generating-podcast-stats-in-php/</link><pubDate>Tue, 07 Jun 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/generating-podcast-stats-in-php/</guid><description>&lt;p>In the &lt;a href="https://threedevsandamaybe.com/the-one-hundredth-episode/" rel="external noopener" target="_blank">100th episode&lt;/a> of &lt;em>Three Devs and a Maybe&lt;/em>, I decided to generate some stats relating to the previous 99 episodes and formed a small quiz out of these findings.
All information relating to each podcast is stored in separate Markdown files within YAML front-matter, which makes it easy to extract and process.
I thought it would be interesting to go over the code I used to achieve this.&lt;/p></description></item><item><title>Understanding De Morgan's Laws to Simplify Propositions</title><link>https://eddmann.com/posts/understanding-de-morgans-laws-to-simplify-propositions/</link><pubDate>Wed, 01 Jun 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/understanding-de-morgans-laws-to-simplify-propositions/</guid><description>&lt;p>Yesterday, I watched a conference talk about &lt;a href="https://www.youtube.com/watch?v=saMtzIaDCJM" rel="external noopener" target="_blank">Formal Logic&lt;/a>, where De Morgan&amp;rsquo;s Laws were discussed.
Wikipedia provides a very good &lt;a href="https://en.wikipedia.org/wiki/De_Morgan%27s_laws" rel="external noopener" target="_blank">explanation of the laws&lt;/a> in-depth.
Essentially, they are transformation rules that allow you to simplify certain propositions.
Whilst programming, predicate logic of this form appears very frequently.
It is very useful to know how you can rewrite a predicate to better describe its intent.&lt;/p></description></item><item><title>Validating 32-bit Integers using PHP</title><link>https://eddmann.com/posts/validating-32-bit-integers-using-php/</link><pubDate>Tue, 19 Apr 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/validating-32-bit-integers-using-php/</guid><description>&lt;p>Last week, I was required to validate that a supplied integer would fit correctly into a 32-bit address space.
The available size of an integer within PHP is platform-dependent and could either be 32 or 64 bits based on the architecture you are using.
This function had to cater for these differences, and as such, I decided to explore a couple of different options for producing this validation.&lt;/p></description></item><item><title>Binary/Octal/Hexadecimal to Decimal using Collection Pipelines in JavaScript</title><link>https://eddmann.com/posts/binary-octal-hexadecimal-to-decimal-using-collection-pipelines-in-javascript/</link><pubDate>Mon, 18 Apr 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/binary-octal-hexadecimal-to-decimal-using-collection-pipelines-in-javascript/</guid><description>&lt;p>In a recent &lt;a href="https://twitter.com/adamwathan/status/720432624548900864" rel="external noopener" target="_blank">tweet&lt;/a> from Adam Wathan, highlighting one of the examples in his &lt;a href="http://adamwathan.me/refactoring-to-collections/" rel="external noopener" target="_blank">upcoming book&lt;/a>, he demonstrated breaking down the process of converting from binary to decimal representation using a pipeline of transformations.
I thought it would be interesting to see how I would go about performing this process in JavaScript.&lt;/p></description></item><item><title>Operations on a Deck of Cards in PostgreSQL</title><link>https://eddmann.com/posts/operations-on-a-deck-of-cards-in-postgresql/</link><pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/operations-on-a-deck-of-cards-in-postgresql/</guid><description>&lt;p>Recently, I have been looking more into SQL and, in particular, how RDBMSs work under the hood.
I thought it would be interesting to use some of the lesser-known features that PostgreSQL has to offer, concentrating my efforts on operations performed on a deck of cards.&lt;/p></description></item><item><title>Implementing Transpose and Zip in JavaScript</title><link>https://eddmann.com/posts/implementing-transpose-and-zip-in-javascript/</link><pubDate>Fri, 08 Apr 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/implementing-transpose-and-zip-in-javascript/</guid><description>&lt;p>In a recent &lt;a href="http://www.fullstackradio.com/39" rel="external noopener" target="_blank">Full Stack Radio&lt;/a> podcast, a discussion around the application of &lt;code>transpose&lt;/code> and &lt;code>zip&lt;/code> on collections made me wonder how I would go about implementing such a feature in JavaScript.&lt;/p></description></item><item><title>Using the 'IS (NOT) DISTINCT FROM' SQL Comparators</title><link>https://eddmann.com/posts/using-the-is-not-distinct-from-sql-comparators/</link><pubDate>Thu, 17 Mar 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/using-the-is-not-distinct-from-sql-comparators/</guid><description>&lt;p>In a recent SQL statement, I stumbled upon an issue regarding the handling of &lt;code>NULL&lt;/code> values within a given predicate.
Coming from languages such as PHP, which are very liberal in their type coercion (&lt;code>NULL&lt;/code> can be treated as a falsy value), I was surprised to find how the inclusion of such a value resulted in a sort of predicate short-circuiting.&lt;/p></description></item><item><title>Map-Filter Combination in PHP</title><link>https://eddmann.com/posts/map-filter-combination-in-php/</link><pubDate>Fri, 04 Mar 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/map-filter-combination-in-php/</guid><description>&lt;p>Following on from my discussion on &lt;a href="https://eddmann.com/posts/mapping-filtering-and-reducing-in-php/">Mapping, Filtering and Reducing in PHP&lt;/a>, over the past couple of months, I have been using a little trick I would like to discuss.
Although a &lt;code>map-filter&lt;/code> combination can be achieved in a single &lt;code>reduce&lt;/code>, while reading the PHP documentation, I found out that &lt;code>array_filter&lt;/code> supplied without a predicate function will remove all &lt;code>false&lt;/code> values from the collection.
This means that you can simply map over a collection and return &lt;code>false&lt;/code> if the desired predicate does not match - leaving the filter to do the clean-up.&lt;/p></description></item><item><title>Maintaining Invariant Constraints in PostgreSQL using Trigger Functions</title><link>https://eddmann.com/posts/maintaining-invariant-constraints-in-postgresql-using-trigger-functions/</link><pubDate>Thu, 03 Mar 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/maintaining-invariant-constraints-in-postgresql-using-trigger-functions/</guid><description>&lt;p>Recently, a feature I was working on required me to alter a unique constraint that existed on a table column.
The invariant had now been weakened to allow storing of duplicate &lt;code>email&lt;/code> addresses, provided they shared an equivalent &lt;code>link_id&lt;/code> (excluding &lt;code>NULL&lt;/code>).
Sadly, the ease with which I had initially added the general unique constraint had disappeared.
However, I was able to take advantage of insertion/update triggers to regain these invariant reassurances.&lt;/p></description></item><item><title>Mapping, Filtering and Reducing in PHP</title><link>https://eddmann.com/posts/mapping-filtering-and-reducing-in-php/</link><pubDate>Wed, 02 Mar 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mapping-filtering-and-reducing-in-php/</guid><description>&lt;p>Over the past couple of years, I have transitioned from boilerplate-heavy, imperative code to using the more intuitive &lt;code>map&lt;/code>, &lt;code>filter&lt;/code>, and &lt;code>reduce&lt;/code> higher-order functions.
In this article, I hope to highlight the transformation that occurs, along with the simplification, when moving away from the imperative and onto the declarative.
We shall be performing a simple process that transforms a collection of user entries into a filtered collection of their names.
Although trivial in nature, it is a great way to highlight the power of the paradigm shift.&lt;/p></description></item><item><title>Bringing Back the Blink Tag using JavaScript</title><link>https://eddmann.com/posts/bringing-back-the-blink-tag-using-javascript/</link><pubDate>Mon, 29 Feb 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/bringing-back-the-blink-tag-using-javascript/</guid><description>&lt;p>Who doesn&amp;rsquo;t miss the &lt;code>blink&lt;/code> tag that was ever-present in years past?
I thought it would be fun to quickly code up a JavaScript implementation that replicates the functionality that has &amp;lsquo;sadly&amp;rsquo; been removed in modern browsers.&lt;/p></description></item><item><title>Handling Time-Dependent State Recording using React</title><link>https://eddmann.com/posts/handling-time-dependent-state-recording-using-react/</link><pubDate>Wed, 24 Feb 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/handling-time-dependent-state-recording-using-react/</guid><description>&lt;p>Sometimes, you look at a feature request and think that it may be a very tricky implementation to develop.
I felt this way regarding recording input fields in a recent application I have been working on.
The idea was to be able to record a user&amp;rsquo;s interaction with an HTML component (in this case, a textarea) and be able to replay these events (in real-time) at a later date.
Thinking about how I would go about creating such an implementation in trivial JavaScript, with all the browser nuances and user input differences, was not very appealing.&lt;/p></description></item><item><title>Insertion Sort in Clojure</title><link>https://eddmann.com/posts/insertion-sort-in-clojure/</link><pubDate>Mon, 22 Feb 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/insertion-sort-in-clojure/</guid><description>&lt;p>The next sorting algorithm I have decided to explore is the Insertion Sort.
This sorting technique can be completed in-place.
However, using Clojure, we will instead use &lt;code>reduce&lt;/code> to accumulate the final sorted collection.
Each element is iteratively inserted into a &amp;rsquo;new&amp;rsquo; collection, which maintains a sorted invariant, as shown in the implementation documented below.&lt;/p></description></item><item><title>Bubble Sort in Clojure... again</title><link>https://eddmann.com/posts/bubble-sort-in-clojure-again/</link><pubDate>Sun, 21 Feb 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/bubble-sort-in-clojure-again/</guid><description>&lt;p>Following on from my &lt;a href="https://eddmann.com/posts/bubble-sort-in-clojure/">previous solution&lt;/a> to implementing the Bubble Sort algorithm in Clojure, I thought it would be interesting to experiment with a different approach.
Taking advantage of lists and vectors&amp;rsquo; respective cheap head and tail insertions, we can use these two properties to good effect, as shown below.&lt;/p></description></item><item><title>Bubble Sort in Clojure</title><link>https://eddmann.com/posts/bubble-sort-in-clojure/</link><pubDate>Fri, 19 Feb 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/bubble-sort-in-clojure/</guid><description>&lt;p>Following on with my exploration into implementing common sorting algorithms in Clojure, today we have the Bubble Sort.
This sort works by iteratively passing through the supplied sequence, swapping the current element with the next if it is comparably greater.
The operation is complete when a pass through the sequence does not result in a swap occurring.&lt;/p></description></item><item><title>Handling Array Equality in PHP</title><link>https://eddmann.com/posts/handling-array-equality-in-php/</link><pubDate>Fri, 19 Feb 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/handling-array-equality-in-php/</guid><description>&lt;p>If you want to check if two arrays contain the same values, regardless of order, you will encounter some issues using the operators &lt;code>==&lt;/code> and &lt;code>===&lt;/code>.&lt;/p></description></item><item><title>Promisifying Error-First Asynchronous Callbacks in JavaScript</title><link>https://eddmann.com/posts/promisifying-error-first-asynchronous-callbacks-in-javascript/</link><pubDate>Thu, 11 Feb 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/promisifying-error-first-asynchronous-callbacks-in-javascript/</guid><description>&lt;p>I have been writing a lot about Promises in JavaScript over the past couple of weeks.
What happens, however, when you wish to use an asynchronous function that does not return a Promise, such as those found in Node.js?
It is actually quite simple to abstract away the error-first asynchronous function callback into a Promise we can handle.&lt;/p></description></item><item><title>Using Generators for Promise Coroutines in JavaScript</title><link>https://eddmann.com/posts/using-generators-for-promise-coroutines-in-javascript/</link><pubDate>Wed, 10 Feb 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/using-generators-for-promise-coroutines-in-javascript/</guid><description>&lt;p>In a &lt;a href="https://eddmann.com/posts/fetching-link-titles-using-promises-and-async-await-in-javascript/">previous article&lt;/a>, I demonstrated how a new feature from ES2016 (&lt;code>async&lt;/code>/&lt;code>await&lt;/code> functions) could be used to help coordinate promises and execution.
However, we can instead use Generators (introduced in ES2015) to provide this feature, minus the syntactic sugar these two new keywords provide.&lt;/p></description></item><item><title>Fetching Link Titles using Promises and Async/Await in JavaScript</title><link>https://eddmann.com/posts/fetching-link-titles-using-promises-and-async-await-in-javascript/</link><pubDate>Sat, 06 Feb 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/fetching-link-titles-using-promises-and-async-await-in-javascript/</guid><description>&lt;p>One tool that I use on a regular basis when compiling the notes for a &lt;a href="https://threedevsandamaybe.com/" rel="external noopener" target="_blank">Three Devs and a Maybe&lt;/a> episode is a tool for converting a clipboard full of links into a Markdown-formatted list.
I created this tool a while back in Python and thought it would be interesting to see how it may look in JavaScript when combined with Promises and Async/Await functions.&lt;/p></description></item><item><title>Arrow Functions Lexical 'this' Scoping in JavaScript</title><link>https://eddmann.com/posts/arrow-functions-lexical-this-scoping-in-javascript/</link><pubDate>Thu, 04 Feb 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/arrow-functions-lexical-this-scoping-in-javascript/</guid><description>&lt;p>One feature of ES2015 that I feel can be a stumbling block (but is extremely useful) is Arrow Functions&amp;rsquo; lexical scoping of &lt;code>this&lt;/code>.
Before this addition, every new function defined its own &lt;code>this&lt;/code>, meaning we were required to explicitly bind or locally store the &lt;code>this&lt;/code> reference that we desired in many use cases.&lt;/p></description></item><item><title>Mimicking Named Parameters in JavaScript</title><link>https://eddmann.com/posts/mimicking-named-parameters-in-javascript/</link><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mimicking-named-parameters-in-javascript/</guid><description>&lt;p>Whilst working today, I came across a test helper function that required a few too many parameters.
Debating whether to break the function up, I decided that an elegant solution would be to take advantage of ES2015 object destructuring and produce a form of &amp;lsquo;Named Parameters&amp;rsquo;.&lt;/p></description></item><item><title>Undefined Variable Checks in JavaScript</title><link>https://eddmann.com/posts/undefined-variable-checks-in-javascript/</link><pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/undefined-variable-checks-in-javascript/</guid><description>&lt;p>This morning, I stumbled upon an issue surrounding checking for the existence of a variable in JavaScript.&lt;/p></description></item><item><title>Implementing a Cancellable Promise in JavaScript</title><link>https://eddmann.com/posts/implementing-a-cancelable-promise-in-javascript/</link><pubDate>Thu, 28 Jan 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/implementing-a-cancelable-promise-in-javascript/</guid><description>&lt;p>I was recently working on a React component that complained about its state being set when it was not mounted.
This was due to an uncompleted promise being resolved after the component had already been unmounted.
To solve this issue, I used the concept of a cancellable promise, which could be cancelled before the component was unmounted.&lt;/p></description></item><item><title>Using Multiple Arrays with array_map in PHP</title><link>https://eddmann.com/posts/using-multiple-arrays-with-array-map-in-php/</link><pubDate>Thu, 28 Jan 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/using-multiple-arrays-with-array-map-in-php/</guid><description>&lt;p>Today, I stumbled upon some code that I did not realise was possible with the &lt;code>array_map&lt;/code> function in PHP.
You are able to supply multiple arrays, which in turn will get &amp;lsquo;zipped up&amp;rsquo; and passed to the supplied callback as parameters.
This allows for some rather elegant solutions to the &amp;lsquo;index issue&amp;rsquo; and accessing keys from within the callback - both of which are easily achieved in an imperative mindset.&lt;/p></description></item><item><title>Creating a IPersistentSet compatible Binary Tree in Clojure</title><link>https://eddmann.com/posts/creating-a-ipersistentset-compatible-binary-tree-in-clojure/</link><pubDate>Wed, 27 Jan 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/creating-a-ipersistentset-compatible-binary-tree-in-clojure/</guid><description>&lt;p>Following on from my post on Binary Search Trees &lt;a href="https://eddmann.com/posts/binary-search-trees-in-clojure/">last week&lt;/a>, I decided to explore how I could use types and interfaces to implement the glue required to make the Binary Tree implementation compatible with the &lt;code>clojure.lang.IPersistentSet&lt;/code> interface.&lt;/p></description></item><item><title>Implementing Promise.all and Promise.race in JavaScript</title><link>https://eddmann.com/posts/implementing-promise-all-and-promise-race-in-javascript/</link><pubDate>Fri, 22 Jan 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/implementing-promise-all-and-promise-race-in-javascript/</guid><description>&lt;p>Throughout the past couple of months, much of the JavaScript development I have been involved with has revolved around &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" rel="external noopener" target="_blank">Promises&lt;/a>.
Promises are a simple abstraction to handle deferred and asynchronous computations.
This lunchtime, I decided to see how one would go about implementing two concepts that are present in the Promise standard: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all" rel="external noopener" target="_blank">&lt;code>all&lt;/code>&lt;/a> and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race" rel="external noopener" target="_blank">&lt;code>race&lt;/code>&lt;/a>.&lt;/p></description></item><item><title>Exploring Multi-Methods in Clojure</title><link>https://eddmann.com/posts/exploring-multi-methods-in-clojure/</link><pubDate>Thu, 21 Jan 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/exploring-multi-methods-in-clojure/</guid><description>&lt;p>Currently reading through the &lt;a href="https://www.manning.com/books/the-joy-of-clojure" rel="external noopener" target="_blank">Joy of Clojure&lt;/a> book, I have recently been introduced to Clojure&amp;rsquo;s multi-method support.
I decided that it would be interesting to see this feature in action, so I opened up LightTable and codified some example use-cases.&lt;/p></description></item><item><title>Binary Search Trees in Clojure</title><link>https://eddmann.com/posts/binary-search-trees-in-clojure/</link><pubDate>Wed, 20 Jan 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/binary-search-trees-in-clojure/</guid><description>&lt;p>This weekend I was able to spend some more time exploring Clojure.
I decided that it would be interesting to reimplement some of the &lt;a href="https://eddmann.com/posts/insertion-removal-and-inversion-operations-on-binary-search-trees-in-php/">Binary Search Tree work&lt;/a> I had previously done in PHP.
We start by creating a simple record definition which describes the contents of a Node.&lt;/p></description></item><item><title>Recreating 'Let' using a Macro in Clojure</title><link>https://eddmann.com/posts/recreating-let-using-a-macro-in-clojure/</link><pubDate>Fri, 15 Jan 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/recreating-let-using-a-macro-in-clojure/</guid><description>&lt;p>Inspired by a good friend&amp;rsquo;s recent &lt;a href="https://gist.github.com/keyvanakbary/190eb819632db0d6c303" rel="external noopener" target="_blank">Gist&lt;/a> on how the functionality of the special form &lt;code>let&lt;/code> could be achieved using a little Lambda trickery, I decided to write a simple macro that would do this transformation.&lt;/p></description></item><item><title>Checking for Balanced Parentheses in Clojure</title><link>https://eddmann.com/posts/checking-for-balanced-parentheses-in-clojure/</link><pubDate>Wed, 13 Jan 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/checking-for-balanced-parentheses-in-clojure/</guid><description>&lt;p>This lunchtime I decided to implement a solution to the balanced parentheses (brackets) problem in Clojure.
Looking at the code below, you can see that I took advantage of the &lt;code>cond&lt;/code> macro to more clearly express the recursive algorithm&amp;rsquo;s intent.
I have also provided a couple of test assertions which are stored in the vars metadata and called using the core library&amp;rsquo;s &lt;code>test&lt;/code> function.&lt;/p></description></item><item><title>Conditional Expressions in PostgreSQL</title><link>https://eddmann.com/posts/conditional-expressions-in-postgresql/</link><pubDate>Tue, 12 Jan 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/conditional-expressions-in-postgresql/</guid><description>&lt;p>There may be a case where you need to make sure only a single row value is &lt;code>true&lt;/code> in a collection of results.
A common pattern for performing such a task is to set all values to &lt;code>false&lt;/code> in the collection, and then set the desired one to &lt;code>true&lt;/code>.&lt;/p></description></item><item><title>QuickSort in Clojure</title><link>https://eddmann.com/posts/quicksort-in-clojure/</link><pubDate>Mon, 11 Jan 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/quicksort-in-clojure/</guid><description>&lt;p>This past weekend I had the opportunity to delve more deeply into Clojure&amp;rsquo;s &lt;a href="https://clojuredocs.org/clojure.core" rel="external noopener" target="_blank">core library&lt;/a>.
I experimented with some interesting aspects of the library by implementing the QuickSort algorithm in a couple of different ways.&lt;/p></description></item><item><title>Even Higher Trampolining in JavaScript</title><link>https://eddmann.com/posts/even-higher-trampolining-in-javascript/</link><pubDate>Fri, 08 Jan 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/even-higher-trampolining-in-javascript/</guid><description>&lt;p>The concept of &lt;em>trampolining&lt;/em> seems to have been a running trend throughout this week.
I noted in my initial post on implementing trampolining in JavaScript that I would document a revised version capable of handling the case when a function is the desired return type.&lt;/p></description></item><item><title>Recursive Functions using a Trampoline in Clojure</title><link>https://eddmann.com/posts/recursive-functions-using-a-trampoline-in-clojure/</link><pubDate>Thu, 07 Jan 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/recursive-functions-using-a-trampoline-in-clojure/</guid><description>&lt;p>Following on from yesterday&amp;rsquo;s post that discussed &lt;a href="https://eddmann.com/posts/recursive-functions-using-a-trampoline-in-javascript/">&amp;lsquo;Trampolining&amp;rsquo; in JavaScript&lt;/a>, I thought it would be interesting to see what Clojure has to offer.&lt;/p></description></item><item><title>Recursive Functions using a Trampoline in JavaScript</title><link>https://eddmann.com/posts/recursive-functions-using-a-trampoline-in-javascript/</link><pubDate>Wed, 06 Jan 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/recursive-functions-using-a-trampoline-in-javascript/</guid><description>&lt;p>An interesting technique for managing perceived tail-call optimised algorithms in an environment that does not provide such capabilities is to use a concept called a &lt;em>trampoline&lt;/em>.
The following two examples provide all their work within the recursive function invocation and are in tail-call position.
However, in environments without such optimisations (before ES2015), a single stack frame is not reused and instead incurs the burden of O(n) memory complexity.&lt;/p></description></item><item><title>Mergesort in Clojure using Post Conditionals</title><link>https://eddmann.com/posts/mergesort-in-clojure-using-post-conditionals/</link><pubDate>Tue, 05 Jan 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mergesort-in-clojure-using-post-conditionals/</guid><description>&lt;p>Whilst currently reading through &lt;a href="https://www.manning.com/books/the-joy-of-clojure" rel="external noopener" target="_blank">The Joy of Clojure&lt;/a> book I was introduced to the concept of pre and post-conditionals, similar to another language called &lt;a href="https://en.wikipedia.org/wiki/Eiffel_%28programming_language%29" rel="external noopener" target="_blank">Eiffel&lt;/a>.
To experiment with this feature I decided to create a simple merge-sort algorithm implementation which ensured that its returned values were sorted by the provided predicate.&lt;/p></description></item><item><title>Infix Calculator in Clojure</title><link>https://eddmann.com/posts/infix-calculator-in-clojure/</link><pubDate>Sun, 03 Jan 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/infix-calculator-in-clojure/</guid><description>&lt;p>Following on from my previous post, I have continued my exploration into Clojure by implementing a simple infix calculator - using the Shunting Yard algorithm and RPN evaluation.
The documented implementation is split into three distinct parts, of which I will describe piece-by-piece before composing them together to result in the final calculator.&lt;/p></description></item><item><title>FizzBuzz in Clojure</title><link>https://eddmann.com/posts/fizzbuzz-in-clojure/</link><pubDate>Thu, 31 Dec 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/fizzbuzz-in-clojure/</guid><description>&lt;p>This past Christmas break I had the chance to finally pick up &lt;a href="https://www.manning.com/books/the-joy-of-clojure" rel="external noopener" target="_blank">The Joy of Clojure&lt;/a> book and delve into the world of Lisp.
Along with the commonplace merge-sort algorithm, I find it beneficial to explore a new language and its capabilities by solving the &lt;a href="http://rosettacode.org/wiki/FizzBuzz" rel="external noopener" target="_blank">FizzBuzz&lt;/a> code kata.
In this post I will be explaining a couple of the implementations that I created.&lt;/p></description></item><item><title>Asynchronous Calls within Flux</title><link>https://eddmann.com/posts/asynchronous-calls-within-flux/</link><pubDate>Wed, 28 Oct 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/asynchronous-calls-within-flux/</guid><description>&lt;p>The Flux architecture abides by a single unidirectional data-flow throughout the entire application.
This provides us with a host of benefits, ranging from easier to reason about code, to clearer testing strategies.
However, one issue we faced in our recently updated interface that tradesmen use to communicate with customers was how to handle asynchronous calls within these constraints.
Throughout this post I wish to guide you through the iterative design decisions made, along with the resulting abstractions and boundaries.&lt;/p></description></item><item><title>Arabic to Roman Numerals Converter in JavaScript</title><link>https://eddmann.com/posts/arabic-to-roman-numerals-converter-in-javascript/</link><pubDate>Tue, 20 Oct 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/arabic-to-roman-numerals-converter-in-javascript/</guid><description>&lt;p>Having an hour to spare recently, I decided to solve the common problem of converting from Hindu-Arabic to Roman numerals.&lt;/p></description></item><item><title>Cartesian Product in JavaScript</title><link>https://eddmann.com/posts/cartesian-product-in-javascript/</link><pubDate>Sun, 04 Oct 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/cartesian-product-in-javascript/</guid><description>&lt;p>This weekend I have had the chance to explore Cartesian products.
The Cartesian product (cross-product) is essentially an operation that returns a product set from multiple supplied sets.&lt;/p></description></item><item><title>Peano Numbers and Arithmetic in JavaScript</title><link>https://eddmann.com/posts/peano-numbers-and-arithmetic-in-javascript/</link><pubDate>Thu, 01 Oct 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/peano-numbers-and-arithmetic-in-javascript/</guid><description>&lt;p>Whilst completing the &lt;a href="https://www.coursera.org/course/progfun" rel="external noopener" target="_blank">Functional Programming Principles in Scala&lt;/a> course a couple of years ago one of the exercises was in the realm of Peano numbers.
This subject fascinated me, demonstrating how we were able to represent non-negative natural numbers without any pre-existing concepts - relying solely on logical expressions and recursive algorithms.&lt;/p></description></item><item><title>Implementing Classical Inheritance in JavaScript</title><link>https://eddmann.com/posts/implementing-classical-inheritance-in-javascript/</link><pubDate>Sat, 05 Sep 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/implementing-classical-inheritance-in-javascript/</guid><description>&lt;p>Developers who are well versed in class-based languages such as Java and C++ may find JavaScript&amp;rsquo;s prototypical and, in my heart, true object-oriented nature confusing.
With the addition of the &lt;code>class&lt;/code> keyword in ES6 it has become extremely easy to crossover these class-based principles into JavaScript.
However, it should be noted that this is nothing more than syntactic sugar over an extremely expressive and flexible language construct.&lt;/p></description></item><item><title>How the 'new' keyword works in JavaScript</title><link>https://eddmann.com/posts/how-the-new-keyword-works-in-javascript/</link><pubDate>Thu, 03 Sep 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/how-the-new-keyword-works-in-javascript/</guid><description>&lt;p>The &lt;code>new&lt;/code> keyword in JavaScript can sometimes slip up new and experienced programmers alike.
We typically associate this word with classical-based object-oriented languages (such as Java, etc.), whereas in JavaScript it works a little differently.&lt;/p></description></item><item><title>Implementing the Shunting Yard algorithm in JavaScript</title><link>https://eddmann.com/posts/implementing-the-shunting-yard-algorithm-in-javascript/</link><pubDate>Sat, 29 Aug 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/implementing-the-shunting-yard-algorithm-in-javascript/</guid><description>&lt;p>Following on from my &lt;a href="https://eddmann.com/posts/small-rpn-implementation-in-javascript/">recent post&lt;/a> on implementing a small RPN parser using JavaScript, we can expand on this by handling infix expressions.
This can be achieved by initially parsing the expression into its postfix (RPN) counterpart, highlighting another use case where a stack-based approach works well.&lt;/p></description></item><item><title>Developing a Resizable-Indexed Array as a PHP Extension with Joe Watkins</title><link>https://eddmann.com/posts/developing-a-resizable-indexed-array-as-a-php-extension-with-joe-watkins/</link><pubDate>Fri, 28 Aug 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/developing-a-resizable-indexed-array-as-a-php-extension-with-joe-watkins/</guid><description>&lt;p>Following on from our &lt;a href="https://eddmann.com/posts/php-extension-development-for-beginners-with-joe-watkins/">first screencast&lt;/a>, which touched upon how to set up a PHP extension development environment and the creation of a simple &lt;code>array_sum&lt;/code>-like function.
We now further this topic by implementing a resizable-indexed array class which supplies very similar functionality to that of the &lt;code>SplFixedArray&lt;/code> class.&lt;/p></description></item><item><title>Small RPN Implementation in JavaScript</title><link>https://eddmann.com/posts/small-rpn-implementation-in-javascript/</link><pubDate>Tue, 25 Aug 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/small-rpn-implementation-in-javascript/</guid><description>&lt;p>This morning I decided to quickly write up a small Reverse Polish Notation evaluator in JavaScript.
Evaluation of these expressions highlights the perfect use-case for a stack-based approach.&lt;/p></description></item><item><title>Lifting JavaScript Operators into First-class Functions</title><link>https://eddmann.com/posts/lifting-javascript-operators-into-first-class-functions/</link><pubDate>Mon, 24 Aug 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/lifting-javascript-operators-into-first-class-functions/</guid><description>&lt;p>I have always enjoyed how succinctly you are able to use commonly found operators as first-class functions in languages such as &lt;a href="http://clojure.org/" rel="external noopener" target="_blank">Clojure&lt;/a>.
As a quick thought experiment, I decided to see if it would be possible to use JavaScript&amp;rsquo;s capabilities to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" rel="external noopener" target="_blank">dynamically create functions&lt;/a> to mimic such behaviour.&lt;/p></description></item><item><title>PHP Extension Development for Beginners with Joe Watkins</title><link>https://eddmann.com/posts/php-extension-development-for-beginners-with-joe-watkins/</link><pubDate>Mon, 03 Aug 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/php-extension-development-for-beginners-with-joe-watkins/</guid><description>&lt;p>In the very first screencast episode of &lt;a href="https://threedevsandamaybe.com/" rel="external noopener" target="_blank">Three Devs and a Maybe&lt;/a>, I was fortunate to chat with PHP core developer &lt;a href="http://blog.krakjoe.ninja/" rel="external noopener" target="_blank">Joe Watkins&lt;/a>, discussing PHP 5 and 7 extension development for beginners.&lt;/p></description></item><item><title>Insertion, Removal and Inversion Operations on Binary (Search) Trees in PHP</title><link>https://eddmann.com/posts/insertion-removal-and-inversion-operations-on-binary-search-trees-in-php/</link><pubDate>Wed, 22 Jul 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/insertion-removal-and-inversion-operations-on-binary-search-trees-in-php/</guid><description>&lt;p>Recently Max Howell (creator of &lt;a href="http://brew.sh/" rel="external noopener" target="_blank">Homebrew&lt;/a>) posted an interesting &lt;a href="https://twitter.com/mxcl/status/608682016205344768" rel="external noopener" target="_blank">tweet&lt;/a> in regard to Google&amp;rsquo;s interview process.
In this tweet he mentioned how one of the proposed questions was to white-board a solution to invert a binary tree.
Over the past couple of years I have been interested in exploring fundamental computer science data structures and algorithms.
As a result, I thought it would be interesting to explore this structure and its associated operations in more depth - using immutable and mutable PHP implementations to clearly highlight the benefits garnered from each approach.&lt;/p></description></item><item><title>Managing Jenkins Project Builds and Configuration using PHP</title><link>https://eddmann.com/posts/managing-jenkins-project-builds-and-configuration-using-php/</link><pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/managing-jenkins-project-builds-and-configuration-using-php/</guid><description>&lt;p>Throughout project development we use Jenkins to provide meaningful test feedback on each Git push event.
These builds are required to gain sufficient confidence for merging into &lt;em>master&lt;/em> and subsequent deployment.
Each team member manages their own project with the current project/branch they are working on.
However, typically we find ourselves working on multiple branches throughout the day, and it can become cumbersome to update the project&amp;rsquo;s configuration.&lt;/p></description></item><item><title>Optional Value Control-flows in PHP using Traits and Magic-methods</title><link>https://eddmann.com/posts/optional-value-control-flows-in-php-using-traits-and-magic-methods/</link><pubDate>Wed, 10 Jun 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/optional-value-control-flows-in-php-using-traits-and-magic-methods/</guid><description>&lt;p>Recently, I have been interested in experimenting with different ways to handle optional values.
There are many examples that exist demonstrating the use of the Maybe/Optional structure within the PHP landscape.
I would instead like to focus my attention on only looking into the concept of &lt;code>orElse&lt;/code>, which I have found to be a prominent control-flow when using these types of values.&lt;/p></description></item><item><title>Partial Application (Currying) and Composition using JavaScript ES6</title><link>https://eddmann.com/posts/partial-application-currying-and-composition-using-javascript-es6/</link><pubDate>Wed, 15 Apr 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/partial-application-currying-and-composition-using-javascript-es6/</guid><description>&lt;p>Completion of a recent project sparked discussion surrounding JavaScript ES6 within the team, in part due to the welcome addition of &lt;a href="http://webpack.github.io/" rel="external noopener" target="_blank">Webpack&lt;/a> into our stack.
&lt;a href="http://en.wikipedia.org/wiki/ECMAScript" rel="external noopener" target="_blank">ECMAScript 6&lt;/a> is an upcoming standard which will eventually be used as a reference for all future JavaScript implementations (client and server-side).&lt;/p></description></item><item><title>Simplify Git commit fixes using fixup and auto-squash</title><link>https://eddmann.com/posts/simplify-git-commit-fixes-using-fixup-and-auto-squash/</link><pubDate>Wed, 08 Apr 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/simplify-git-commit-fixes-using-fixup-and-auto-squash/</guid><description>&lt;p>Throughout a project I will typically make commits that could be categorised as fixes to previous commits.
To help highlight such commits I would follow the pattern of starting the message with &amp;lsquo;fix: &amp;hellip;&amp;rsquo;, making the final rebase step (before merging into master) easier.
However, as time passed, it became more challenging to determine which fix commits were related to previous commits.&lt;/p></description></item><item><title>Implementing Streams in PHP</title><link>https://eddmann.com/posts/implementing-streams-in-php/</link><pubDate>Fri, 16 Jan 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/implementing-streams-in-php/</guid><description>&lt;p>Typically, when we think about a list of elements we assume there is both a start and a finite end.
In this example the list has been precomputed and stored for subsequent traversal and transformation.
If instead, we replaced the finite ending with a promise to return the next element in the sequence, we would have the architecture to provide infinite lists.&lt;/p></description></item><item><title>Cons Lists and Folds in PHP</title><link>https://eddmann.com/posts/cons-lists-and-folds-in-php/</link><pubDate>Fri, 02 Jan 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/cons-lists-and-folds-in-php/</guid><description>&lt;p>Cons cells are used to (cons)truct a data object which represents an ordered pair.
The elements in this pair can be identified as &amp;lsquo;car&amp;rsquo; and &amp;lsquo;cdr&amp;rsquo; accordingly.
Using this simple representation, we are able not only to hold ordered pairs but also to create more complex data structures, such as a List.&lt;/p></description></item><item><title>The Internals of Git</title><link>https://eddmann.com/posts/the-internals-of-git/</link><pubDate>Sat, 27 Dec 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/the-internals-of-git/</guid><description>&lt;p>I have been using Git for the past couple of years, and I remember how long it took me to get my head around the workflow.
Throughout the past couple of months, thanks to a couple of &lt;a href="http://ftp.newartisans.com/pub/git.from.bottom.up.pdf" rel="external noopener" target="_blank">well&lt;/a> &lt;a href="http://mrchlblng.me/2014/09/practical-git-introduction/" rel="external noopener" target="_blank">timed&lt;/a> &lt;a href="http://episodes.gitminutes.com/" rel="external noopener" target="_blank">findings&lt;/a>, I have gained an interest in how Git works internally.
In this post I hope to explain how Git uses well-designed, composed low-level commands to create the high-level actions we use on a day-to-day basis.&lt;/p></description></item><item><title>Reversing a Unicode String in PHP using UTF-16BE/LE</title><link>https://eddmann.com/posts/reversing-a-unicode-string-in-php-using-utf-16-be-le/</link><pubDate>Sun, 11 May 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/reversing-a-unicode-string-in-php-using-utf-16-be-le/</guid><description>&lt;p>Last week I was bitten by the Unicode encoding issue when trying to naively manipulate a user&amp;rsquo;s input using PHP&amp;rsquo;s built-in string functions.
PHP simply assumes that all characters are a single byte (octet) and the provided functions use this assumption when processing a string.
In this post I will not be going into depth on the subject of Unicode representations.
I feel this topic deserves its own series of articles.
However, you should be aware that in &amp;lsquo;Western Europe&amp;rsquo; we commonly only use the basic &lt;a href="http://en.wikipedia.org/wiki/ASCII" rel="external noopener" target="_blank">ASCII&lt;/a> character-set (consisting of 7 bytes).
This makes the transition to the popular &amp;lsquo;UTF-8&amp;rsquo; Unicode representation almost seamless, as the two map one-to-one.
I wish to, however, discuss how to reverse a Unicode string (UTF-8) using a combination of &lt;a href="http://en.wikipedia.org/wiki/Endianness" rel="external noopener" target="_blank">endianness&lt;/a> magic and the &lt;a href="http://www.php.net/manual/en/function.strrev.php" rel="external noopener" target="_blank">&amp;lsquo;strrev&amp;rsquo;&lt;/a> function.&lt;/p></description></item><item><title>Reversing a String in PHP</title><link>https://eddmann.com/posts/reversing-a-string-in-php/</link><pubDate>Sat, 10 May 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/reversing-a-string-in-php/</guid><description>&lt;p>Since recently setting up a forum for &lt;a href="http://forum.threedevsandamaybe.com/" rel="external noopener" target="_blank">Three Devs and a Maybe&lt;/a>, we have started to partake in a weekly &lt;a href="http://en.wikipedia.org/wiki/Kata_%28programming%29" rel="external noopener" target="_blank">code-kata&lt;/a>.
What could be more fitting to start with than the common interview question, reversing a string in a given language.
In this case the language is PHP, and below are some of the many ways contrived to solve the problem.&lt;/p></description></item><item><title>Tuples in PHP</title><link>https://eddmann.com/posts/tuples-in-php/</link><pubDate>Thu, 17 Apr 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/tuples-in-php/</guid><description>&lt;p>Since exploring languages such as Scala and Python which provide the tuple data structure, I have been keen to experiment with how to clearly map it into a PHP solution.
Tuples are simply a finite, ordered sequence of elements - usually with good language support to both pack (construction) and unpack (deconstruction) the values.
I have found that many use cases of the commonplace array structure in PHP could be better suited to n-tuples.
Familiar examples such as coordinate pairs (points) and records from a relational database (e.g. a user id and name) could succinctly take advantage of the structure.&lt;/p></description></item><item><title>Storing PHP Sessions/File Caches in Memory using TMPFS</title><link>https://eddmann.com/posts/storing-php-sessions-file-caches-in-memory-using-tmpfs/</link><pubDate>Wed, 16 Apr 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/storing-php-sessions-file-caches-in-memory-using-tmpfs/</guid><description>&lt;p>Yesterday I was looking through some application logs and noticed a significant bottleneck with I/O reads in the implemented file cache.
This cache is used to temporarily store processed views and records for a set duration.
I looked into a couple of solutions to alleviate the intense spinning disk usage, ranging from &lt;a href="http://memcached.org/" rel="external noopener" target="_blank">Memcache&lt;/a> to &lt;a href="http://redis.io/" rel="external noopener" target="_blank">Redis&lt;/a>.
These products are great for large-scale applications spread over multiple systems.
However, in my case, a single local configuration was sufficient.&lt;/p></description></item><item><title>Implementing ROT13 and ROT(n) Caesar Ciphers in Python</title><link>https://eddmann.com/posts/implementing-rot13-and-rot-n-caesar-ciphers-in-python/</link><pubDate>Sat, 12 Apr 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/implementing-rot13-and-rot-n-caesar-ciphers-in-python/</guid><description>&lt;p>The Caesar cipher (shift cipher) is an extremely simple encryption technique.
Substitutions of this kind rely on an invariant - replacing each plain-text letter with the letter at a fixed number of positions across the alphabet.
The recipient is then able to decode the encoded message successfully if they are aware of the chosen shift.&lt;/p></description></item><item><title>Securing Sessions in PHP</title><link>https://eddmann.com/posts/securing-sessions-in-php/</link><pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/securing-sessions-in-php/</guid><description>&lt;p>Following on from my previous post on &lt;a href="https://eddmann.com/posts/self-signed-ssl-certificates-with-nginx-and-apache/">Self-signed SSL certificates&lt;/a>, I would now like to address the second most common Web application vulnerability (&lt;a href="https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management" rel="external noopener" target="_blank">Broken Authentication and Session Management&lt;/a>).
When delving into the subject I was unable to find a definitive resource for a PHP implementation.
Due to this, I set out to combine all the best practice I could find into a single session handler, to help protect against the common attack vectors.
Since PHP 5.4, you are able to set the session handler based on a class instance that extends the default &lt;code>SessionHandler&lt;/code> class.&lt;/p></description></item><item><title>Functional Quick sort in Scala and JavaScript</title><link>https://eddmann.com/posts/functional-quick-sort-in-scala-and-javascript/</link><pubDate>Sun, 06 Apr 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/functional-quick-sort-in-scala-and-javascript/</guid><description>&lt;p>Functional languages provide you with the ability to concisely define the intent of a piece of code, without low-level issues getting in the way.
This can be clearly seen when implementing the Quick sort algorithm.
Often referred to as &amp;lsquo;partition-exchange&amp;rsquo; sort, this divide and conquer algorithm recursively divides a list into two sub-lists, based on a chosen pivot element.&lt;/p></description></item><item><title>Self-Signed SSL Certificates with Nginx and Apache</title><link>https://eddmann.com/posts/self-signed-ssl-certificates-with-nginx-and-apache/</link><pubDate>Sat, 05 Apr 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/self-signed-ssl-certificates-with-nginx-and-apache/</guid><description>&lt;p>Since having the opportunity to discuss web application security (&lt;a href="https://threedevsandamaybe.com/web-application-security-part-1/" rel="external noopener" target="_blank">part 1&lt;/a>, &lt;a href="https://threedevsandamaybe.com/web-application-security-part-2/" rel="external noopener" target="_blank">part 2&lt;/a>) recently on the podcast, I thought it was a good time to have a deeper look into SSL/TLS (Transport Layer Security).
There are plenty of good resources online discussing the &lt;a href="http://www.youtube.com/watch?v=iQsKdtjwtYI" rel="external noopener" target="_blank">technical side&lt;/a> of the topic.
However, at a high level, point-to-point encryption and server identification are the two problems it attempts to solve.&lt;/p></description></item><item><title>Arch Linux and Awesome WM Installation Notes</title><link>https://eddmann.com/posts/arch-linux-and-awesome-wm-installation-notes/</link><pubDate>Tue, 01 Apr 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/arch-linux-and-awesome-wm-installation-notes/</guid><description>&lt;p>I have been a big fan of &lt;a href="https://www.archlinux.org/" rel="external noopener" target="_blank">Arch Linux&lt;/a> (inc. it&amp;rsquo;s philosophy) and the &lt;a href="http://awesome.naquadah.org/" rel="external noopener" target="_blank">Awesome&lt;/a> Window Manager for just under a year now.
I recently went through the process of a clean installation on my laptop and thought I would jot down some installation notes for future reference.
Some background information on my 64bit setup, I currently use Intel HD Graphics 4000 and a Western Digital 4K Advanced Format Hard Drive.&lt;/p></description></item><item><title>The Y (Fixed-Point) Combinator in PHP</title><link>https://eddmann.com/posts/the-y-fixed-point-combinator-in-php/</link><pubDate>Tue, 01 Apr 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/the-y-fixed-point-combinator-in-php/</guid><description>&lt;p>A combinator is a type of higher-order function that can be used to express functions without the explicit use of variables.
A fixed point is a value that remains unchanged by a function, satisfying the equation which can be found &lt;a href="http://en.wikipedia.org/wiki/Fixed-point_combinator#Y_combinator" rel="external noopener" target="_blank">here&lt;/a>.
Using the Y-combinator allows us to essentially convert non-recursive code into a recursive counterpart (without directly using named recursion or iteration).
To work its magic, the recursive function is computed as the fixed point of the non-recursive function.&lt;/p></description></item><item><title>Using Anonymous Functions (Lambdas) and Closures in PHP</title><link>https://eddmann.com/posts/using-anonymous-functions-lambdas-and-closures-in-php/</link><pubDate>Mon, 17 Mar 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/using-anonymous-functions-lambdas-and-closures-in-php/</guid><description>&lt;p>Having spent some significant time with more functional-oriented languages such as Scala, I have been keen to explore and take advantage of some of these concepts in my current day-to-day language (PHP).
Delving into the subject, however, seems to highlight some confusion between the two concepts discussed.
An anonymous function (also known as a lambda), originating from the &lt;a href="http://en.wikipedia.org/wiki/Lambda_calculus" rel="external noopener" target="_blank">Lambda calculus&lt;/a>, is a function that has no assigned name and can be considered a value in itself.
Functions of this category are first-class value types, on a par with integers, booleans, etc., allowing you to pass them as arguments or return them from functions (also known as higher-order functions).
A closure, on the other hand, is a function that captures the state of the surrounding context or environment upon definition, retaining these references even if the variable falls out of lexical scope.
Neither depends on the other at an implementation level; however, you typically see the two used in conjunction.&lt;/p></description></item><item><title>Parallel Summation in Java</title><link>https://eddmann.com/posts/parallel-summation-in-java/</link><pubDate>Fri, 14 Mar 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/parallel-summation-in-java/</guid><description>&lt;p>Summation is the common operation of adding a sequence of numbers together, resulting in their total.
The trivial implementation is to iterate over the full collection of numbers, keeping a running total as you progress.
For small sequences, a single-threaded implementation will suffice.
However, when the size increases, the use of other available CPU cores helps to provide the necessary speed optimisations.
As addition is an associative operation, it makes no difference to the end result in which order we process the collection.
This behaviour works well for our implementation design.&lt;/p></description></item><item><title>Introduction to Creating a Basic PHP Extension</title><link>https://eddmann.com/posts/introduction-to-creating-a-basic-php-extension/</link><pubDate>Wed, 12 Mar 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/introduction-to-creating-a-basic-php-extension/</guid><description>&lt;p>I recently decided to test my novice C skills in the field of building a PHP extension.
However, despite some very good resources (&lt;a href="http://www.phpinternalsbook.com/" rel="external noopener" target="_blank">here&lt;/a> and &lt;a href="http://devzone.zend.com/303/extension-writing-part-i-introduction-to-php-and-zend/" rel="external noopener" target="_blank">here&lt;/a>), there still seems to be a lack of beginner-friendly material on the subject.
In this post I will document a simple development environment that has worked well on a fresh CentOS 6.5 installation.
Once this has been set up, we will then move on to creating a simple &amp;lsquo;Hello World&amp;rsquo; extension, highlighting some of the extension platform&amp;rsquo;s capabilities.&lt;/p></description></item><item><title>Using Iterative deepening depth-first search in Python</title><link>https://eddmann.com/posts/using-iterative-deepening-depth-first-search-in-python/</link><pubDate>Thu, 06 Mar 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/using-iterative-deepening-depth-first-search-in-python/</guid><description>&lt;p>Iterative deepening depth-first search (IDDFS) is an extension to the &amp;lsquo;vanilla&amp;rsquo; depth-first search algorithm, with an added constraint on the total depth explored per iteration.
It produces equivalent results to those achieved using breadth-first search, without incurring the large memory costs.
Due to breadth-first search storing fringe vertices in memory, O(b^d) memory space may be required (where b is the branching factor).
This is in stark contrast to IDDFS&amp;rsquo;s worst-case memory requirements of O(bd).
At each iteration, vertex successors at the depth-cap level are ignored.
If the goal has not been found, the maximum level is increased by one and the process repeated.
Similarly to breadth-first search, it guarantees finding an optimal path between two vertices, as the shallowest goal vertex is reached first due to the depth cap, resulting in no exploration of subsequent, unnecessary branches.&lt;/p></description></item><item><title>Depth-First Search and Breadth-First Search in Python</title><link>https://eddmann.com/posts/depth-first-search-and-breadth-first-search-in-python/</link><pubDate>Wed, 05 Mar 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/depth-first-search-and-breadth-first-search-in-python/</guid><description>&lt;p>Graph theory and, in particular, the graph ADT (abstract data type) is widely explored and implemented in the field of Computer Science and Mathematics.
Consisting of vertices (nodes) and the edges (optionally directed or weighted) that connect them, the data structure is effectively able to represent and solve many problem domains.
One of the most popular areas of algorithm design within this space is the problem of checking for the existence of, or the (shortest) path between, two or more vertices in the graph.&lt;/p></description></item><item><title>Creating a Basic Auth. WSGI Middleware in Python</title><link>https://eddmann.com/posts/creating-a-basic-auth-wsgi-middleware-in-python/</link><pubDate>Thu, 27 Feb 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/creating-a-basic-auth-wsgi-middleware-in-python/</guid><description>&lt;p>With my recent dedicated introduction to the Python language, I have become very appreciative of the highly composable nature of &lt;a href="http://en.wikipedia.org/wiki/Web_Server_Gateway_Interface" rel="external noopener" target="_blank">WSGI&lt;/a> applications.
In a functional style, you are able to compose a desired application from many different components, using the middleware ideology.
The benefits of this approach can be clearly seen in the contrived example depicted below, which is based on my previous &lt;a href="https://eddmann.com/posts/using-basic-auth-and-decorators-in-pythons-flask/">Flask example&lt;/a>.&lt;/p></description></item><item><title>Processing a List of Links using Python and BeautifulSoup</title><link>https://eddmann.com/posts/processing-a-list-of-links-using-python-and-beautifulsoup/</link><pubDate>Thu, 27 Feb 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/processing-a-list-of-links-using-python-and-beautifulsoup/</guid><description>&lt;p>Whilst uploading the &lt;a href="https://threedevsandamaybe.com/" rel="external noopener" target="_blank">weekly podcast&lt;/a> I am required to produce a list of links discussed on the show.
This can become a little tedious, as I must visit each link to find a suitable title.
Additionally, when using Markdown, you must provide lists in a specific format.
I had been doing this manually for a couple of weeks, and last night I thought, &amp;ldquo;I am a developer; I should automate this.&amp;rdquo;.&lt;/p></description></item><item><title>Mounting an OSX SSH Volume using FUSE and SSHFS</title><link>https://eddmann.com/posts/mounting-an-osx-ssh-volume-using-fuse-and-sshfs/</link><pubDate>Mon, 17 Feb 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mounting-an-osx-ssh-volume-using-fuse-and-sshfs/</guid><description>&lt;p>&lt;a href="http://osxfuse.github.io/" rel="external noopener" target="_blank">FUSE for OSX&lt;/a> is a Mac OSX port of the popular &lt;a href="http://en.wikipedia.org/wiki/Filesystem_in_Userspace" rel="external noopener" target="_blank">Filesystem in Userspace&lt;/a> (FUSE) software, and a successor to MacFUSE.
Once installed, you have the ability to mount many different types of remote and local filesystems in user space, without the need to alter the kernel.
An example filesystem that I have found to be very useful is &lt;a href="http://en.wikipedia.org/wiki/SSHFS" rel="external noopener" target="_blank">SSHFS&lt;/a>, which allows you to interact with files located on a remote server via the SSH protocol.
Once mounted, the specified remote directory can be accessed as if it were a local volume.&lt;/p></description></item><item><title>Understanding Python WSGI with Examples</title><link>https://eddmann.com/posts/understanding-python-wsgi-with-examples/</link><pubDate>Mon, 17 Feb 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/understanding-python-wsgi-with-examples/</guid><description>&lt;p>Coming from a strong PHP background, initially, exploring the web development landscape whilst delving into Python seemed rather confusing.
As Python was not originally developed for the web, a specification called &lt;a href="http://www.python.org/dev/peps/pep-0333/" rel="external noopener" target="_blank">PEP 333&lt;/a> was accepted, which standardised the required interface between web servers and Python web frameworks/applications.
Despite the additional complexity, the manner in which middleware applications can be integrated, along with the server choices, offers possibilities that I find hard to locate a comparable alternative for in PHP.&lt;/p></description></item><item><title>Implementing Basic Python Decorators in PHP</title><link>https://eddmann.com/posts/implementing-basic-python-decorators-in-php/</link><pubDate>Mon, 10 Feb 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/implementing-basic-python-decorators-in-php/</guid><description>&lt;p>Having just stepped into the world of Python, I think it is only human nature to compare, if not contemplate, solutions to discovered strengths in a more familiar language.
My familiar language being, of course, PHP, I thought it would be a good thought experiment to see if I could design a basic decorator implementation in the language.
Decorators, as discussed in &lt;a href="https://eddmann.com/posts/using-basic-auth-and-decorators-in-pythons-flask/">another post&lt;/a>, are an easy concept to explain.
Simply put, they wrap specified functions with other functions, providing a means to compose new functions in a succinct manner.&lt;/p></description></item><item><title>Using Basic Auth. and Decorators in Python's Flask</title><link>https://eddmann.com/posts/using-basic-auth-and-decorators-in-pythons-flask/</link><pubDate>Mon, 10 Feb 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/using-basic-auth-and-decorators-in-pythons-flask/</guid><description>&lt;p>I have recently set aside some time to delve into the world of Python and all its Zen.
Being a web developer at heart, I, of course, had to look at the current options available to me.
In this post, I will guide you through creating a single-script web application using Flask and basic access authentication.
For simplicity, I assume that you have a working installation of either Python 2.7/3.3 and &lt;a href="http://www.virtualenv.org/en/latest/index.html" rel="external noopener" target="_blank">virtualenv&lt;/a>.&lt;/p></description></item><item><title>Basic Shell Job Control in Unix</title><link>https://eddmann.com/posts/basic-shell-job-control-in-unix/</link><pubDate>Fri, 31 Jan 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/basic-shell-job-control-in-unix/</guid><description>&lt;p>Within Unix-based operating systems the concept of &lt;a href="http://en.wikipedia.org/wiki/Job_control_%28Unix%29" rel="external noopener" target="_blank">Job Control&lt;/a> provides you with the ability to manage multiple &amp;lsquo;batch jobs&amp;rsquo;.
Appending a single ampersand (&amp;amp;) to a command instructs the shell to fork and execute the action in a separate sub-shell.&lt;/p></description></item><item><title>Compiling PHP 5.5 with ZTS and pthreads Support</title><link>https://eddmann.com/posts/compiling-php-5-5-with-zts-and-pthreads-support/</link><pubDate>Thu, 30 Jan 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/compiling-php-5-5-with-zts-and-pthreads-support/</guid><description>&lt;p>&lt;a href="http://en.wikipedia.org/wiki/POSIX_Threads" rel="external noopener" target="_blank">POSIX Threads&lt;/a> are a standard for threading implementations available in many Unix-like operating systems.
Written in C, they provide developers with high-level thread management methods, synchronisation, etc.&lt;/p></description></item><item><title>Providing Local JS and CSS Resources for CDN Fallbacks</title><link>https://eddmann.com/posts/providing-local-js-and-css-resources-for-cdn-fallbacks/</link><pubDate>Wed, 29 Jan 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/providing-local-js-and-css-resources-for-cdn-fallbacks/</guid><description>&lt;p>In a recent &lt;a href="https://threedevsandamaybe.com/html-experiences-part-1/" rel="external noopener" target="_blank">podcast&lt;/a> the topic of using Content Delivery Networks (CDN) to host commonly used resources such as jQuery and Twitter Bootstrap came up.
The merits of having access to large-scale delivery infrastructure provided by Google etc. are significant.
There is also the possibility that the client will already have these assets cached.&lt;/p></description></item><item><title>Shell Functions to Recursively Delete/Suspend all Vagrant Instances</title><link>https://eddmann.com/posts/shell-functions-to-recursively-delete-suspend-all-vagrant-instances/</link><pubDate>Wed, 29 Jan 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/shell-functions-to-recursively-delete-suspend-all-vagrant-instances/</guid><description>&lt;p>I have been using &lt;a href="http://www.vagrantup.com/" rel="external noopener" target="_blank">Vagrant&lt;/a> exclusively for almost a year now and am still loving it, even with the introduction of &lt;a href="https://www.docker.io/" rel="external noopener" target="_blank">Docker&lt;/a>.
One issue I do find that arises is managing currently running and obsolete instances.&lt;/p></description></item><item><title>Accessors (Getter/Setter) and Singleton Traits in PHP</title><link>https://eddmann.com/posts/accessors-getter-setter-and-singleton-traits-in-php/</link><pubDate>Tue, 28 Jan 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/accessors-getter-setter-and-singleton-traits-in-php/</guid><description>&lt;p>Traits were introduced into the PHP language in 5.4, and from this point many interesting use-cases have appeared.
One such instance is the reduction in boilerplate code when prototyping a new idea.
Though these should be implemented within the project before completion, I have found that using the two traits below helps to speed up the development life-cycle.&lt;/p></description></item><item><title>Move Last Git Commit to New or Existing Branch</title><link>https://eddmann.com/posts/move-last-git-commit-to-new-or-existing-branch/</link><pubDate>Fri, 24 Jan 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/move-last-git-commit-to-new-or-existing-branch/</guid><description>&lt;p>Sometimes you may begin work on a specific branch (say &amp;lsquo;master&amp;rsquo;) and realise that it would be better off to move these commits into a separate branch.
This can be simply achieved using Git, either to a brand new branch or an existing branch.&lt;/p></description></item><item><title>Implementing a Dynamic Vector (Array) in C</title><link>https://eddmann.com/posts/implementing-a-dynamic-vector-array-in-c/</link><pubDate>Mon, 20 Jan 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/implementing-a-dynamic-vector-array-in-c/</guid><description>&lt;p>An array (vector) is a commonplace data type, used to hold and describe a collection of elements.
These elements can be fetched at runtime by one or more indices (identifying keys).
A distinguishing feature of an array compared to a list is that arrays allow constant-time random access, unlike lists which provide sequential access.
Resizable arrays allow for an unspecified upper bound of collection elements at runtime, and are conceptually similar to lists.&lt;/p></description></item><item><title>Creating a Mac Microphone Mute Keyboard Shortcut</title><link>https://eddmann.com/posts/creating-a-mac-microphone-mute-keyboard-shortcut/</link><pubDate>Sun, 19 Jan 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/creating-a-mac-microphone-mute-keyboard-shortcut/</guid><description>&lt;p>When recording our &lt;a href="https://threedevsandamaybe.com/" rel="external noopener" target="_blank">podcast&lt;/a> there is nothing more annoying than playing it back only to find hearing yourself banging away on the keyboard when someone else is speaking.
Within Skype there is functionality to mute your microphone input device during an active call.
However, the location and size of the button can be a challenge to find throughout a full podcast recording.&lt;/p></description></item><item><title>Transferring Files using SSH and SCP</title><link>https://eddmann.com/posts/transferring-files-using-ssh-and-scp/</link><pubDate>Fri, 17 Jan 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/transferring-files-using-ssh-and-scp/</guid><description>&lt;p>When you are managing multiple servers on a daily basis it pays off to invest some time in picking up a few techniques to get jobs finished quicker.
Provided in this post are a couple of the commands I use frequently when handling files and directories via SSH and SCP.&lt;/p></description></item><item><title>Implementing and Using Memoization in PHP</title><link>https://eddmann.com/posts/implementing-and-using-memoization-in-php/</link><pubDate>Mon, 13 Jan 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/implementing-and-using-memoization-in-php/</guid><description>&lt;p>Memoization is a simple optimisation technique to understand and, in most cases, implement.
The base idea is to speed up function calls by avoiding the re-calculation of previously processed input results (very cache-like).
Storing these results in a key-value lookup store can result in major speed increases when repetitive function calls occur.&lt;/p></description></item><item><title>Using Graphviz with SVG Output in PHP</title><link>https://eddmann.com/posts/using-graphviz-with-svg-output-in-php/</link><pubDate>Mon, 13 Jan 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/using-graphviz-with-svg-output-in-php/</guid><description>&lt;p>Since adding the functionality to process syntax highlighting through &lt;a href="http://pygments.org/" rel="external noopener" target="_blank">Pygments&lt;/a> I had been on the lookout for similar external tools that I could integrate.
One area that I felt was lacking in my posts was accompanying visual aids, which would be useful when explaining a new concept or algorithm.
Like most developers, I feel at home in an editor, so delving into another software package did not appeal to me.&lt;/p></description></item><item><title>How Static Facades and IoC are used in Laravel</title><link>https://eddmann.com/posts/how-static-facades-and-ioc-are-used-in-laravel/</link><pubDate>Wed, 08 Jan 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/how-static-facades-and-ioc-are-used-in-laravel/</guid><description>&lt;p>When you first take a look at &lt;a href="http://laravel.com/" rel="external noopener" target="_blank">Laravel&lt;/a> you may ask yourself, what is with all the static?
It is a valid question, as on the surface it can seem like the framework is heavily static method based.
However, this could be no further from the truth.
A deeper exploration reveals that the static calls we make really mask a great number of instance objects.
In this post I hope to provide a simple explanation as to what is really going on, and along the way build a basic implementation to practise these newfound findings.&lt;/p></description></item><item><title>Implementing Heapsort in Java and C</title><link>https://eddmann.com/posts/implementing-heapsort-in-java-and-c/</link><pubDate>Mon, 06 Jan 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/implementing-heapsort-in-java-and-c/</guid><description>&lt;p>In this post, we will delve into the mechanics of heapsort by building a tree-based heap data structure and then methodically extracting a sorted array.
We will then implement said algorithm in both Java and C to get a feel for how the process is modelled in code.&lt;/p></description></item><item><title>Using Python's Pygments Syntax Highlighter in PHP</title><link>https://eddmann.com/posts/using-pythons-pygments-syntax-highlighter-in-php/</link><pubDate>Mon, 06 Jan 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/using-pythons-pygments-syntax-highlighter-in-php/</guid><description>&lt;p>Having a website that is heavily software-development based, one important aspect that can not be overlooked is well presented code examples.
Speaking on the importance of editor syntax highlighting in the &lt;a href="https://threedevsandamaybe.com/exploring-text-source-editors-and-ides/" rel="external noopener" target="_blank">previous episode&lt;/a> of our podcast, this attribute transcends to aid in the readability of code online.
Fortunately, there are many options to choose from.
You can either store the code snippets in an embedded &lt;a href="http://gist.github.com/" rel="external noopener" target="_blank">Gists&lt;/a> or use the front-end based &lt;a href="http://highlightjs.org/" rel="external noopener" target="_blank">highlight.js&lt;/a> or &lt;a href="http://code.google.com/p/google-code-prettify/" rel="external noopener" target="_blank">Google Code Prettify&lt;/a>.
One benefit that greatly simplified the publishing process when using a front-end based solution was that you could simply parse the Markdown file (perhaps with a class language type-hint) and leave all the hard work to the client&amp;rsquo;s browser.
As we all know, we have very little control over the viewing experience for each user.
And as I started to post more frequently, cracks began to appear in the syntax highlighters I had been using.
However, when looking for a solution, one had been staring me straight in the face all this time, and that was &lt;a href="http://pygments.org/" rel="external noopener" target="_blank">Pygments&lt;/a>.&lt;/p></description></item><item><title>Implementing a Doubly Linked List in C</title><link>https://eddmann.com/posts/implementing-a-doubly-linked-list-in-c/</link><pubDate>Fri, 03 Jan 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/implementing-a-doubly-linked-list-in-c/</guid><description>&lt;p>Following on from the discussion on implementing a &lt;a href="https://eddmann.com/posts/implementing-a-singly-linked-list-in-c/">singly linked list&lt;/a> in C, a logical follow-up data structure is the doubly linked list.&lt;/p></description></item><item><title>Implementing a XOR Doubly Linked-List in C</title><link>https://eddmann.com/posts/implementing-a-xor-doubly-linked-list-in-c/</link><pubDate>Fri, 03 Jan 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/implementing-a-xor-doubly-linked-list-in-c/</guid><description>&lt;p>This post examines the implementation of a XOR doubly linked-list in C.
It provides a detailed explanation of how pointer arithmetic combined with the XOR operation can reduce memory usage in a linked list.
The discussion covers both the benefits and the challenges of managing memory at a low level in C.&lt;/p></description></item><item><title>Implementing a Singly Linked-List in C</title><link>https://eddmann.com/posts/implementing-a-singly-linked-list-in-c/</link><pubDate>Mon, 30 Dec 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/implementing-a-singly-linked-list-in-c/</guid><description>&lt;p>Over the past couple of days I have become very interested in brushing up on my limited C knowledge.
As I discussed in my previous &lt;a href="https://eddmann.com/posts/experimenting-with-the-xor-swap-method-in-java/">post&lt;/a> on using the XOR swap method, everyday languages are becoming very high-level, and as a result taking away some of the fun.
In the next couple of posts I wish to implement some of the commonplace data structures found in development, but unlike previous attempts, these will be in straight C.&lt;/p></description></item><item><title>Experimenting with the XOR Swap Method in Java</title><link>https://eddmann.com/posts/experimenting-with-the-xor-swap-method-in-java/</link><pubDate>Sun, 29 Dec 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/experimenting-with-the-xor-swap-method-in-java/</guid><description>&lt;p>The exclusive disjunction (or XOR) swap algorithm is a little trick to swap values of the same data type without the use of a temporary variable.
Typically, low-level data types like integers are used in practice, but in theory any value represented by fixed-length &lt;a href="http://en.wikipedia.org/wiki/Bit_array" rel="external noopener" target="_blank">bit-strings&lt;/a> will work.
Though it is considered bad practice in most use cases, it does help to highlight implementation details which can seem foreign to &lt;a href="http://en.wikipedia.org/wiki/High-level_programming_language" rel="external noopener" target="_blank">higher-level&lt;/a> programmers.
Due to the high levels of abstraction implemented to aid the development of complex systems, we sometimes lose the beauty of working with the underlying bits and bytes.
An example of such an abstraction is the &lt;a href="http://javabook.compuware.com/content/memory/how-garbage-collection-works.aspx" rel="external noopener" target="_blank">garbage collector&lt;/a> found in the JVM, which handles memory management concerns that, in lower-level languages, would require significant attention.&lt;/p></description></item><item><title>Least Significant Digit (LSD) Radix Sort in Java</title><link>https://eddmann.com/posts/least-significant-digit-lsd-radix-sort-in-java/</link><pubDate>Sat, 28 Dec 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/least-significant-digit-lsd-radix-sort-in-java/</guid><description>&lt;p>Radix sort is an O(digits·keys) sorting algorithm that relies on grouping integer keys to efficiently process and naturally order the specified dataset.
Based on structure and positional notation, many other data types that can be represented in integer form (e.g. ASCII characters) can benefit from the algorithm.
Sorting occurs by comparing digits in the same position of the items.
Two alternative versions of the algorithm exist, each tackling the problem from the opposite direction.
In this post, I will describe an iterative least significant digit implementation which, as the name suggests, begins processing from the right-most digit position.
This implementation results in a &lt;a href="http://en.wikipedia.org/wiki/Stable_sort#Stability" rel="external noopener" target="_blank">stable&lt;/a> sort, whereas the other implementation, which tackles the most significant digit first, cannot guarantee stability.
In a stable sorting algorithm, the initial ordering of equal keys remains unchanged in the result.&lt;/p></description></item><item><title>Using Partial Application in PHP</title><link>https://eddmann.com/posts/using-partial-application-in-php/</link><pubDate>Thu, 26 Dec 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/using-partial-application-in-php/</guid><description>&lt;p>Partial function application is a commonplace feature found in many languages that lean towards the functional paradigm.
Unlike some functional concepts (monads), it can be simply explained as taking a function and binding argument values to one or more of its parameters, resulting in a new function.
Function argument size in computer science circles is described as its &lt;a href="http://en.wikipedia.org/wiki/Arity" rel="external noopener" target="_blank">arity&lt;/a>, and through this process we are reducing the arity based on the partial application call.
Discussion of partial application typically brings up the related topic of &lt;a href="http://en.wikipedia.org/wiki/Currying" rel="external noopener" target="_blank">currying&lt;/a>, which follows the stricter rule of transforming a multiple-argument function into a chain of single-argument calls.
This is useful as it helps simplify the study of functions in theoretical computer science, such as lambda calculus.
Currying, however, is not that useful in general-purpose languages, unlike Haskell which, at its core, only supports the mathematical notion of single-argument functions.
Using a combination of syntactic sugar and currying, the language is able to give the misguided impression of multi-argument calls, when in fact it is just a chain of single-argument curried calls.&lt;/p></description></item><item><title>Implementing a Queue in Java using Arrays and Linked Lists</title><link>https://eddmann.com/posts/implementing-a-queue-in-java-using-arrays-and-linked-lists/</link><pubDate>Tue, 24 Dec 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/implementing-a-queue-in-java-using-arrays-and-linked-lists/</guid><description>&lt;p>Following on from my previous post on implementing a &lt;a href="https://eddmann.com/posts/implementing-a-stack-in-java-using-arrays-and-linked-lists/">stack&lt;/a> in Java, I now wish to discuss the equally important queue data structure.
Similar to the restrictions placed upon the stack implementation, the queue only allows mutation via two methods.
Addition (enqueue) occurs at the end of the collection, and removal (dequeue) from the beginning, resulting in a FIFO (First-In-First-Out) structure.
Queues are typically used as buffers to store data, objects, and events that are to be held for future sequential processing.
As discussed in the post on stacks, you are more than likely never going to have to implement such a data structure in practical use cases, as the language libraries will already include such an implementation (i.e. &lt;a href="http://www.cplusplus.com/reference/queue/queue/" rel="external noopener" target="_blank">C++ STL&lt;/a> and &lt;a href="http://www.php.net/manual/en/class.splqueue.php" rel="external noopener" target="_blank">PHP SplQueue&lt;/a>).&lt;/p></description></item><item><title>Shunting Yard Implementation in Java</title><link>https://eddmann.com/posts/shunting-yard-implementation-in-java/</link><pubDate>Mon, 23 Dec 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/shunting-yard-implementation-in-java/</guid><description>&lt;p>The Shunting Yard algorithm was developed by the great &lt;a href="http://en.wikipedia.org/wiki/Edsger_Dijkstra" rel="external noopener" target="_blank">Edsger Dijkstra&lt;/a> as a means to parse an infix mathematical expression into Reverse Polish notation (postfix).
Using this notation allows the computer to evaluate the expression in a simple stack-based form, &lt;a href="https://eddmann.com/posts/reverse-polish-notation-rpn-in-scala/">examples&lt;/a> of which I have shown in Scala previously.
The algorithm itself also uses a stack along with a built-up output string to create the resulting value.
Below is an example implementation which only takes into consideration brackets and the four common operator precedences.
Although it is possible to evaluate more, including functions and associativity, I decided to keep the implementation simple to better highlight the process.&lt;/p></description></item><item><title>Implementing a Stack in Java using Arrays and Linked Lists</title><link>https://eddmann.com/posts/implementing-a-stack-in-java-using-arrays-and-linked-lists/</link><pubDate>Sun, 22 Dec 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/implementing-a-stack-in-java-using-arrays-and-linked-lists/</guid><description>&lt;p>The stack is a fundamental data structure used extensively in algorithm design and program implementation.
At an abstract level, it can be described very simply, as it only allows for the addition (pushing) of new elements and the removal (popping) of existing elements from the top of the stack.
This description can be abbreviated to LIFO, which stands for Last-In-First-Out.
Although you will most likely not have to implement such a structure for practical use cases, it can be very useful to &amp;rsquo;look under the hood&amp;rsquo; to gain a better understanding of what is going on.
Doing so will make you more aware of when this data structure can be best used.&lt;/p></description></item><item><title>Uploading Podcast Audio to YouTube</title><link>https://eddmann.com/posts/uploading-podcast-audio-to-youtube/</link><pubDate>Sun, 22 Dec 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/uploading-podcast-audio-to-youtube/</guid><description>&lt;p>Unfortunately, YouTube does not provide you with the ability to upload audio tracks individually, which can be inconvenient if you do not work with video (such as a podcast).
The way to get around this limitation is to create a video which includes the desired audio track and a fixed image (i.e. cover art) which lasts the duration of the track.
There are many ways of achieving such a result, from iMovie and Windows Movie Maker to the online service &lt;a href="http://www.tunestotube.com/" rel="external noopener" target="_blank">TunesToTube&lt;/a>.
With a little &lt;a href="https://trac.ffmpeg.org/wiki/Encode/YouTube" rel="external noopener" target="_blank">research&lt;/a>, however, I was able to come up with an even simpler solution that only requires the ever-useful &lt;a href="http://www.ffmpeg.org" rel="external noopener" target="_blank">ffmpeg&lt;/a>.&lt;/p></description></item><item><title>Processing Apache and Nginx Access Logs</title><link>https://eddmann.com/posts/processing-apache-and-nginx-access-logs/</link><pubDate>Sat, 21 Dec 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/processing-apache-and-nginx-access-logs/</guid><description>&lt;p>Tools such as &lt;a href="http://awstats.sourceforge.net/" rel="external noopener" target="_blank">AWStats&lt;/a> and &lt;a href="http://code.google.com/p/logstalgia/" rel="external noopener" target="_blank">Logstalgia&lt;/a> are great, but sometimes they can be overkill for the problem we are trying to solve.
It turns out that with a couple of simple Unix commands we can gather a lot of useful information from the data stored in the access logs.
Both Apache and Nginx by default use the &lt;a href="http://httpd.apache.org/docs/1.3/logs.html#combined" rel="external noopener" target="_blank">combined&lt;/a> log format, which I will be basing this post&amp;rsquo;s examples on.
Below are two different methods of accessing either an uncompressed single file or multiple compressed files (following the supplied wild-card pattern).&lt;/p></description></item><item><title>Using Bit Flags and EnumSets in Java</title><link>https://eddmann.com/posts/using-bit-flags-and-enumsets-in-java/</link><pubDate>Fri, 20 Dec 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/using-bit-flags-and-enumsets-in-java/</guid><description>&lt;p>This post examines two popular methods for handling multiple boolean values in Java.
It explores the traditional approach of using bit flags and compares it with the more modern EnumSet implementation.
By analysing both techniques, you will gain insights into their performance, readability, and type safety.&lt;/p></description></item><item><title>Decimal to Hexadecimal using Bitwise, Bit Shift Operations in Java</title><link>https://eddmann.com/posts/decimal-to-hexadecimal-using-bitwise-bit-shift-operations-in-java/</link><pubDate>Wed, 18 Dec 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/decimal-to-hexadecimal-using-bitwise-bit-shift-operations-in-java/</guid><description>&lt;p>I recently wanted to create a simple function in JavaScript which allowed me to generate a random background colour for a small &lt;a href="http://workshop.eddmann.com/copacabana/" rel="external noopener" target="_blank">experiment&lt;/a> I was working on.
The implementation I came up with worked very well, but the decimal-hexadecimal representation conversion was all wrapped up in one &lt;code>toString(16)&lt;/code> function call.
I was very interested in creating this method myself, and I decided to use the Java language for the attempt.
The discussed functionality is already present in the Java language, within the &lt;code>java.lang.Integer&lt;/code> class, as &lt;code>toHexString&lt;/code>.&lt;/p></description></item><item><title>Reverse Polish Notation (RPN) in Scala</title><link>https://eddmann.com/posts/reverse-polish-notation-rpn-in-scala/</link><pubDate>Sun, 15 Dec 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/reverse-polish-notation-rpn-in-scala/</guid><description>&lt;p>Continuing on with my exploration of the Scala language, I decided to solve the widely documented problem of evaluating a mathematical &lt;a href="http://en.wikipedia.org/wiki/Reverse_Polish_Notation" rel="external noopener" target="_blank">Reverse Polish notation&lt;/a> string.
Popularised by its use in the &lt;a href="http://en.wikipedia.org/wiki/HP-10C_series" rel="external noopener" target="_blank">HP-10C&lt;/a> series of calculators from the 1980s, the notation requires that every operator follow its operands (otherwise called postfix notation).&lt;/p></description></item><item><title>Changing the Timestamp of a Previous Git Commit</title><link>https://eddmann.com/posts/changing-the-timestamp-of-a-previous-git-commit/</link><pubDate>Sat, 14 Dec 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/changing-the-timestamp-of-a-previous-git-commit/</guid><description>&lt;p>Git has two different types of timestamp associated with a commit.
Although both typically hold the same value, they are used in subtly different ways.
The author (GIT_AUTHOR_DATE) is the user who originally created the work (i.e. a patch), whereas the committer (GIT_COMMITTER_DATE) is the user who last applied the work (i.e. applied patch or rebase).
The author date is the one displayed when the log is accessed.
However, the commit date is used when applying the &lt;code>--since&lt;/code> and &lt;code>--until&lt;/code> filter options, which seems a little odd.
To avoid confusion, you can include the committer date within your log display by setting the &lt;code>--format&lt;/code> option.&lt;/p></description></item><item><title>Configuring SSH Public Key Authentication on CentOS 6.4</title><link>https://eddmann.com/posts/configuring-ssh-public-key-authentication-on-centos-6-4/</link><pubDate>Thu, 12 Dec 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/configuring-ssh-public-key-authentication-on-centos-6-4/</guid><description>&lt;p>Having to use password authentication each time you wish to access your server can be a serious pain.
Not only does it require extra keystrokes, it is also less secure and far more susceptible to successful brute-force attacks.&lt;/p></description></item><item><title>Using For-Comprehensions in Scala</title><link>https://eddmann.com/posts/using-for-comprehensions-in-scala/</link><pubDate>Wed, 11 Dec 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/using-for-comprehensions-in-scala/</guid><description>&lt;p>Scala can be a very deceptive language, as type inference is a good example of this.
Another less understood example that you will soon be introduced to upon closer exploration of the language is the &amp;lsquo;for-comprehension&amp;rsquo;.
The first point I wish to highlight is that in Scala everything is an expression which returns a value, even if this be Unit (which is equivalent to nothing).
This is a fundamental design principle of Scala which allows for productive use of its functional nature.
In an imperative manner, for example, we have become very accustomed to declaring and assigning a default value, only to reassign it with another if a condition is met on the next line.
Due to the expressive nature of the language, this can instead be condensed into one line, immutably and as a result is less prone to error.&lt;/p></description></item><item><title>Open external links in a new window using JavaScript</title><link>https://eddmann.com/posts/open-external-links-in-a-new-window-using-javascript/</link><pubDate>Mon, 09 Dec 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/open-external-links-in-a-new-window-using-javascript/</guid><description>&lt;p>It is good practise to open external links in a new window.
However, it can be a bit tedious to remember to include &lt;code>target=&amp;quot;_blank&amp;quot;&lt;/code>, especially in Markdown.
To get around this, I have incorporated a simple raw JavaScript solution, which can be found below.&lt;/p></description></item><item><title>Simple Function Driven-Development</title><link>https://eddmann.com/posts/simple-function-driven-development/</link><pubDate>Mon, 09 Dec 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/simple-function-driven-development/</guid><description>&lt;p>I recently had the chance to rewrite the backend of my &lt;a href="http://github.com/eddmann/eddmann" rel="external noopener" target="_blank">personal website&lt;/a>.
I was surprised at how accustomed I had become to using heavy-weight web frameworks (with plenty of accompanying dependencies) in larger projects I am involved in, that I instead decided to do the complete opposite.
As a result, I built a very simple single-page Markdown file-based blogging platform (inc. pagination, caching) that only takes a few moments to read.
I find myself sometimes being blinded by the need to abstract everything with the object-oriented philosophy, never taking the time to consider that in many cases it pays off to keep things simple.
Simple, single-purpose functions that can be used for multiple use-cases within your application are a very good mind-set to try and incorporate.
In this post I wish to discuss a couple of the functions that I created to keep the file so simple.&lt;/p></description></item><item><title>Twitter API v1.1 User Timeline JavaScript Solution</title><link>https://eddmann.com/posts/twitter-api-v-1-1-user-timeline-javascript-solution/</link><pubDate>Thu, 05 Dec 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/twitter-api-v-1-1-user-timeline-javascript-solution/</guid><description>&lt;p>When I redesigned my site earlier this year I wanted to include the last couple of Twitter interactions in the footer.
Using v1.0 of the Twitter API, this was a very simple process, giving access to a JSONP response with the publicly available tweets of a specified handle.
This all &lt;a href="http://dev.twitter.com/discussions/11564" rel="external noopener" target="_blank">changed&lt;/a> in v1.1 with the introduction of required OAuth.
Fortunately, I was able to find a workaround &lt;a href="http://jasonmayes.com/projects/twitterApi/" rel="external noopener" target="_blank">here&lt;/a> which took advantage of the response made available from a widget you create.
However, the returned tweets in this solution were already styled somewhat and I could not find an unminified version of the source.
So in the end I decided to spend 45 minutes last night implementing my own solution.&lt;/p></description></item><item><title>Solving the k-combinations problem in Scala</title><link>https://eddmann.com/posts/solving-the-k-combinations-problem-in-scala/</link><pubDate>Tue, 03 Dec 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/solving-the-k-combinations-problem-in-scala/</guid><description>&lt;p>More often than not there are many different ways to solve a particular task.
I encountered this trait when coding a solution to the k-combinations (N-choose-k) problem.
A &lt;a href="http://en.wikipedia.org/wiki/Combination" rel="external noopener" target="_blank">combination&lt;/a> is the action of selecting a set number of elements from a larger group, where order is not considered (unlike a &lt;a href="http://en.wikipedia.org/wiki/Permutation" rel="external noopener" target="_blank">permutation&lt;/a>).
An example of a combination is in the cards you are dealt in a poker hand - from the possible 52 cards, you are dealt 5 (52 choose 5).
We can calculate the unique hand offerings in many different ways, allowing us to predict how likely it is for an individual card to be dealt.
In this post, I will show examples of solving the 10 choose 2 problem.&lt;/p></description></item><item><title>Merge sort in Scala using Tail-recursion and Streams</title><link>https://eddmann.com/posts/merge-sort-in-scala-using-tail-recursion-and-streams/</link><pubDate>Sun, 01 Dec 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/merge-sort-in-scala-using-tail-recursion-and-streams/</guid><description>&lt;p>In a previous &lt;a href="https://eddmann.com/posts/merge-sort-comparison-in-java-and-scala/">post&lt;/a> I made a rudimentary comparison of Java and Scala using the &lt;a href="http://en.wikipedia.org/wiki/Merge_sort" rel="external noopener" target="_blank">Merge sort&lt;/a> algorithm as a case study.
There I described a trivial Scala implementation which did not take into consideration tail recursion, resulting in an unavoidable stack overflow when faced with a sufficiently sized list.
In this post I wish to describe two very different implementations that resolve this glaring omission.&lt;/p></description></item><item><title>Installing Nginx/Apache, MySQL, PHP 5.5 (LAMP) stack on CentOS 6.4</title><link>https://eddmann.com/posts/installing-nginx-apache-mysql-php-5-5-lamp-stack-on-cent-os-6-4/</link><pubDate>Fri, 29 Nov 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/installing-nginx-apache-mysql-php-5-5-lamp-stack-on-cent-os-6-4/</guid><description>&lt;p>With the widespread appeal and flexibility of an &lt;a href="http://en.wikipedia.org/wiki/Virtual_private_server" rel="external noopener" target="_blank">VPS&lt;/a> and &lt;a href="http://www.vagrantup.com/" rel="external noopener" target="_blank">Vagrant&lt;/a>, a shift from mere FTP access to setting up a fresh installation from scratch has taken effect.
Tools like &lt;a href="http://puppetlabs.com/" rel="external noopener" target="_blank">Puppet&lt;/a> and &lt;a href="http://www.opscode.com/chef/" rel="external noopener" target="_blank">Chef&lt;/a> are great for certain use-cases (i.e. large deployments, dev-ops teams), but starting with the terminal is your best friend.
In this post I will take you through the process of setting up a trivial LAMP stack on CentOS 6.4, with the option to use either &lt;a href="http://httpd.apache.org/" rel="external noopener" target="_blank">Apache&lt;/a> or &lt;a href="http://nginx.com/" rel="external noopener" target="_blank">Nginx&lt;/a>.
Both will take advantage of the features PHP-FPM provides you, via FastCGI.&lt;/p></description></item><item><title>Coalescing Operation in PHP (for Default Values)</title><link>https://eddmann.com/posts/coalescing-operation-in-php/</link><pubDate>Thu, 28 Nov 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/coalescing-operation-in-php/</guid><description>&lt;p>Over the past week or so, I have been reading discussions on the &lt;a href="http://news.php.net/php.internals" rel="external noopener" target="_blank">PHP internals&lt;/a> mailing list about proposed updates to what the ?: operator currently does.
If you are like me, you may not have even known that you could use the ternary operator (since 5.3) as a coalescing operator.&lt;/p></description></item><item><title>Merge sort comparison in Java and Scala</title><link>https://eddmann.com/posts/merge-sort-comparison-in-java-and-scala/</link><pubDate>Wed, 27 Nov 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/merge-sort-comparison-in-java-and-scala/</guid><description>&lt;p>Having only just recently got a complete shot of functional goodness in the form of the &lt;a href="http://www.coursera.org/course/progfun" rel="external noopener" target="_blank">Functional Programming Principles in Scala&lt;/a> &lt;a href="http://en.wikipedia.org/wiki/Massive_open_online_course" rel="external noopener" target="_blank">MOOC&lt;/a>, my imperative standing is in a state of confusion.
Is mutability the devil, should every function not have side-effects, what really is a monad?
Okay, so I may be joking a little with these semi-rhetorical remarks - boy, have I read enough monad posts for a lifetime.
Added to the mainstream application design consensus, the functional paradigm is making inroads out of multi-core necessity (goodbye &lt;a href="http://en.wikipedia.org/wiki/Moore%27s_law" rel="external noopener" target="_blank">Moore&amp;rsquo;s law&lt;/a>).&lt;/p></description></item><item><title>Personal Git Server with Gitolite</title><link>https://eddmann.com/posts/personal-git-server-with-gitolite/</link><pubDate>Mon, 25 Nov 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/personal-git-server-with-gitolite/</guid><description>&lt;p>Github and Bitbucket are great, however, there may come a time when you wish to set up a personal Git server.
There are many reasons for this, you may legally not be permitted to host the repository externally, or you want to have more control over access privileges.
&lt;a href="http://gitolite.com/gitolite/index.html" rel="external noopener" target="_blank">Gitolite&lt;/a> is here to help remedy this desire, allowing you to simply set up Git hosting on a central server with fine-grained access control capabilities.&lt;/p></description></item><item><title>Accessing PHP documentation using 'pman'</title><link>https://eddmann.com/posts/accessing-php-documentation-using-pman/</link><pubDate>Tue, 11 Sep 2012 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/accessing-php-documentation-using-pman/</guid><description>&lt;p>PHP has a ridiculous amount of in-built functions.
Even though I code in it daily, I am still surprised to find a new one.
It was not until recently that I discovered &lt;code>strip_tags&lt;/code>, which saved me an ample amount of time that I would have spent writing my own implementation.
My philosophy now is that if there is a function you require, PHP most likely already has it.&lt;/p></description></item><item><title>An alternative to 'var_dump' in PHP</title><link>https://eddmann.com/posts/an-alternative-to-var-dump-in-php/</link><pubDate>Mon, 10 Sep 2012 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/an-alternative-to-var-dump-in-php/</guid><description>&lt;p>Whilst working with PHP, I seem to use &lt;code>var_dump&lt;/code> a ridiculous amount.
It&amp;rsquo;s a debugging must-have.
However, it does fall short in a few ways.
It does not take into consideration that the function is almost always displayed on an HTML page, and switching to the page source can be troublesome.
Due to these pitfalls, a host of projects such as &lt;a href="http://krumo.sourceforge.net/" rel="external noopener" target="_blank">Krumo&lt;/a> and &lt;a href="http://raveren.github.io/kint/" rel="external noopener" target="_blank">Kint&lt;/a> have emerged to cater for these needs.
In addition to these projects, if you have &lt;a href="http://xdebug.org/" rel="external noopener" target="_blank">XDebug&lt;/a> installed, it will replace the default &lt;code>var_dump&lt;/code> function with its own implementation that outputs the information with much-needed styling.&lt;/p></description></item><item><title>Making Gitflow the way you want it to</title><link>https://eddmann.com/posts/making-gitflow-the-way-you-want-it-to/</link><pubDate>Sun, 26 Aug 2012 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/making-gitflow-the-way-you-want-it-to/</guid><description>&lt;p>I have been a part-time Git user for a little over a year now.
Before this, I had dabbled with using &lt;a href="http://subversion.apache.org/" rel="external noopener" target="_blank">Subversion&lt;/a> but never for anything too serious.
I say &amp;lsquo;part-time&amp;rsquo; because, throughout the year, I never fully got to grips with all the ideologies and tools available to support my development lifecycle process.
This was particularly evident with regard to branching.&lt;/p></description></item><item><title>Complete MAMP Setup with PHP 5.5</title><link>https://eddmann.com/posts/complete-mamp-setup-with-php-5-5/</link><pubDate>Sun, 08 Jul 2012 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/complete-mamp-setup-with-php-5-5/</guid><description>&lt;p>I have been a loyal &lt;a href="http://www.mamp.info/en/mamp-pro/" rel="external noopener" target="_blank">MAMP Pro&lt;/a> user for many years.
I fell in love with how easy it was to set up custom hosts, without the need to tweak the hosts file myself.
However, ever since I documented my &lt;a href="https://eddmann.com/posts/dnsmasq-your-local-development-dns/">experiences&lt;/a> with DNSMasq, I have been interested in how &lt;a href="http://davidwinter.me/articles/2011/06/18/simple-local-web-development-with-apache-and-dnsmasq/" rel="external noopener" target="_blank">this&lt;/a> post documented setting up a web stack with Apache, similar to Ruby&amp;rsquo;s &lt;a href="http://pow.cx/" rel="external noopener" target="_blank">Pow&lt;/a>.
The ability to set up a new development site with only the creation of a new folder (i.e. a folder called test could be accessible at test.dev) appealed to me greatly.&lt;/p></description></item><item><title>PHPass, the go-to password hashing library</title><link>https://eddmann.com/posts/phpass-the-go-to-password-hashing-library/</link><pubDate>Thu, 28 Jun 2012 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/phpass-the-go-to-password-hashing-library/</guid><description>&lt;p>It is becoming a scarily common occurrence to read about &lt;a href="http://www.guardian.co.uk/technology/us-news-blog/2012/jun/07/blogpost-eharmony-linkedin-hacked-leaked" rel="external noopener" target="_blank">yet&lt;/a> &lt;a href="http://www.bbc.co.uk/news/technology-18338956" rel="external noopener" target="_blank">another&lt;/a> &lt;a href="http://www.pcworld.com/article/257178/music_site_lastfm_joins_the_passwordleak_parade.html" rel="external noopener" target="_blank">batch&lt;/a> of high-profile websites&amp;rsquo; users&amp;rsquo; passwords being leaked online - for everyone&amp;rsquo;s cracking pleasure.
What&amp;rsquo;s even more shocking is how poorly these sites are storing them.
In the case of LinkedIn, it turned out that they had stored them as unsalted, plain MD5 hashes, which any Joe Bloggs could easily crack using a rainbow table.
The tried and tested means of storing passwords in today&amp;rsquo;s web applications is to create a hash from the user&amp;rsquo;s input, and then compare any attempted authentication with this stored value.
The trouble and confusion arise, however, in how to actually achieve this, as there are so many incorrect methods available.&lt;/p></description></item><item><title>Database Migrations with CodeIgniter</title><link>https://eddmann.com/posts/database-migrations-with-codeigniter/</link><pubDate>Fri, 08 Jun 2012 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/database-migrations-with-codeigniter/</guid><description>&lt;p>I first became aware of database migrations a few years ago when I was exploring the world of &lt;a href="http://rubyonrails.org/" rel="external noopener" target="_blank">Rails&lt;/a>.
However, I have only recently used them again, prompted by a gentle nudge from SE-Radio (&lt;a href="http://www.se-radio.net/2012/06/episode-186-martin-fowler-and-pramod-sadalage-on-agile-database-development/" rel="external noopener" target="_blank">Episode 186&lt;/a>) and a large web application build which re-introduced them into my development lifecycle.
Due to current events, I, for one, do not wish to see them go any time soon.&lt;/p></description></item><item><title>DNSMasq, your local development DNS</title><link>https://eddmann.com/posts/dnsmasq-your-local-development-dns/</link><pubDate>Tue, 15 May 2012 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/dnsmasq-your-local-development-dns/</guid><description>&lt;p>Setting up a single-user web development environment is easy.
One-click (OS)AMP installers do all the work and store internal domains in an easily accessible host file.
However, expanding this to a multi-user development team, all of whom need access to the same resources, is a completely different challenge.
Moreover, they may require access from multiple devices, some of which do not have a host file, such as mobile phones.&lt;/p></description></item><item><title>IE6, IE7 &amp; IE8, meet VMWare Fusion</title><link>https://eddmann.com/posts/ie6-ie7-ie8-meet-vmware-fusion/</link><pubDate>Sat, 31 Mar 2012 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/ie6-ie7-ie8-meet-vmware-fusion/</guid><description>&lt;p>Unfortunately, as a web developer, you will undoubtedly encounter the need to support one (or more) of the three browsers mentioned in this article&amp;rsquo;s title.
It is a sad but true state we are in, and making it as seamless as possible goes some way in taking the sting out of it.&lt;/p></description></item><item><title>Sphinx, up and running</title><link>https://eddmann.com/posts/sphinx-up-and-running/</link><pubDate>Sat, 10 Mar 2012 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/sphinx-up-and-running/</guid><description>&lt;p>Sphinx (&lt;em>SQL Phrase Index&lt;/em>) is an open-source, full-text search engine, independent of any one data store implementation.
The origin of the data does not concern Sphinx, as interaction with the data source is abstracted by the many drivers available.
Currently, built-in to the product are drivers for MySQL, PostgreSQL, ODBC-compliant databases and the ability to parse XML-formatted streams (via pipes).
It must be noted, however, that each data record is required to have a single unique field ID.&lt;/p></description></item><item><title>Ten ways to reverse a string in JavaScript</title><link>https://eddmann.com/posts/ten-ways-to-reverse-a-string-in-javascript/</link><pubDate>Mon, 31 Oct 2011 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/ten-ways-to-reverse-a-string-in-javascript/</guid><description>&lt;p>In a recent job interview, I was asked to write a simple C# function that would reverse a string and return the result.
However, there was a catch: I was unable to use the provided string object&amp;rsquo;s &lt;code>reverse()&lt;/code> function.
I successfully created a function that did as requested (using a decrementing for-loop and concatenation), though I realised that using concatenation would result in a new string being created in memory upon each iteration, as strings are immutable objects.
I solved this by using a &lt;code>StringBuilder&lt;/code> to append each character and then returning the result.
On the way home, I began to think of the endless ways in which you could reverse a string in code (extremely sad, I know).&lt;/p></description></item><item><title>LaTeX, an Introduction</title><link>https://eddmann.com/posts/latex-an-introduction/</link><pubDate>Mon, 10 Oct 2011 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/latex-an-introduction/</guid><description>&lt;p>LaTeX (pronounced &lt;em>lay-tech&lt;/em>) is a document preparation system that provides high-quality typesetting using the &lt;a href="http://en.wikipedia.org/wiki/WYSIWYM" rel="external noopener" target="_blank">WYSIWYM&lt;/a> ideology.
Based on Donald E. Knuth&amp;rsquo;s &lt;a href="http://en.wikipedia.org/wiki/TeX" rel="external noopener" target="_blank">TeX&lt;/a> typesetting language, LaTeX was developed in 1985 by Leslie Lamport and has become a staple in academia.
It has also become the required text processing language for many periodicals.&lt;/p></description></item></channel></rss>