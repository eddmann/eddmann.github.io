<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Fargate on Edd Mann</title><link>https://eddmann.com/archive/tag/fargate/</link><description>Recent content in Fargate on Edd Mann</description><generator>Hugo</generator><language>en-GB</language><lastBuildDate>Wed, 16 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://eddmann.com/archive/tag/fargate/index.xml" rel="self" type="application/rss+xml"/><item><title>Managing long-running AWS Fargate ECS tasks within your Serverless project</title><link>https://eddmann.com/posts/managing-long-running-aws-fargate-ecs-tasks-within-your-serverless-project/</link><pubDate>Wed, 16 Mar 2022 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/managing-long-running-aws-fargate-ecs-tasks-within-your-serverless-project/</guid><description>&lt;p>I am a big proponent of the Serverless movement.
The ability to concentrate efforts on only the code and infrastructure concerns that directly add business value is very powerful.
Function-as-a-Service (FaaS) offerings like AWS Lambda impose limitations that help in designing more fault-tolerant and scalable systems, leaning towards event-driven architectures.
However, there are times when we need to execute behaviour that exceeds common FaaS duration limits (i.e. AWS Lambda&amp;rsquo;s 15-minute limit).
In this case, we ideally do not want to resort to a lower level of compute (i.e. a VPS such as EC2), but instead, be able to define and run such behaviour alongside our FaaS counterparts.
In this post, I would like to discuss a &lt;a href="https://github.com/eddmann/serverless-fargate" rel="external noopener" target="_blank">Serverless Framework plugin&lt;/a> I have written, which aids in bridging this gap by way of ECS and &lt;a href="https://aws.amazon.com/fargate/" rel="external noopener" target="_blank">AWS Fargate&lt;/a>.&lt;/p></description></item></channel></rss>