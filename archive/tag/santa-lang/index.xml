<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Santa-Lang on Edd Mann</title><link>https://eddmann.com/archive/tag/santa-lang/</link><description>Recent content in Santa-Lang on Edd Mann</description><generator>Hugo</generator><language>en-GB</language><lastBuildDate>Tue, 08 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://eddmann.com/archive/tag/santa-lang/index.xml" rel="self" type="application/rss+xml"/><item><title>Rewriting the santa-lang Interpreter in Rust, Part 4 - Distribution</title><link>https://eddmann.com/posts/rewriting-the-santa-lang-interpreter-in-rust-part-4-distribution/</link><pubDate>Tue, 08 Aug 2023 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/rewriting-the-santa-lang-interpreter-in-rust-part-4-distribution/</guid><description>&lt;p>Now that the interpreter&amp;rsquo;s performance concerns had been addressed, it was time to decide how each of the available runtimes would be packaged and distributed.
In the final post within the &lt;a href="https://eddmann.com/archive/tag/santa-lang-in-rust-series">series&lt;/a>, I will document how the language and runtimes were built, tested, and distributed using a custom CI/CD pipeline.&lt;/p></description></item><item><title>Rewriting the santa-lang Interpreter in Rust, Part 3 - Performance</title><link>https://eddmann.com/posts/rewriting-the-santa-lang-interpreter-in-rust-part-3-performance/</link><pubDate>Mon, 07 Aug 2023 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/rewriting-the-santa-lang-interpreter-in-rust-part-3-performance/</guid><description>&lt;p>Now that we have discussed building the core language and desired runtimes, it is time to highlight one of the biggest reasons why I decided to rewrite the interpreter in a lower-level systems language - performance!
In this post, I will document how I went about benchmarking the two implementations (TypeScript/Node and Rust), greatly improving performance and highlighting interesting findings along the way.&lt;/p></description></item><item><title>Rewriting the santa-lang Interpreter in Rust, Part 2 - Runtimes</title><link>https://eddmann.com/posts/rewriting-the-santa-lang-interpreter-in-rust-part-2-runtimes/</link><pubDate>Sun, 06 Aug 2023 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/rewriting-the-santa-lang-interpreter-in-rust-part-2-runtimes/</guid><description>&lt;p>With the &lt;a href="https://eddmann.com/posts/rewriting-the-santa-lang-interpreter-in-rust-part-1-implementing-the-core/">core language library&lt;/a> now written, I could go about building the desired (delivery) runtimes.
In this post within the &lt;a href="https://eddmann.com/archive/tag/santa-lang-in-rust-series">series&lt;/a>, I will delve into my experience integrating the core language library with these chosen runtimes, documenting some of the challenges that I faced along the way.&lt;/p></description></item><item><title>Rewriting the santa-lang Interpreter in Rust, Part 1 - Implementing the Core</title><link>https://eddmann.com/posts/rewriting-the-santa-lang-interpreter-in-rust-part-1-implementing-the-core/</link><pubDate>Sat, 05 Aug 2023 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/rewriting-the-santa-lang-interpreter-in-rust-part-1-implementing-the-core/</guid><description>&lt;p>After implementing santa-lang in &lt;a href="https://eddmann.com/posts/designing-santa-lang-a-language-for-solving-advent-of-code-puzzles/">TypeScript (Node)&lt;/a>, I wanted to explore rewriting the tree-walking interpreter in a lower-level systems language for efficiency and performance gains.
My goal was to be able to run the entire &lt;a href="https://adventofcode.com/2022" rel="external noopener" target="_blank">Advent of Code 2022 calendar&lt;/a> &lt;em>quicker&lt;/em> than the Node variant.
I settled on using Rust due to its blend of high and low-level constructs, its vibrant package registry (Cargo), memory management model, and previous &lt;a href="https://eddmann.com/posts/building-a-rubik-cube-solver-using-rust-wasm-threejs-and-react/">enjoyable experience using the language&lt;/a>.
In this first post within the &lt;a href="https://eddmann.com/archive/tag/santa-lang-in-rust-series">series&lt;/a>, I will document how I went about organising the project and rewriting the core language within Rust.&lt;/p></description></item><item><title>Solving the Advent of Code 2022 calendar using my own programming language, santa-lang</title><link>https://eddmann.com/posts/solving-the-advent-of-code-2022-calendar-using-my-own-programming-language-santa-lang/</link><pubDate>Sat, 28 Jan 2023 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/solving-the-advent-of-code-2022-calendar-using-my-own-programming-language-santa-lang/</guid><description>&lt;p>December has come and gone, and the dust has settled on completing the Advent of Code 2022 calendar.
As highlighted in my &lt;a href="https://eddmann.com/posts/designing-santa-lang-a-language-for-solving-advent-of-code-puzzles/">previous post&lt;/a>, I wanted to complete this year&amp;rsquo;s puzzles using my own programming language, santa-lang, which I have tailored to help aid in solving such problems.
In this post, I want to discuss this experience, how the language aided in solution development, and where additions or changes were made to improve it along the way.&lt;/p></description></item><item><title>Designing santa-lang, a language for solving Advent of Code puzzles</title><link>https://eddmann.com/posts/designing-santa-lang-a-language-for-solving-advent-of-code-puzzles/</link><pubDate>Wed, 30 Nov 2022 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/designing-santa-lang-a-language-for-solving-advent-of-code-puzzles/</guid><description>&lt;p>Over the past several years, I have been slowly working &lt;a href="https://github.com/eddmann/advent-of-code/tree/master/2015" rel="external noopener" target="_blank">my&lt;/a> &lt;a href="https://github.com/eddmann/advent-of-code/tree/master/2016/python" rel="external noopener" target="_blank">way&lt;/a> &lt;a href="https://github.com/eddmann/advent-of-code/tree/master/2017/rust" rel="external noopener" target="_blank">through&lt;/a> the previous Advent of Code calendars.
For each calendar, I opt to solve the puzzles in a new programming language to familiarise myself with other ways of understanding and working.
However, there comes a time in each calendar when I grow to dislike some aspect of the language.
So I had an idea&amp;hellip; why not give this whole programming language design a go?
That way, if I grow to dislike the language, I only have myself to blame!&lt;/p></description></item><item><title>Allocating Secret Santas using an AWS Step Function workflow and every available Lambda runtime</title><link>https://eddmann.com/posts/allocating-secret-santas-using-an-aws-step-function-workflow-and-every-available-lambda-runtime/</link><pubDate>Tue, 01 Nov 2022 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/allocating-secret-santas-using-an-aws-step-function-workflow-and-every-available-lambda-runtime/</guid><description>&lt;p>Over the past several years, I have taken the opportunity of allocating Secret Santas for members of my family as an excuse to explore different &lt;a href="https://eddmann.com/posts/allocating-and-notifying-secret-santas-via-email-using-clojure/">programming languages&lt;/a> and &lt;a href="https://eddmann.com/posts/building-a-secret-santa-allocator-and-sms-sender-using-a-raspberry-pi-pico-micropython-and-sim800l-module/">technologies&lt;/a>.
This year has been no different, with me opting to &lt;em>over-engineer&lt;/em> the problem of allocating and notifying participants by diving into &lt;a href="https://aws.amazon.com/step-functions/" rel="external noopener" target="_blank">AWS Step Functions&lt;/a> and the many runtimes available on Lambda.
In this post, I wish to document how I went about designing the Step Function workflow and breaking up the problem into many specific-purpose Lambda behaviours.
The final implementation can be found in &lt;a href="https://github.com/eddmann/step-function-secret-santa" rel="external noopener" target="_blank">this GitHub repository&lt;/a>.&lt;/p></description></item></channel></rss>