<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Php on Edd Mann</title><link>https://eddmann.com/archive/tag/php/</link><description>Recent content in Php on Edd Mann</description><generator>Hugo</generator><language>en-GB</language><lastBuildDate>Fri, 30 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://eddmann.com/archive/tag/php/index.xml" rel="self" type="application/rss+xml"/><item><title>Building an F1 Picks Game in 4 Hours: It's Lights Out and Away We Go!</title><link>https://eddmann.com/posts/building-an-f1-picks-game-in-4-hours/</link><pubDate>Fri, 30 Aug 2024 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/building-an-f1-picks-game-in-4-hours/</guid><description>My family and I have been playing an Formula 1 prediction game for the 2024 season, sharing our picks via WhatsApp and tallying scores manually. Before the F1 summer break ended, I wanted to see how quickly I could build a platform to streamline this process online.</description></item><item><title>Deploying our Wedding Website onto a Raspberry Pi Kubernetes Cluster using K3s and Helm</title><link>https://eddmann.com/posts/deploying-our-wedding-website-onto-a-raspberry-pi-kubernetes-cluster-using-k3s-and-helm/</link><pubDate>Fri, 29 Apr 2022 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/deploying-our-wedding-website-onto-a-raspberry-pi-kubernetes-cluster-using-k3s-and-helm/</guid><description>&lt;p>Over the past couple of weeks, I have been considering how feasible it would be to deploy the &lt;a href="https://github.com/eddmann/our-wedding-website" rel="external noopener" target="_blank">wedding website&lt;/a> I released earlier this year on Kubernetes using a Raspberry Pi cluster.
After a little research, this past bank holiday weekend, I set myself the goal of building and deploying the web application on Kubernetes by the end of the Monday bank holiday!
In this post, I would like to discuss how I went about achieving this goal and what I learnt in the process.&lt;/p></description></item><item><title>Separating out the Lambda Bref runtime from your project's Composer dependencies</title><link>https://eddmann.com/posts/separating-out-the-lambda-bref-runtime-from-your-projects-composer-dependencies/</link><pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/separating-out-the-lambda-bref-runtime-from-your-projects-composer-dependencies/</guid><description>&lt;p>Having had great success using AWS Lambda within our insurance product (&lt;a href="https://mybuilder-plus.com/" rel="external noopener" target="_blank">MyBuilder Plus&lt;/a>), late last year we made the decision to move &lt;strong>all&lt;/strong> our web request traffic over to the platform!
However, we noticed when attempting to migrate over one application in particular, that we could not use the latest release of &lt;a href="https://bref.sh/" rel="external noopener" target="_blank">Bref&lt;/a> (the PHP runtime) due to a conflict between required Symfony &lt;a href="https://symfony.com/doc/current/components/process.html" rel="external noopener" target="_blank">Process component&lt;/a> versions.&lt;/p></description></item><item><title>Our Wedding Website, Three Years in the Making...</title><link>https://eddmann.com/posts/our-wedding-website-three-years-in-the-making/</link><pubDate>Fri, 28 Jan 2022 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/our-wedding-website-three-years-in-the-making/</guid><description>&lt;p>Like many developers, over-engineering personal projects in the spirit of learning is something I am well aware of doing.
So, when it came time to decide how we were going to collect RSVPs for our upcoming wedding, I already had ideas.
What resulted was a solution that follows DDD, CQRS, Hexagonal Architecture, Event Sourcing, and is deployed on AWS Lambda using PHP.&lt;/p></description></item><item><title>Managing Newlines and Unicode within JavaScript and PHP</title><link>https://eddmann.com/posts/managing-newlines-and-unicode-within-javascript-and-php/</link><pubDate>Thu, 22 Dec 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/managing-newlines-and-unicode-within-javascript-and-php/</guid><description>&lt;p>We were recently sent a tweet regarding a text-area client/server-side length validation not correlating.
After some detective work, we were able to find two issues that could have caused this to occur.
In this post, I wish to discuss our findings and how we resolved each issue.&lt;/p></description></item><item><title>Designing Immutable Concepts with Transient Mutation in PHP</title><link>https://eddmann.com/posts/designing-immutable-concepts-with-transient-mutation-in-php/</link><pubDate>Wed, 14 Dec 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/designing-immutable-concepts-with-transient-mutation-in-php/</guid><description>&lt;p>In a recent project, we found it beneficial to introduce the Money pattern.
There are many good &lt;a href="http://martinfowler.com/eaaCatalog/money.html" rel="external noopener" target="_blank">resources&lt;/a> on this pattern, so I will defer to those for further definition.
We decided that encapsulating this into an &lt;a href="http://hangar.runway7.net/punditry/immutability-value-objects" rel="external noopener" target="_blank">immutable value object&lt;/a> allowed for a cleaner API and removed the fear of unexpected mutation bugs.
However, we noticed a spike in memory and processor usage when performing many successive actions on such values, such as summation.&lt;/p></description></item><item><title>Managing Background Processes within Symfony</title><link>https://eddmann.com/posts/managing-background-processes-within-symfony/</link><pubDate>Thu, 01 Dec 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/managing-background-processes-within-symfony/</guid><description>&lt;p>When a web application reaches a sufficiently large size, it can become infeasible to perform all actions required within a single web request/response lifecycle.
You may find yourself wishing to, for example, batch up and send queued emails at particular intervals or process payments asynchronously to the point in time when the user made the initial request.
In this post, I would like to discuss our evolving use of background processes (both time-dependent and continuous) due to increasing throughput demands.&lt;/p></description></item><item><title>Using Constraint-based Ordering in PHP</title><link>https://eddmann.com/posts/using-constraint-based-ordering-in-php/</link><pubDate>Thu, 24 Nov 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/using-constraint-based-ordering-in-php/</guid><description>&lt;p>An interesting problem arose last week when we wished to generate a listing of recently completed jobs (along with their shortlist fees).
Upon reviewing some earlier attempts, we did not like the aesthetics present when many of a particular shortlist fee were clustered together (i.e. two or more adjacent jobs with the same shortlist fee).
What we were instead looking for was to create a constraint-based ordering that, when applied to the recently completed jobs, would give an even distribution of shortlist fees (data-set permitting).&lt;/p></description></item><item><title>An 'array_column' re-indexing trick in PHP</title><link>https://eddmann.com/posts/an-array-column-re-indexing-trick-in-php/</link><pubDate>Wed, 08 Jun 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/an-array-column-re-indexing-trick-in-php/</guid><description>&lt;p>The &lt;code>array_column&lt;/code> function has been a welcome addition to the PHP language, allowing us to remove the need for common-place &lt;code>array_map&lt;/code> invocations that simply pluck specific values from arrays.
However, I recently discovered that you can provide a third argument that allows you to define what the returning array&amp;rsquo;s keys will be.
This, combined with &lt;code>null&lt;/code> for the value argument, allows you to easily re-index an array based on a key value whilst maintaining the original array&amp;rsquo;s values and ordering.&lt;/p></description></item><item><title>Generating Podcast Stats in PHP</title><link>https://eddmann.com/posts/generating-podcast-stats-in-php/</link><pubDate>Tue, 07 Jun 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/generating-podcast-stats-in-php/</guid><description>&lt;p>In the &lt;a href="https://threedevsandamaybe.com/the-one-hundredth-episode/" rel="external noopener" target="_blank">100th episode&lt;/a> of &lt;em>Three Devs and a Maybe&lt;/em>, I decided to generate some stats relating to the previous 99 episodes and formed a small quiz out of these findings.
All information relating to each podcast is stored in separate Markdown files within YAML front-matter, which makes it easy to extract and process.
I thought it would be interesting to go over the code I used to achieve this.&lt;/p></description></item><item><title>Validating 32-bit Integers using PHP</title><link>https://eddmann.com/posts/validating-32-bit-integers-using-php/</link><pubDate>Tue, 19 Apr 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/validating-32-bit-integers-using-php/</guid><description>&lt;p>Last week, I was required to validate that a supplied integer would fit correctly into a 32-bit address space.
The available size of an integer within PHP is platform-dependent and could either be 32 or 64 bits based on the architecture you are using.
This function had to cater for these differences, and as such, I decided to explore a couple of different options for producing this validation.&lt;/p></description></item><item><title>Map-Filter Combination in PHP</title><link>https://eddmann.com/posts/map-filter-combination-in-php/</link><pubDate>Fri, 04 Mar 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/map-filter-combination-in-php/</guid><description>&lt;p>Following on from my discussion on &lt;a href="https://eddmann.com/posts/mapping-filtering-and-reducing-in-php/">Mapping, Filtering and Reducing in PHP&lt;/a>, over the past couple of months, I have been using a little trick I would like to discuss.
Although a &lt;code>map-filter&lt;/code> combination can be achieved in a single &lt;code>reduce&lt;/code>, while reading the PHP documentation, I found out that &lt;code>array_filter&lt;/code> supplied without a predicate function will remove all &lt;code>false&lt;/code> values from the collection.
This means that you can simply map over a collection and return &lt;code>false&lt;/code> if the desired predicate does not match - leaving the filter to do the clean-up.&lt;/p></description></item><item><title>Mapping, Filtering and Reducing in PHP</title><link>https://eddmann.com/posts/mapping-filtering-and-reducing-in-php/</link><pubDate>Wed, 02 Mar 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mapping-filtering-and-reducing-in-php/</guid><description>&lt;p>Over the past couple of years, I have transitioned from boilerplate-heavy, imperative code to using the more intuitive &lt;code>map&lt;/code>, &lt;code>filter&lt;/code>, and &lt;code>reduce&lt;/code> higher-order functions.
In this article, I hope to highlight the transformation that occurs, along with the simplification, when moving away from the imperative and onto the declarative.
We shall be performing a simple process that transforms a collection of user entries into a filtered collection of their names.
Although trivial in nature, it is a great way to highlight the power of the paradigm shift.&lt;/p></description></item><item><title>Handling Array Equality in PHP</title><link>https://eddmann.com/posts/handling-array-equality-in-php/</link><pubDate>Fri, 19 Feb 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/handling-array-equality-in-php/</guid><description>&lt;p>If you want to check if two arrays contain the same values, regardless of order, you will encounter some issues using the operators &lt;code>==&lt;/code> and &lt;code>===&lt;/code>.&lt;/p></description></item><item><title>Using Multiple Arrays with array_map in PHP</title><link>https://eddmann.com/posts/using-multiple-arrays-with-array-map-in-php/</link><pubDate>Thu, 28 Jan 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/using-multiple-arrays-with-array-map-in-php/</guid><description>&lt;p>Today, I stumbled upon some code that I did not realise was possible with the &lt;code>array_map&lt;/code> function in PHP.
You are able to supply multiple arrays, which in turn will get &amp;lsquo;zipped up&amp;rsquo; and passed to the supplied callback as parameters.
This allows for some rather elegant solutions to the &amp;lsquo;index issue&amp;rsquo; and accessing keys from within the callback - both of which are easily achieved in an imperative mindset.&lt;/p></description></item><item><title>Developing a Resizable-Indexed Array as a PHP Extension with Joe Watkins</title><link>https://eddmann.com/posts/developing-a-resizable-indexed-array-as-a-php-extension-with-joe-watkins/</link><pubDate>Fri, 28 Aug 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/developing-a-resizable-indexed-array-as-a-php-extension-with-joe-watkins/</guid><description>Following on from our first screencast, which touched upon how to set up a PHP extension development environment and the creation of a simple &lt;code>array_sum&lt;/code>-like function. We now further this topic by implementing a resizable-indexed array class which supplies very similar functionality to that of the &lt;code>SplFixedArray&lt;/code> class.</description></item><item><title>PHP Extension Development for Beginners with Joe Watkins</title><link>https://eddmann.com/posts/php-extension-development-for-beginners-with-joe-watkins/</link><pubDate>Mon, 03 Aug 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/php-extension-development-for-beginners-with-joe-watkins/</guid><description>In the very first screencast episode of Three Devs and a Maybe, I was fortunate to chat with PHP core developer Joe Watkins, discussing PHP 5 and 7 extension development for beginners.</description></item><item><title>Insertion, Removal and Inversion Operations on Binary (Search) Trees in PHP</title><link>https://eddmann.com/posts/insertion-removal-and-inversion-operations-on-binary-search-trees-in-php/</link><pubDate>Wed, 22 Jul 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/insertion-removal-and-inversion-operations-on-binary-search-trees-in-php/</guid><description>&lt;p>Recently Max Howell (creator of &lt;a href="http://brew.sh/" rel="external noopener" target="_blank">Homebrew&lt;/a>) posted an interesting &lt;a href="https://twitter.com/mxcl/status/608682016205344768" rel="external noopener" target="_blank">tweet&lt;/a> in regard to Google&amp;rsquo;s interview process.
In this tweet he mentioned how one of the proposed questions was to white-board a solution to invert a binary tree.
Over the past couple of years I have been interested in exploring fundamental computer science data structures and algorithms.
As a result, I thought it would be interesting to explore this structure and its associated operations in more depth - using immutable and mutable PHP implementations to clearly highlight the benefits garnered from each approach.&lt;/p></description></item><item><title>Managing Jenkins Project Builds and Configuration using PHP</title><link>https://eddmann.com/posts/managing-jenkins-project-builds-and-configuration-using-php/</link><pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/managing-jenkins-project-builds-and-configuration-using-php/</guid><description>&lt;p>Throughout project development we use Jenkins to provide meaningful test feedback on each Git push event.
These builds are required to gain sufficient confidence for merging into &lt;em>master&lt;/em> and subsequent deployment.
Each team member manages their own project with the current project/branch they are working on.
However, typically we find ourselves working on multiple branches throughout the day, and it can become cumbersome to update the project&amp;rsquo;s configuration.&lt;/p></description></item><item><title>Optional Value Control-flows in PHP using Traits and Magic-methods</title><link>https://eddmann.com/posts/optional-value-control-flows-in-php-using-traits-and-magic-methods/</link><pubDate>Wed, 10 Jun 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/optional-value-control-flows-in-php-using-traits-and-magic-methods/</guid><description>&lt;p>Recently, I have been interested in experimenting with different ways to handle optional values.
There are many examples that exist demonstrating the use of the Maybe/Optional structure within the PHP landscape.
I would instead like to focus my attention on only looking into the concept of &lt;code>orElse&lt;/code>, which I have found to be a prominent control-flow when using these types of values.&lt;/p></description></item><item><title>Implementing Streams in PHP</title><link>https://eddmann.com/posts/implementing-streams-in-php/</link><pubDate>Fri, 16 Jan 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/implementing-streams-in-php/</guid><description>Typically, when we think about a list of elements we assume there is both a start and a finite end. In this example the list has been precomputed and stored for subsequent traversal and transformation. If instead, we replaced the finite ending with a promise to return the next element in the sequence, we would have the architecture to provide infinite lists.</description></item><item><title>Cons Lists and Folds in PHP</title><link>https://eddmann.com/posts/cons-lists-and-folds-in-php/</link><pubDate>Fri, 02 Jan 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/cons-lists-and-folds-in-php/</guid><description>Cons cells are used to (cons)truct a data object which represents an ordered pair. The elements in this pair can be identified as &amp;lsquo;car&amp;rsquo; and &amp;lsquo;cdr&amp;rsquo; accordingly. Using this simple representation, we are able not only to hold ordered pairs but also to create more complex data structures, such as a List.</description></item><item><title>Reversing a Unicode String in PHP using UTF-16BE/LE</title><link>https://eddmann.com/posts/reversing-a-unicode-string-in-php-using-utf-16-be-le/</link><pubDate>Sun, 11 May 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/reversing-a-unicode-string-in-php-using-utf-16-be-le/</guid><description>&lt;p>Last week I was bitten by the Unicode encoding issue when trying to naively manipulate a user&amp;rsquo;s input using PHP&amp;rsquo;s built-in string functions.
PHP simply assumes that all characters are a single byte (octet) and the provided functions use this assumption when processing a string.
In this post I will not be going into depth on the subject of Unicode representations.
I feel this topic deserves its own series of articles.
However, you should be aware that in &amp;lsquo;Western Europe&amp;rsquo; we commonly only use the basic &lt;a href="http://en.wikipedia.org/wiki/ASCII" rel="external noopener" target="_blank">ASCII&lt;/a> character-set (consisting of 7 bytes).
This makes the transition to the popular &amp;lsquo;UTF-8&amp;rsquo; Unicode representation almost seamless, as the two map one-to-one.
I wish to, however, discuss how to reverse a Unicode string (UTF-8) using a combination of &lt;a href="http://en.wikipedia.org/wiki/Endianness" rel="external noopener" target="_blank">endianness&lt;/a> magic and the &lt;a href="http://www.php.net/manual/en/function.strrev.php" rel="external noopener" target="_blank">&amp;lsquo;strrev&amp;rsquo;&lt;/a> function.&lt;/p></description></item><item><title>Reversing a String in PHP</title><link>https://eddmann.com/posts/reversing-a-string-in-php/</link><pubDate>Sat, 10 May 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/reversing-a-string-in-php/</guid><description>&lt;p>Since recently setting up a forum for &lt;a href="http://forum.threedevsandamaybe.com/" rel="external noopener" target="_blank">Three Devs and a Maybe&lt;/a>, we have started to partake in a weekly &lt;a href="http://en.wikipedia.org/wiki/Kata_%28programming%29" rel="external noopener" target="_blank">code-kata&lt;/a>.
What could be more fitting to start with than the common interview question, reversing a string in a given language.
In this case the language is PHP, and below are some of the many ways contrived to solve the problem.&lt;/p></description></item><item><title>Tuples in PHP</title><link>https://eddmann.com/posts/tuples-in-php/</link><pubDate>Thu, 17 Apr 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/tuples-in-php/</guid><description>&lt;p>Since exploring languages such as Scala and Python which provide the tuple data structure, I have been keen to experiment with how to clearly map it into a PHP solution.
Tuples are simply a finite, ordered sequence of elements - usually with good language support to both pack (construction) and unpack (deconstruction) the values.
I have found that many use cases of the commonplace array structure in PHP could be better suited to n-tuples.
Familiar examples such as coordinate pairs (points) and records from a relational database (e.g. a user id and name) could succinctly take advantage of the structure.&lt;/p></description></item><item><title>Storing PHP Sessions/File Caches in Memory using TMPFS</title><link>https://eddmann.com/posts/storing-php-sessions-file-caches-in-memory-using-tmpfs/</link><pubDate>Wed, 16 Apr 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/storing-php-sessions-file-caches-in-memory-using-tmpfs/</guid><description>&lt;p>Yesterday I was looking through some application logs and noticed a significant bottleneck with I/O reads in the implemented file cache.
This cache is used to temporarily store processed views and records for a set duration.
I looked into a couple of solutions to alleviate the intense spinning disk usage, ranging from &lt;a href="http://memcached.org/" rel="external noopener" target="_blank">Memcache&lt;/a> to &lt;a href="http://redis.io/" rel="external noopener" target="_blank">Redis&lt;/a>.
These products are great for large-scale applications spread over multiple systems.
However, in my case, a single local configuration was sufficient.&lt;/p></description></item><item><title>Securing Sessions in PHP</title><link>https://eddmann.com/posts/securing-sessions-in-php/</link><pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/securing-sessions-in-php/</guid><description>&lt;p>Following on from my previous post on &lt;a href="https://eddmann.com/posts/self-signed-ssl-certificates-with-nginx-and-apache/">Self-signed SSL certificates&lt;/a>, I would now like to address the second most common Web application vulnerability (&lt;a href="https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management" rel="external noopener" target="_blank">Broken Authentication and Session Management&lt;/a>).
When delving into the subject I was unable to find a definitive resource for a PHP implementation.
Due to this, I set out to combine all the best practice I could find into a single session handler, to help protect against the common attack vectors.
Since PHP 5.4, you are able to set the session handler based on a class instance that extends the default &lt;code>SessionHandler&lt;/code> class.&lt;/p></description></item><item><title>The Y (Fixed-Point) Combinator in PHP</title><link>https://eddmann.com/posts/the-y-fixed-point-combinator-in-php/</link><pubDate>Tue, 01 Apr 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/the-y-fixed-point-combinator-in-php/</guid><description>&lt;p>A combinator is a type of higher-order function that can be used to express functions without the explicit use of variables.
A fixed point is a value that remains unchanged by a function, satisfying the equation which can be found &lt;a href="http://en.wikipedia.org/wiki/Fixed-point_combinator#Y_combinator" rel="external noopener" target="_blank">here&lt;/a>.
Using the Y-combinator allows us to essentially convert non-recursive code into a recursive counterpart (without directly using named recursion or iteration).
To work its magic, the recursive function is computed as the fixed point of the non-recursive function.&lt;/p></description></item><item><title>Using Anonymous Functions (Lambdas) and Closures in PHP</title><link>https://eddmann.com/posts/using-anonymous-functions-lambdas-and-closures-in-php/</link><pubDate>Mon, 17 Mar 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/using-anonymous-functions-lambdas-and-closures-in-php/</guid><description>Having spent some significant time with more functional-oriented languages such as Scala, I have been keen to explore and take advantage of some of these concepts in my current day-to-day language (PHP).</description></item><item><title>Introduction to Creating a Basic PHP Extension</title><link>https://eddmann.com/posts/introduction-to-creating-a-basic-php-extension/</link><pubDate>Wed, 12 Mar 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/introduction-to-creating-a-basic-php-extension/</guid><description>&lt;p>I recently decided to test my novice C skills in the field of building a PHP extension.
However, despite some very good resources (&lt;a href="http://www.phpinternalsbook.com/" rel="external noopener" target="_blank">here&lt;/a> and &lt;a href="http://devzone.zend.com/303/extension-writing-part-i-introduction-to-php-and-zend/" rel="external noopener" target="_blank">here&lt;/a>), there still seems to be a lack of beginner-friendly material on the subject.
In this post I will document a simple development environment that has worked well on a fresh CentOS 6.5 installation.
Once this has been set up, we will then move on to creating a simple &amp;lsquo;Hello World&amp;rsquo; extension, highlighting some of the extension platform&amp;rsquo;s capabilities.&lt;/p></description></item><item><title>Implementing Basic Python Decorators in PHP</title><link>https://eddmann.com/posts/implementing-basic-python-decorators-in-php/</link><pubDate>Mon, 10 Feb 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/implementing-basic-python-decorators-in-php/</guid><description>&lt;p>Having just stepped into the world of Python, I think it is only human nature to compare, if not contemplate, solutions to discovered strengths in a more familiar language.
My familiar language being, of course, PHP, I thought it would be a good thought experiment to see if I could design a basic decorator implementation in the language.
Decorators, as discussed in &lt;a href="https://eddmann.com/posts/using-basic-auth-and-decorators-in-pythons-flask/">another post&lt;/a>, are an easy concept to explain.
Simply put, they wrap specified functions with other functions, providing a means to compose new functions in a succinct manner.&lt;/p></description></item><item><title>Compiling PHP 5.5 with ZTS and pthreads Support</title><link>https://eddmann.com/posts/compiling-php-5-5-with-zts-and-pthreads-support/</link><pubDate>Thu, 30 Jan 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/compiling-php-5-5-with-zts-and-pthreads-support/</guid><description>POSIX Threads are a standard for threading implementations available in many Unix-like operating systems. Written in C, they provide developers with high-level thread management methods, synchronisation, etc.</description></item><item><title>Accessors (Getter/Setter) and Singleton Traits in PHP</title><link>https://eddmann.com/posts/accessors-getter-setter-and-singleton-traits-in-php/</link><pubDate>Tue, 28 Jan 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/accessors-getter-setter-and-singleton-traits-in-php/</guid><description>&lt;p>Traits were introduced into the PHP language in 5.4, and from this point many interesting use-cases have appeared.
One such instance is the reduction in boilerplate code when prototyping a new idea.
Though these should be implemented within the project before completion, I have found that using the two traits below helps to speed up the development life-cycle.&lt;/p></description></item><item><title>Implementing and Using Memoization in PHP</title><link>https://eddmann.com/posts/implementing-and-using-memoization-in-php/</link><pubDate>Mon, 13 Jan 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/implementing-and-using-memoization-in-php/</guid><description>&lt;p>Memoization is a simple optimisation technique to understand and, in most cases, implement.
The base idea is to speed up function calls by avoiding the re-calculation of previously processed input results (very cache-like).
Storing these results in a key-value lookup store can result in major speed increases when repetitive function calls occur.&lt;/p></description></item><item><title>Using Graphviz with SVG Output in PHP</title><link>https://eddmann.com/posts/using-graphviz-with-svg-output-in-php/</link><pubDate>Mon, 13 Jan 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/using-graphviz-with-svg-output-in-php/</guid><description>&lt;p>Since adding the functionality to process syntax highlighting through &lt;a href="http://pygments.org/" rel="external noopener" target="_blank">Pygments&lt;/a> I had been on the lookout for similar external tools that I could integrate.
One area that I felt was lacking in my posts was accompanying visual aids, which would be useful when explaining a new concept or algorithm.
Like most developers, I feel at home in an editor, so delving into another software package did not appeal to me.&lt;/p></description></item><item><title>How Static Facades and IoC are used in Laravel</title><link>https://eddmann.com/posts/how-static-facades-and-ioc-are-used-in-laravel/</link><pubDate>Wed, 08 Jan 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/how-static-facades-and-ioc-are-used-in-laravel/</guid><description>&lt;p>When you first take a look at &lt;a href="http://laravel.com/" rel="external noopener" target="_blank">Laravel&lt;/a> you may ask yourself, what is with all the static?
It is a valid question, as on the surface it can seem like the framework is heavily static method based.
However, this could be no further from the truth.
A deeper exploration reveals that the static calls we make really mask a great number of instance objects.
In this post I hope to provide a simple explanation as to what is really going on, and along the way build a basic implementation to practise these newfound findings.&lt;/p></description></item><item><title>Using Python's Pygments Syntax Highlighter in PHP</title><link>https://eddmann.com/posts/using-pythons-pygments-syntax-highlighter-in-php/</link><pubDate>Mon, 06 Jan 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/using-pythons-pygments-syntax-highlighter-in-php/</guid><description>&lt;p>Having a website that is heavily software-development based, one important aspect that can not be overlooked is well presented code examples.
Speaking on the importance of editor syntax highlighting in the &lt;a href="https://threedevsandamaybe.com/exploring-text-source-editors-and-ides/" rel="external noopener" target="_blank">previous episode&lt;/a> of our podcast, this attribute transcends to aid in the readability of code online.
Fortunately, there are many options to choose from.
You can either store the code snippets in an embedded &lt;a href="http://gist.github.com/" rel="external noopener" target="_blank">Gists&lt;/a> or use the front-end based &lt;a href="http://highlightjs.org/" rel="external noopener" target="_blank">highlight.js&lt;/a> or &lt;a href="http://code.google.com/p/google-code-prettify/" rel="external noopener" target="_blank">Google Code Prettify&lt;/a>.
One benefit that greatly simplified the publishing process when using a front-end based solution was that you could simply parse the Markdown file (perhaps with a class language type-hint) and leave all the hard work to the client&amp;rsquo;s browser.
As we all know, we have very little control over the viewing experience for each user.
And as I started to post more frequently, cracks began to appear in the syntax highlighters I had been using.
However, when looking for a solution, one had been staring me straight in the face all this time, and that was &lt;a href="http://pygments.org/" rel="external noopener" target="_blank">Pygments&lt;/a>.&lt;/p></description></item><item><title>Using Partial Application in PHP</title><link>https://eddmann.com/posts/using-partial-application-in-php/</link><pubDate>Thu, 26 Dec 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/using-partial-application-in-php/</guid><description>&lt;p>Partial function application is a commonplace feature found in many languages that lean towards the functional paradigm.
Unlike some functional concepts (monads), it can be simply explained as taking a function and binding argument values to one or more of its parameters, resulting in a new function.
Function argument size in computer science circles is described as its &lt;a href="http://en.wikipedia.org/wiki/Arity" rel="external noopener" target="_blank">arity&lt;/a>, and through this process we are reducing the arity based on the partial application call.
Discussion of partial application typically brings up the related topic of &lt;a href="http://en.wikipedia.org/wiki/Currying" rel="external noopener" target="_blank">currying&lt;/a>, which follows the stricter rule of transforming a multiple-argument function into a chain of single-argument calls.
This is useful as it helps simplify the study of functions in theoretical computer science, such as lambda calculus.
Currying, however, is not that useful in general-purpose languages, unlike Haskell which, at its core, only supports the mathematical notion of single-argument functions.
Using a combination of syntactic sugar and currying, the language is able to give the misguided impression of multi-argument calls, when in fact it is just a chain of single-argument curried calls.&lt;/p></description></item><item><title>Simple Function Driven-Development</title><link>https://eddmann.com/posts/simple-function-driven-development/</link><pubDate>Mon, 09 Dec 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/simple-function-driven-development/</guid><description>&lt;p>I recently had the chance to rewrite the backend of my &lt;a href="http://github.com/eddmann/eddmann" rel="external noopener" target="_blank">personal website&lt;/a>.
I was surprised at how accustomed I had become to using heavy-weight web frameworks (with plenty of accompanying dependencies) in larger projects I am involved in, that I instead decided to do the complete opposite.
As a result, I built a very simple single-page Markdown file-based blogging platform (inc. pagination, caching) that only takes a few moments to read.
I find myself sometimes being blinded by the need to abstract everything with the object-oriented philosophy, never taking the time to consider that in many cases it pays off to keep things simple.
Simple, single-purpose functions that can be used for multiple use-cases within your application are a very good mind-set to try and incorporate.
In this post I wish to discuss a couple of the functions that I created to keep the file so simple.&lt;/p></description></item><item><title>Installing Nginx/Apache, MySQL, PHP 5.5 (LAMP) stack on CentOS 6.4</title><link>https://eddmann.com/posts/installing-nginx-apache-mysql-php-5-5-lamp-stack-on-cent-os-6-4/</link><pubDate>Fri, 29 Nov 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/installing-nginx-apache-mysql-php-5-5-lamp-stack-on-cent-os-6-4/</guid><description>&lt;p>With the widespread appeal and flexibility of an &lt;a href="http://en.wikipedia.org/wiki/Virtual_private_server" rel="external noopener" target="_blank">VPS&lt;/a> and &lt;a href="http://www.vagrantup.com/" rel="external noopener" target="_blank">Vagrant&lt;/a>, a shift from mere FTP access to setting up a fresh installation from scratch has taken effect.
Tools like &lt;a href="http://puppetlabs.com/" rel="external noopener" target="_blank">Puppet&lt;/a> and &lt;a href="http://www.opscode.com/chef/" rel="external noopener" target="_blank">Chef&lt;/a> are great for certain use-cases (i.e. large deployments, dev-ops teams), but starting with the terminal is your best friend.
In this post I will take you through the process of setting up a trivial LAMP stack on CentOS 6.4, with the option to use either &lt;a href="http://httpd.apache.org/" rel="external noopener" target="_blank">Apache&lt;/a> or &lt;a href="http://nginx.com/" rel="external noopener" target="_blank">Nginx&lt;/a>.
Both will take advantage of the features PHP-FPM provides you, via FastCGI.&lt;/p></description></item><item><title>Coalescing Operation in PHP (for Default Values)</title><link>https://eddmann.com/posts/coalescing-operation-in-php/</link><pubDate>Thu, 28 Nov 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/coalescing-operation-in-php/</guid><description>&lt;p>Over the past week or so, I have been reading discussions on the &lt;a href="http://news.php.net/php.internals" rel="external noopener" target="_blank">PHP internals&lt;/a> mailing list about proposed updates to what the ?: operator currently does.
If you are like me, you may not have even known that you could use the ternary operator (since 5.3) as a coalescing operator.&lt;/p></description></item><item><title>Accessing PHP documentation using 'pman'</title><link>https://eddmann.com/posts/accessing-php-documentation-using-pman/</link><pubDate>Tue, 11 Sep 2012 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/accessing-php-documentation-using-pman/</guid><description>&lt;p>PHP has a ridiculous amount of in-built functions.
Even though I code in it daily, I am still surprised to find a new one.
It was not until recently that I discovered &lt;code>strip_tags&lt;/code>, which saved me an ample amount of time that I would have spent writing my own implementation.
My philosophy now is that if there is a function you require, PHP most likely already has it.&lt;/p></description></item><item><title>An alternative to 'var_dump' in PHP</title><link>https://eddmann.com/posts/an-alternative-to-var-dump-in-php/</link><pubDate>Mon, 10 Sep 2012 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/an-alternative-to-var-dump-in-php/</guid><description>&lt;p>Whilst working with PHP, I seem to use &lt;code>var_dump&lt;/code> a ridiculous amount.
It&amp;rsquo;s a debugging must-have.
However, it does fall short in a few ways.
It does not take into consideration that the function is almost always displayed on an HTML page, and switching to the page source can be troublesome.
Due to these pitfalls, a host of projects such as &lt;a href="http://krumo.sourceforge.net/" rel="external noopener" target="_blank">Krumo&lt;/a> and &lt;a href="http://raveren.github.io/kint/" rel="external noopener" target="_blank">Kint&lt;/a> have emerged to cater for these needs.
In addition to these projects, if you have &lt;a href="http://xdebug.org/" rel="external noopener" target="_blank">XDebug&lt;/a> installed, it will replace the default &lt;code>var_dump&lt;/code> function with its own implementation that outputs the information with much-needed styling.&lt;/p></description></item><item><title>Complete MAMP Setup with PHP 5.5</title><link>https://eddmann.com/posts/complete-mamp-setup-with-php-5-5/</link><pubDate>Sun, 08 Jul 2012 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/complete-mamp-setup-with-php-5-5/</guid><description>&lt;p>I have been a loyal &lt;a href="http://www.mamp.info/en/mamp-pro/" rel="external noopener" target="_blank">MAMP Pro&lt;/a> user for many years.
I fell in love with how easy it was to set up custom hosts, without the need to tweak the hosts file myself.
However, ever since I documented my &lt;a href="https://eddmann.com/posts/dnsmasq-your-local-development-dns/">experiences&lt;/a> with DNSMasq, I have been interested in how &lt;a href="http://davidwinter.me/articles/2011/06/18/simple-local-web-development-with-apache-and-dnsmasq/" rel="external noopener" target="_blank">this&lt;/a> post documented setting up a web stack with Apache, similar to Ruby&amp;rsquo;s &lt;a href="http://pow.cx/" rel="external noopener" target="_blank">Pow&lt;/a>.
The ability to set up a new development site with only the creation of a new folder (i.e. a folder called test could be accessible at test.dev) appealed to me greatly.&lt;/p></description></item><item><title>PHPass, the go-to password hashing library</title><link>https://eddmann.com/posts/phpass-the-go-to-password-hashing-library/</link><pubDate>Thu, 28 Jun 2012 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/phpass-the-go-to-password-hashing-library/</guid><description>&lt;p>It is becoming a scarily common occurrence to read about &lt;a href="http://www.guardian.co.uk/technology/us-news-blog/2012/jun/07/blogpost-eharmony-linkedin-hacked-leaked" rel="external noopener" target="_blank">yet&lt;/a> &lt;a href="http://www.bbc.co.uk/news/technology-18338956" rel="external noopener" target="_blank">another&lt;/a> &lt;a href="http://www.pcworld.com/article/257178/music_site_lastfm_joins_the_passwordleak_parade.html" rel="external noopener" target="_blank">batch&lt;/a> of high-profile websites&amp;rsquo; users&amp;rsquo; passwords being leaked online - for everyone&amp;rsquo;s cracking pleasure.
What&amp;rsquo;s even more shocking is how poorly these sites are storing them.
In the case of LinkedIn, it turned out that they had stored them as unsalted, plain MD5 hashes, which any Joe Bloggs could easily crack using a rainbow table.
The tried and tested means of storing passwords in today&amp;rsquo;s web applications is to create a hash from the user&amp;rsquo;s input, and then compare any attempted authentication with this stored value.
The trouble and confusion arise, however, in how to actually achieve this, as there are so many incorrect methods available.&lt;/p></description></item><item><title>Database Migrations with CodeIgniter</title><link>https://eddmann.com/posts/database-migrations-with-codeigniter/</link><pubDate>Fri, 08 Jun 2012 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/database-migrations-with-codeigniter/</guid><description>&lt;p>I first became aware of database migrations a few years ago when I was exploring the world of &lt;a href="http://rubyonrails.org/" rel="external noopener" target="_blank">Rails&lt;/a>.
However, I have only recently used them again, prompted by a gentle nudge from SE-Radio (&lt;a href="http://www.se-radio.net/2012/06/episode-186-martin-fowler-and-pramod-sadalage-on-agile-database-development/" rel="external noopener" target="_blank">Episode 186&lt;/a>) and a large web application build which re-introduced them into my development lifecycle.
Due to current events, I, for one, do not wish to see them go any time soon.&lt;/p></description></item></channel></rss>