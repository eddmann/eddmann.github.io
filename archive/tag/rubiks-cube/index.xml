<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rubiks-Cube on Edd Mann</title><link>https://eddmann.com/archive/tag/rubiks-cube/</link><description>Recent content in Rubiks-Cube on Edd Mann</description><generator>Hugo</generator><language>en-GB</language><lastBuildDate>Tue, 06 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://eddmann.com/archive/tag/rubiks-cube/index.xml" rel="self" type="application/rss+xml"/><item><title>Building a Rubik's Cube Solver using Rust/WASM and Three.js/React</title><link>https://eddmann.com/posts/building-a-rubik-cube-solver-using-rust-wasm-threejs-and-react/</link><pubDate>Tue, 06 Jul 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/building-a-rubik-cube-solver-using-rust-wasm-threejs-and-react/</guid><description>&lt;p>After building the &lt;a href="https://eddmann.com/posts/building-an-optimal-pocket-cube-solver-using-rust-wasm-threejs-and-react/">Pocket Cube Solver&lt;/a>, I wished to expand upon this design and cater for a conventional 3x3x3 Rubik&amp;rsquo;s Cube.
In this post, I discuss the process I went through in designing and building the solver and visual client alike - taking the learnings garnered from implementing the previous solver.&lt;/p></description></item></channel></rss>