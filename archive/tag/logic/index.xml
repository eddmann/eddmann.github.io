<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Logic on Edd Mann</title><link>https://eddmann.com/archive/tag/logic/</link><description>Recent content in Logic on Edd Mann</description><generator>Hugo</generator><language>en-GB</language><lastBuildDate>Fri, 06 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://eddmann.com/archive/tag/logic/index.xml" rel="self" type="application/rss+xml"/><item><title>Binary Addition using Half and Full Adders within TypeScript</title><link>https://eddmann.com/posts/binary-addition-using-half-and-full-adders-within-typescript/</link><pubDate>Fri, 06 Nov 2020 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/binary-addition-using-half-and-full-adders-within-typescript/</guid><description>&lt;p>Recently, I watched an interesting talk about &lt;a href="https://www.youtube.com/watch?v=7lyb22x9tcM" rel="external noopener" target="_blank">Binary Addition in the TypeScript Type System&lt;/a>.
I thought it would be fascinating to explore this concept in more depth.
I wanted to pay close attention to how I could leverage the TypeScript type system to help ensure validity in the final implementation.&lt;/p></description></item><item><title>Understanding De Morgan's Laws to Simplify Propositions</title><link>https://eddmann.com/posts/understanding-de-morgans-laws-to-simplify-propositions/</link><pubDate>Wed, 01 Jun 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/understanding-de-morgans-laws-to-simplify-propositions/</guid><description>&lt;p>Yesterday, I watched a conference talk about &lt;a href="https://www.youtube.com/watch?v=saMtzIaDCJM" rel="external noopener" target="_blank">Formal Logic&lt;/a>, where De Morgan&amp;rsquo;s Laws were discussed.
Wikipedia provides a very good &lt;a href="https://en.wikipedia.org/wiki/De_Morgan%27s_laws" rel="external noopener" target="_blank">explanation of the laws&lt;/a> in-depth.
Essentially, they are transformation rules that allow you to simplify certain propositions.
Whilst programming, predicate logic of this form appears very frequently.
It is very useful to know how you can rewrite a predicate to better describe its intent.&lt;/p></description></item></channel></rss>