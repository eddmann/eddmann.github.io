<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Wsgi on Edd Mann</title><link>https://eddmann.com/archive/tag/wsgi/</link><description>Recent content in Wsgi on Edd Mann</description><generator>Hugo</generator><language>en-GB</language><lastBuildDate>Thu, 27 Feb 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://eddmann.com/archive/tag/wsgi/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a Basic Auth. WSGI Middleware in Python</title><link>https://eddmann.com/posts/creating-a-basic-auth-wsgi-middleware-in-python/</link><pubDate>Thu, 27 Feb 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/creating-a-basic-auth-wsgi-middleware-in-python/</guid><description>&lt;p>With my recent dedicated introduction to the Python language, I have become very appreciative of the highly composable nature of &lt;a href="http://en.wikipedia.org/wiki/Web_Server_Gateway_Interface" rel="external noopener" target="_blank">WSGI&lt;/a> applications.
In a functional style, you are able to compose a desired application from many different components, using the middleware ideology.
The benefits of this approach can be clearly seen in the contrived example depicted below, which is based on my previous &lt;a href="https://eddmann.com/posts/using-basic-auth-and-decorators-in-pythons-flask/">Flask example&lt;/a>.&lt;/p></description></item><item><title>Understanding Python WSGI with Examples</title><link>https://eddmann.com/posts/understanding-python-wsgi-with-examples/</link><pubDate>Mon, 17 Feb 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/understanding-python-wsgi-with-examples/</guid><description>&lt;p>Coming from a strong PHP background, initially, exploring the web development landscape whilst delving into Python seemed rather confusing.
As Python was not originally developed for the web, a specification called &lt;a href="http://www.python.org/dev/peps/pep-0333/" rel="external noopener" target="_blank">PEP 333&lt;/a> was accepted, which standardised the required interface between web servers and Python web frameworks/applications.
Despite the additional complexity, the manner in which middleware applications can be integrated, along with the server choices, offers possibilities that I find hard to locate a comparable alternative for in PHP.&lt;/p></description></item></channel></rss>