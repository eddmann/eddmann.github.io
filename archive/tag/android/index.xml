<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Android on Edd Mann</title><link>https://eddmann.com/archive/tag/android/</link><description>Recent content in Android on Edd Mann</description><generator>Hugo</generator><language>en-GB</language><lastBuildDate>Fri, 28 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://eddmann.com/archive/tag/android/index.xml" rel="self" type="application/rss+xml"/><item><title>Bridging the Gap Between Android Native Functionality and JavaScript Web Applications</title><link>https://eddmann.com/posts/bridging-the-gap-between-android-native-functionality-and-javascript-web-applications/</link><pubDate>Fri, 28 Mar 2025 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/bridging-the-gap-between-android-native-functionality-and-javascript-web-applications/</guid><description>In this post, I share a pattern I&amp;rsquo;ve been using to bridge native Android functionality with JavaScript running inside a WebView. It covers setting up a lightweight Kotlin/Java-JavaScript bridge to handle asynchronous communication between the two.</description></item></channel></rss>