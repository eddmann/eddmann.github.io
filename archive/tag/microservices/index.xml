<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Microservices on Edd Mann</title><link>https://eddmann.com/archive/tag/microservices/</link><description>Recent content in Microservices on Edd Mann</description><generator>Hugo</generator><language>en-GB</language><lastBuildDate>Fri, 28 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://eddmann.com/archive/tag/microservices/index.xml" rel="self" type="application/rss+xml"/><item><title>Notes: Monolith to Microservices by Sam Newman</title><link>https://eddmann.com/posts/notes-monolith-to-microservices-by-sam-newman/</link><pubDate>Fri, 28 Jun 2024 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/notes-monolith-to-microservices-by-sam-newman/</guid><description>&lt;p>I&amp;rsquo;ve recently finished reading &lt;a href="https://www.oreilly.com/library/view/monolith-to-microservices/9781492047834/" rel="external noopener" target="_blank">Monolith to Microservices&lt;/a> by Sam Newman.
This post contains my notes from the book, which I wrote while reading to help digest the material.
It also serves as a future reference.&lt;/p></description></item><item><title>Building a Choreographed, Event-Driven Workflow with AWS EventBridge</title><link>https://eddmann.com/posts/building-a-choreographed-event-driven-workflow-with-aws-eventbridge/</link><pubDate>Thu, 20 Jun 2024 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/building-a-choreographed-event-driven-workflow-with-aws-eventbridge/</guid><description>This post walks through building a choreographed, event-driven order fulfilment system on AWS using EventBridge, Lambda, and SQS. It covers how events propagate between subdomains, the trade-offs between choreography and orchestration, and how to handle idempotency, observability, and event schema design. Inspired by a real-world example in Monolith to Microservices, the post also includes infrastructure-as-code examples using both CloudFormation and Terraform.</description></item><item><title>Serverless Transactional Outbox Pattern: Two Practical Approaches</title><link>https://eddmann.com/posts/serverless-transactional-outbox-pattern-two-practical-approaches/</link><pubDate>Fri, 14 Jun 2024 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/serverless-transactional-outbox-pattern-two-practical-approaches/</guid><description>In this post, I explore how to implement the Transactional Outbox pattern using serverless technologies. I compare two practical approaches: one using DynamoDB Streams for event publishing, and the other using a relational database with a polling worker. Each approach has trade-offs, but both ensure atomicity between data changes and event publication.</description></item></channel></rss>