<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Babel on Edd Mann</title><link>https://eddmann.com/archive/tag/babel/</link><description>Recent content in Babel on Edd Mann</description><generator>Hugo</generator><language>en-GB</language><lastBuildDate>Fri, 20 Jul 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://eddmann.com/archive/tag/babel/index.xml" rel="self" type="application/rss+xml"/><item><title>Building a Babel Plugin: Adding a Function Composition Operator and Auto-Curried Functions to JavaScript</title><link>https://eddmann.com/posts/building-a-babel-plugin-adding-a-function-composition-operator-and-auto-curried-functions-to-javascript/</link><pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/building-a-babel-plugin-adding-a-function-composition-operator-and-auto-curried-functions-to-javascript/</guid><description>&lt;p>In a recent Software Engineering Daily &lt;a href="https://softwareengineeringdaily.com/2018/06/21/babel-with-henry-zhu/" rel="external noopener" target="_blank">podcast&lt;/a> Henry Zhu discussed the &lt;a href="https://babeljs.io/" rel="external noopener" target="_blank">Babel&lt;/a> project, and shed some light on how the transpiler works under the hood.
He touched upon how &lt;a href="https://babeljs.io/docs/en/plugins.html" rel="external noopener" target="_blank">Plugins&lt;/a> can be created to alter the resulting compiled code.
I was very interested in experimenting with this capability.
In this post I wish to highlight the process by which Babel transforms your code, developing several interesting plugins along the way.&lt;/p></description></item><item><title>Mince Pie Challenge: Setting up the Serverless Framework with Docker, Webpack and Babel</title><link>https://eddmann.com/posts/mince-pie-challenge-setting-up-the-serverless-framework-with-docker-webpack-and-babel/</link><pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mince-pie-challenge-setting-up-the-serverless-framework-with-docker-webpack-and-babel/</guid><description>&lt;p>Now that we have spent some time working out how the API is going to look, we can move on to building it!
We will start off by configuring the initial API project, setting up a Dockerised &lt;a href="https://serverless.com/" rel="external noopener" target="_blank">Serverless Framework&lt;/a> with &lt;a href="https://webpack.js.org/" rel="external noopener" target="_blank">Webpack&lt;/a> and &lt;a href="https://babeljs.io/" rel="external noopener" target="_blank">Babel&lt;/a> support.&lt;/p></description></item></channel></rss>