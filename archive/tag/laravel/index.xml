<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Laravel on Edd Mann</title><link>https://eddmann.com/archive/tag/laravel/</link><description>Recent content in Laravel on Edd Mann</description><generator>Hugo</generator><language>en-GB</language><lastBuildDate>Wed, 08 Jan 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://eddmann.com/archive/tag/laravel/index.xml" rel="self" type="application/rss+xml"/><item><title>How Static Facades and IoC are used in Laravel</title><link>https://eddmann.com/posts/how-static-facades-and-ioc-are-used-in-laravel/</link><pubDate>Wed, 08 Jan 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/how-static-facades-and-ioc-are-used-in-laravel/</guid><description>&lt;p>When you first take a look at &lt;a href="http://laravel.com/" rel="external noopener" target="_blank">Laravel&lt;/a> you may ask yourself, what is with all the static?
It is a valid question, as on the surface it can seem like the framework is heavily static method based.
However, this could be no further from the truth.
A deeper exploration reveals that the static calls we make really mask a great number of instance objects.
In this post I hope to provide a simple explanation as to what is really going on, and along the way build a basic implementation to practise these newfound findings.&lt;/p></description></item></channel></rss>