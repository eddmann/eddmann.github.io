<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Wasm on Edd Mann</title><link>https://eddmann.com/archive/tag/wasm/</link><description>Recent content in Wasm on Edd Mann</description><generator>Hugo</generator><language>en-GB</language><lastBuildDate>Wed, 11 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://eddmann.com/archive/tag/wasm/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a React-based Chess Game with WASM Bots in TypeScript</title><link>https://eddmann.com/posts/creating-a-react-based-chess-game-with-wasm-bots-in-typescript/</link><pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/creating-a-react-based-chess-game-with-wasm-bots-in-typescript/</guid><description>&lt;p>A couple of years ago I explored using a &lt;a href="https://github.com/niklasf/stockfish.wasm" rel="external noopener" target="_blank">WebAssembly port&lt;/a> of &lt;a href="https://stockfishchess.org/" rel="external noopener" target="_blank">Stockfish&lt;/a> (the popular Chess engine) as a &amp;lsquo;Bot&amp;rsquo; for a small React-based Chess implementation.
I decided over the past week to revisit it and rewrite the implementation in TypeScript, along with providing more Bot types to choose from.&lt;/p></description></item></channel></rss>