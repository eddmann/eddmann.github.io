<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on Edd Mann</title><link>https://eddmann.com/archive/tag/docker/</link><description>Recent content in Docker on Edd Mann</description><generator>Hugo</generator><language>en-GB</language><lastBuildDate>Thu, 28 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://eddmann.com/archive/tag/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Containerising the DataDog Agent for HTTP health-checks using DigitalOcean App Platform and Terraform</title><link>https://eddmann.com/posts/containerising-the-datadog-agent-for-http-health-checks-using-digitalocean-app-platform-and-terraform/</link><pubDate>Thu, 28 Apr 2022 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/containerising-the-datadog-agent-for-http-health-checks-using-digitalocean-app-platform-and-terraform/</guid><description>&lt;p>We have been big fans of DataDog and the level of telemetry/monitoring it provides us for many years now.
One such aspect of monitoring that we employ throughout the services we maintain is &lt;a href="https://docs.datadoghq.com/integrations/http_check/" rel="external noopener" target="_blank">HTTP health checks&lt;/a>, which are intentionally run on a separate cloud provider to our primary, which is AWS.
DataDog has provided the ability to handle running these checks via &lt;a href="https://docs.datadoghq.com/agent/" rel="external noopener" target="_blank">their agent&lt;/a> for many years, offering us a sufficient black-box means of ensuring a service is functioning as expected.
This past week, we explored the viability of containerising this responsibility into a service that could be run on a serverless platform such as the &lt;a href="https://www.digitalocean.com/products/app-platform" rel="external noopener" target="_blank">DigitalOcean App Platform&lt;/a>.&lt;/p></description></item><item><title>Creating a Time-lapse Camera with HypriotOS/Docker using a Raspberry Pi 3B+ and Raspberry Pi Zero W</title><link>https://eddmann.com/posts/creating-a-time-lapse-camera-with-hypriotos-docker-using-a-raspberry-pi-3b-plus-and-raspberry-pi-zero-w/</link><pubDate>Sat, 16 Feb 2019 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/creating-a-time-lapse-camera-with-hypriotos-docker-using-a-raspberry-pi-3b-plus-and-raspberry-pi-zero-w/</guid><description>&lt;p>I have recently started a project that requires the ability to create a time-lapse video over a set duration.
Looking at all the possible ways of achieving this, I felt that a Raspberry Pi would be well suited for the job.
In this post, I will discuss how I went about setting up both a &lt;a href="https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/" rel="external noopener" target="_blank">Raspberry Pi 3 Model B+&lt;/a> and a &lt;a href="https://www.raspberrypi.org/products/raspberry-pi-zero-w/" rel="external noopener" target="_blank">Raspberry Pi Zero W&lt;/a> with &lt;a href="https://blog.hypriot.com/" rel="external noopener" target="_blank">HypriotOS&lt;/a> to run a Docker-based time-lapse camera Node application.&lt;/p></description></item><item><title>Compiling Pokémon Red (pokered) using Docker and adding 'Super B' button behaviour</title><link>https://eddmann.com/posts/compiling-pokered-using-docker-and-adding-super-b-button-behaviour/</link><pubDate>Tue, 29 Jan 2019 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/compiling-pokered-using-docker-and-adding-super-b-button-behaviour/</guid><description>&lt;p>Over the Christmas break I found myself on a bit of a nostalgic gaming journey.
Along with building a &lt;a href="https://retropie.org.uk/" rel="external noopener" target="_blank">RetroPie&lt;/a>, I dusted off my old Game Boy and decided to &amp;lsquo;catch them all&amp;rsquo; one more time on Pokémon Red.
Whilst playing, the developer in me started to contrive how a game like this was created, and better still could be changed.
Enter &lt;a href="https://github.com/pret/pokered" rel="external noopener" target="_blank">pokered&lt;/a>, a disassembly of Pokémon Red/Blue which has been organised so that an assembly code novice like myself can understand it.
In this post, I will go through compiling the ASM, tweaking the game to add &lt;a href="https://github.com/eddmann/pokered/commit/e2d6662bc13348234d58a262e9d6faef0a2507de" rel="external noopener" target="_blank">&amp;lsquo;Super B&amp;rsquo; button behaviour&lt;/a>, and then running the compiled ROM on an actual handheld!&lt;/p></description></item><item><title>Creating a Command Line Application to Fetch URL Titles in Go</title><link>https://eddmann.com/posts/creating-a-command-line-application-to-fetch-url-titles-in-go/</link><pubDate>Thu, 23 Aug 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/creating-a-command-line-application-to-fetch-url-titles-in-go/</guid><description>&lt;p>When writing show-notes for &lt;a href="https://threedevsandamaybe.com/" rel="external noopener" target="_blank">Three Devs and a Maybe&lt;/a> it is tedious work to extract the associated show-link titles and generate a Markdown list from them.
This is something that I have &lt;a href="https://eddmann.com/posts/fetching-link-titles-using-promises-and-async-await-in-javascript/">documented in the past&lt;/a>, providing an automated solution to this problem.
However, in this post I would like to discuss implementing such a command-line tool using &lt;a href="https://golang.org/" rel="external noopener" target="_blank">Golang&lt;/a>, creating self-reliant executables that can be cross-compiled for Mac, Windows and Linux.&lt;/p></description></item><item><title>Mince Pie Challenge: Setting up the Serverless Framework with Docker, Webpack and Babel</title><link>https://eddmann.com/posts/mince-pie-challenge-setting-up-the-serverless-framework-with-docker-webpack-and-babel/</link><pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mince-pie-challenge-setting-up-the-serverless-framework-with-docker-webpack-and-babel/</guid><description>&lt;p>Now that we have spent some time working out how the API is going to look, we can move on to building it!
We will start off by configuring the initial API project, setting up a Dockerised &lt;a href="https://serverless.com/" rel="external noopener" target="_blank">Serverless Framework&lt;/a> with &lt;a href="https://webpack.js.org/" rel="external noopener" target="_blank">Webpack&lt;/a> and &lt;a href="https://babeljs.io/" rel="external noopener" target="_blank">Babel&lt;/a> support.&lt;/p></description></item></channel></rss>