<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>React on Edd Mann</title><link>https://eddmann.com/archive/tag/react/</link><description>Recent content in React on Edd Mann</description><generator>Hugo</generator><language>en-GB</language><lastBuildDate>Sat, 25 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://eddmann.com/archive/tag/react/index.xml" rel="self" type="application/rss+xml"/><item><title>Building a Secret Santa Draw PWA in React and TypeScript</title><link>https://eddmann.com/posts/building-a-secret-santa-draw-pwa-in-react-and-typescript/</link><pubDate>Sat, 25 Nov 2023 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/building-a-secret-santa-draw-pwa-in-react-and-typescript/</guid><description>&lt;p>Over the &lt;a href="https://eddmann.com/posts/allocating-and-notifying-secret-santas-via-email-using-clojure/">past&lt;/a> &lt;a href="https://eddmann.com/posts/building-a-secret-santa-allocator-and-sms-sender-using-a-raspberry-pi-pico-micropython-and-sim800l-module/">several&lt;/a> &lt;a href="https://eddmann.com/posts/allocating-secret-santas-using-an-aws-step-function-workflow-and-every-available-lambda-runtime/">years&lt;/a>, I have taken the opportunity of allocating Secret Santas for members of my family as a means of exploring new technologies.
For the past several months, I have been interested in the concept of Progressive Web Applications (thanks in large part to &lt;a href="https://frontendmasters.com/courses/pwas/" rel="external noopener" target="_blank">this series&lt;/a>), and getting more hands-on experience with the ever-changing frontend landscape.
As such, I decided that this year I would build a small application that works across Desktop, iOS, and Android to perform Secret Santa draws in both a local and remote setting.
In this post, I would like to document how I went about building this application.&lt;/p></description></item><item><title>Building a Running Calculator PWA in React and TypeScript</title><link>https://eddmann.com/posts/building-a-running-calculator-pwa-in-react-and-typescript/</link><pubDate>Tue, 31 Oct 2023 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/building-a-running-calculator-pwa-in-react-and-typescript/</guid><description>&lt;p>I have been an avid runner for many years now, but I still get confused by imperial and metric measurements.
On top of this, the number of times I seek out a random website to perform some form of pace/distance calculation is too often to count.
What I wanted was a desktop and mobile application that could perform pace, distance, and time calculations, along with imperial/metric conversions - &lt;em>a swiss-army knife of running calculators&lt;/em>.
In this post, I would like to document my experience building a &lt;a href="https://web.dev/articles/what-are-pwas" rel="external noopener" target="_blank">Progressive Web Application&lt;/a> (PWA) that does just this, providing a native app-like experience across iOS, Android, and Desktop.&lt;/p></description></item><item><title>Can you name that AWS service?</title><link>https://eddmann.com/posts/can-you-name-that-aws-service/</link><pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/can-you-name-that-aws-service/</guid><description>&lt;p>I have always been amazed by the sheer number of services AWS offers.
Although I spend a lot of time working within AWS, I am always surprised to find yet another service that I did not know existed.
Better still, with each new service comes an associated new service icon.
This is why I thought it would be interesting (and somewhat educational) to build a small trivia game that quizzes you on AWS service icons.&lt;/p></description></item><item><title>Building a Rubik's Cube Solver using Rust/WASM and Three.js/React</title><link>https://eddmann.com/posts/building-a-rubik-cube-solver-using-rust-wasm-threejs-and-react/</link><pubDate>Tue, 06 Jul 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/building-a-rubik-cube-solver-using-rust-wasm-threejs-and-react/</guid><description>&lt;p>After building the &lt;a href="https://eddmann.com/posts/building-an-optimal-pocket-cube-solver-using-rust-wasm-threejs-and-react/">Pocket Cube Solver&lt;/a>, I wished to expand upon this design and cater for a conventional 3x3x3 Rubik&amp;rsquo;s Cube.
In this post, I discuss the process I went through in designing and building the solver and visual client alike - taking the learnings garnered from implementing the previous solver.&lt;/p></description></item><item><title>Building an optimal Pocket Cube (2x2x2) Solver using Rust/WASM and Three.js/React</title><link>https://eddmann.com/posts/building-an-optimal-pocket-cube-solver-using-rust-wasm-threejs-and-react/</link><pubDate>Sun, 04 Jul 2021 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/building-an-optimal-pocket-cube-solver-using-rust-wasm-threejs-and-react/</guid><description>&lt;p>Over the past couple of months, I have been very interested in exploring how to efficiently visualise and solve a Rubik&amp;rsquo;s Cube.
Coupled with my desire to experiment with Rust and WASM, this felt like a great opportunity to blend the two.
However, before solving a 3x3x3 Rubik&amp;rsquo;s Cube, I thought it would be beneficial to explore how to optimally solve a Pocket Cube first.&lt;/p></description></item><item><title>Creating a React-based Chess Game with WASM Bots in TypeScript</title><link>https://eddmann.com/posts/creating-a-react-based-chess-game-with-wasm-bots-in-typescript/</link><pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/creating-a-react-based-chess-game-with-wasm-bots-in-typescript/</guid><description>&lt;p>A couple of years ago I explored using a &lt;a href="https://github.com/niklasf/stockfish.wasm" rel="external noopener" target="_blank">WebAssembly port&lt;/a> of &lt;a href="https://stockfishchess.org/" rel="external noopener" target="_blank">Stockfish&lt;/a> (the popular Chess engine) as a &amp;lsquo;Bot&amp;rsquo; for a small React-based Chess implementation.
I decided over the past week to revisit it and rewrite the implementation in TypeScript, along with providing more Bot types to choose from.&lt;/p></description></item><item><title>Building a Flag Guessing Game using React Hooks</title><link>https://eddmann.com/posts/building-a-flag-guessing-game-using-react-hooks/</link><pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/building-a-flag-guessing-game-using-react-hooks/</guid><description>&lt;p>Since &lt;a href="https://reactjs.org/docs/hooks-intro.html" rel="external noopener" target="_blank">React Hooks&lt;/a> were announced last autumn, I&amp;rsquo;ve been looking at ways to experiment with them in a couple of small side-projects.
In this post we will create a simple flag guessing game (called &lt;a href="https://eddmann.com/fun-with-flags/">Fun with Flags&lt;/a>) leveraging &lt;a href="https://facebook.github.io/create-react-app/" rel="external noopener" target="_blank">Create React App&lt;/a>, &lt;a href="https://www.styled-components.com/" rel="external noopener" target="_blank">Styled Components&lt;/a> and React Hooks.
Along the way we will highlight use-cases for several different hooks such as State, Effect and Memoization.
Finally, we will automate the process of publishing the compiled game to &lt;a href="https://pages.github.com/" rel="external noopener" target="_blank">GitHub Pages&lt;/a>.&lt;/p></description></item><item><title>Mince Pie Challenge: Building a Serverless RESTful API and React Client</title><link>https://eddmann.com/posts/mince-pie-challenge-building-a-serverless-restful-api-and-react-client/</link><pubDate>Thu, 07 Jun 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mince-pie-challenge-building-a-serverless-restful-api-and-react-client/</guid><description>&lt;p>Since moving our infrastructure over to the AWS stack, I have been keen to explore how we can take advantage of the numerous services at our disposal, alongside the serverless methodology.
In this blog &lt;a href="https://eddmann.com/archive/tag/mince-pie-challenge-series">series&lt;/a>, I wish to document my experience of building a complete serverless application which harnesses as many of the AWS offerings as possible.
We will explore building both a RESTful API and a React client, all hosted without any servers to maintain!&lt;/p></description></item><item><title>Handling Time-Dependent State Recording using React</title><link>https://eddmann.com/posts/handling-time-dependent-state-recording-using-react/</link><pubDate>Wed, 24 Feb 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/handling-time-dependent-state-recording-using-react/</guid><description>&lt;p>Sometimes, you look at a feature request and think that it may be a very tricky implementation to develop.
I felt this way regarding recording input fields in a recent application I have been working on.
The idea was to be able to record a user&amp;rsquo;s interaction with an HTML component (in this case, a textarea) and be able to replay these events (in real-time) at a later date.
Thinking about how I would go about creating such an implementation in trivial JavaScript, with all the browser nuances and user input differences, was not very appealing.&lt;/p></description></item><item><title>Asynchronous Calls within Flux</title><link>https://eddmann.com/posts/asynchronous-calls-within-flux/</link><pubDate>Wed, 28 Oct 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/asynchronous-calls-within-flux/</guid><description>&lt;p>The Flux architecture abides by a single unidirectional data-flow throughout the entire application.
This provides us with a host of benefits, ranging from easier to reason about code, to clearer testing strategies.
However, one issue we faced in our recently updated interface that tradesmen use to communicate with customers was how to handle asynchronous calls within these constraints.
Throughout this post I wish to guide you through the iterative design decisions made, along with the resulting abstractions and boundaries.&lt;/p></description></item></channel></rss>