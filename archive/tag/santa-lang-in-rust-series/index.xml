<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Santa-Lang-in-Rust-Series on Edd Mann</title><link>https://eddmann.com/archive/tag/santa-lang-in-rust-series/</link><description>Recent content in Santa-Lang-in-Rust-Series on Edd Mann</description><generator>Hugo</generator><language>en-GB</language><lastBuildDate>Tue, 08 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://eddmann.com/archive/tag/santa-lang-in-rust-series/index.xml" rel="self" type="application/rss+xml"/><item><title>Rewriting the santa-lang Interpreter in Rust, Part 4 - Distribution</title><link>https://eddmann.com/posts/rewriting-the-santa-lang-interpreter-in-rust-part-4-distribution/</link><pubDate>Tue, 08 Aug 2023 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/rewriting-the-santa-lang-interpreter-in-rust-part-4-distribution/</guid><description>&lt;p>Now that the interpreter&amp;rsquo;s performance concerns had been addressed, it was time to decide how each of the available runtimes would be packaged and distributed.
In the final post within the &lt;a href="https://eddmann.com/archive/tag/santa-lang-in-rust-series">series&lt;/a>, I will document how the language and runtimes were built, tested, and distributed using a custom CI/CD pipeline.&lt;/p></description></item><item><title>Rewriting the santa-lang Interpreter in Rust, Part 3 - Performance</title><link>https://eddmann.com/posts/rewriting-the-santa-lang-interpreter-in-rust-part-3-performance/</link><pubDate>Mon, 07 Aug 2023 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/rewriting-the-santa-lang-interpreter-in-rust-part-3-performance/</guid><description>&lt;p>Now that we have discussed building the core language and desired runtimes, it is time to highlight one of the biggest reasons why I decided to rewrite the interpreter in a lower-level systems language - performance!
In this post, I will document how I went about benchmarking the two implementations (TypeScript/Node and Rust), greatly improving performance and highlighting interesting findings along the way.&lt;/p></description></item><item><title>Rewriting the santa-lang Interpreter in Rust, Part 2 - Runtimes</title><link>https://eddmann.com/posts/rewriting-the-santa-lang-interpreter-in-rust-part-2-runtimes/</link><pubDate>Sun, 06 Aug 2023 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/rewriting-the-santa-lang-interpreter-in-rust-part-2-runtimes/</guid><description>&lt;p>With the &lt;a href="https://eddmann.com/posts/rewriting-the-santa-lang-interpreter-in-rust-part-1-implementing-the-core/">core language library&lt;/a> now written, I could go about building the desired (delivery) runtimes.
In this post within the &lt;a href="https://eddmann.com/archive/tag/santa-lang-in-rust-series">series&lt;/a>, I will delve into my experience integrating the core language library with these chosen runtimes, documenting some of the challenges that I faced along the way.&lt;/p></description></item><item><title>Rewriting the santa-lang Interpreter in Rust, Part 1 - Implementing the Core</title><link>https://eddmann.com/posts/rewriting-the-santa-lang-interpreter-in-rust-part-1-implementing-the-core/</link><pubDate>Sat, 05 Aug 2023 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/rewriting-the-santa-lang-interpreter-in-rust-part-1-implementing-the-core/</guid><description>&lt;p>After implementing santa-lang in &lt;a href="https://eddmann.com/posts/designing-santa-lang-a-language-for-solving-advent-of-code-puzzles/">TypeScript (Node)&lt;/a>, I wanted to explore rewriting the tree-walking interpreter in a lower-level systems language for efficiency and performance gains.
My goal was to be able to run the entire &lt;a href="https://adventofcode.com/2022" rel="external noopener" target="_blank">Advent of Code 2022 calendar&lt;/a> &lt;em>quicker&lt;/em> than the Node variant.
I settled on using Rust due to its blend of high and low-level constructs, its vibrant package registry (Cargo), memory management model, and previous &lt;a href="https://eddmann.com/posts/building-a-rubik-cube-solver-using-rust-wasm-threejs-and-react/">enjoyable experience using the language&lt;/a>.
In this first post within the &lt;a href="https://eddmann.com/archive/tag/santa-lang-in-rust-series">series&lt;/a>, I will document how I went about organising the project and rewriting the core language within Rust.&lt;/p></description></item></channel></rss>