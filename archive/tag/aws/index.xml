<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Aws on Edd Mann</title><link>https://eddmann.com/archive/tag/aws/</link><description>Recent content in Aws on Edd Mann</description><generator>Hugo</generator><language>en-GB</language><lastBuildDate>Tue, 01 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://eddmann.com/archive/tag/aws/index.xml" rel="self" type="application/rss+xml"/><item><title>Allocating Secret Santas using an AWS Step Function workflow and every available Lambda runtime</title><link>https://eddmann.com/posts/allocating-secret-santas-using-an-aws-step-function-workflow-and-every-available-lambda-runtime/</link><pubDate>Tue, 01 Nov 2022 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/allocating-secret-santas-using-an-aws-step-function-workflow-and-every-available-lambda-runtime/</guid><description>&lt;p>Over the past several years, I have taken the opportunity of allocating Secret Santas for members of my family as an excuse to explore different &lt;a href="https://eddmann.com/posts/allocating-and-notifying-secret-santas-via-email-using-clojure/">programming languages&lt;/a> and &lt;a href="https://eddmann.com/posts/building-a-secret-santa-allocator-and-sms-sender-using-a-raspberry-pi-pico-micropython-and-sim800l-module/">technologies&lt;/a>.
This year has been no different, with me opting to &lt;em>over-engineer&lt;/em> the problem of allocating and notifying participants by diving into &lt;a href="https://aws.amazon.com/step-functions/" rel="external noopener" target="_blank">AWS Step Functions&lt;/a> and the many runtimes available on Lambda.
In this post, I wish to document how I went about designing the Step Function workflow and breaking up the problem into many specific-purpose Lambda behaviours.
The final implementation can be found in &lt;a href="https://github.com/eddmann/step-function-secret-santa" rel="external noopener" target="_blank">this GitHub repository&lt;/a>.&lt;/p></description></item><item><title>Building a Serverless Wedding Photo Gallery using AWS Lambda, S3 and DynamoDB</title><link>https://eddmann.com/posts/building-a-serverless-wedding-photo-gallery-using-aws-lambda-s3-and-dynamodb/</link><pubDate>Mon, 31 Oct 2022 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/building-a-serverless-wedding-photo-gallery-using-aws-lambda-s3-and-dynamodb/</guid><description>&lt;p>Whilst &lt;a href="https://github.com/eddmann/our-wedding-infra#stage-applications" rel="external noopener" target="_blank">documenting&lt;/a> how I structured the &lt;a href="https://github.com/eddmann/our-wedding-infra" rel="external noopener" target="_blank">infrastructure&lt;/a> used for hosting our wedding website, I mentioned the possibility of showcasing its use for another application concern.
In the tradition of over-engineering a problem related to our wedding, we really did not want resized/compressed photos shared through WhatsApp/iMessage of the big day.
So instead, I decided to create a serverless photo gallery that provided guests with the ability to share the original photos in one place.
I also wanted to explore the ability to achieve this while having 100% feature parity locally in a development setting.
In this post, I would like to discuss how I went about building these photo-upload/resizing and lazy-loaded gallery capabilities using AWS Lambda, S3 and DynamoDB.
The final implementation can be found in &lt;a href="https://github.com/eddmann/our-wedding-gallery" rel="external noopener" target="_blank">this GitHub repository&lt;/a>.&lt;/p></description></item><item><title>Can you name that AWS service?</title><link>https://eddmann.com/posts/can-you-name-that-aws-service/</link><pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/can-you-name-that-aws-service/</guid><description>&lt;p>I have always been amazed by the sheer number of services AWS offers.
Although I spend a lot of time working within AWS, I am always surprised to find yet another service that I did not know existed.
Better still, with each new service comes an associated new service icon.
This is why I thought it would be interesting (and somewhat educational) to build a small trivia game that quizzes you on AWS service icons.&lt;/p></description></item><item><title>Managing long-running AWS Fargate ECS tasks within your Serverless project</title><link>https://eddmann.com/posts/managing-long-running-aws-fargate-ecs-tasks-within-your-serverless-project/</link><pubDate>Wed, 16 Mar 2022 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/managing-long-running-aws-fargate-ecs-tasks-within-your-serverless-project/</guid><description>&lt;p>I am a big proponent of the Serverless movement.
The ability to concentrate efforts on only the code and infrastructure concerns that directly add business value is very powerful.
Function-as-a-Service (FaaS) offerings like AWS Lambda impose limitations that help in designing more fault-tolerant and scalable systems, leaning towards event-driven architectures.
However, there are times when we need to execute behaviour that exceeds common FaaS duration limits (i.e. AWS Lambda&amp;rsquo;s 15-minute limit).
In this case, we ideally do not want to resort to a lower level of compute (i.e. a VPS such as EC2), but instead, be able to define and run such behaviour alongside our FaaS counterparts.
In this post, I would like to discuss a &lt;a href="https://github.com/eddmann/serverless-fargate" rel="external noopener" target="_blank">Serverless Framework plugin&lt;/a> I have written, which aids in bridging this gap by way of ECS and &lt;a href="https://aws.amazon.com/fargate/" rel="external noopener" target="_blank">AWS Fargate&lt;/a>.&lt;/p></description></item><item><title>Separating out the Lambda Bref runtime from your project's Composer dependencies</title><link>https://eddmann.com/posts/separating-out-the-lambda-bref-runtime-from-your-projects-composer-dependencies/</link><pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/separating-out-the-lambda-bref-runtime-from-your-projects-composer-dependencies/</guid><description>&lt;p>Having had great success using AWS Lambda within our insurance product (&lt;a href="https://mybuilder-plus.com/" rel="external noopener" target="_blank">MyBuilder Plus&lt;/a>), late last year we made the decision to move &lt;strong>all&lt;/strong> our web request traffic over to the platform!
However, we noticed when attempting to migrate over one application in particular, that we could not use the latest release of &lt;a href="https://bref.sh/" rel="external noopener" target="_blank">Bref&lt;/a> (the PHP runtime) due to a conflict between required Symfony &lt;a href="https://symfony.com/doc/current/components/process.html" rel="external noopener" target="_blank">Process component&lt;/a> versions.&lt;/p></description></item><item><title>Mince Pie Challenge: Viewing and Removing Mince Pies with Amazon DynamoDB</title><link>https://eddmann.com/posts/mince-pie-challenge-viewing-and-removing-mince-pies-with-amazon-dynamodb/</link><pubDate>Tue, 16 Oct 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mince-pie-challenge-viewing-and-removing-mince-pies-with-amazon-dynamodb/</guid><description>&lt;p>In this post we will progress in implementing the proposed endpoint behaviour documented in our &lt;a href="https://eddmann.com/posts/mince-pie-challenge-designing-the-restful-api-with-raml/#viewing-the-pies">RAML design&lt;/a>.
Using the online/offline DynamoDB abstractions that we constructed in the &lt;a href="https://eddmann.com/posts/mince-pie-challenge-adding-and-listing-mince-pies-with-amazon-dynamodb/">previous post&lt;/a>, we will incorporate the ability to view and remove specified mince pies from the challenge.&lt;/p></description></item><item><title>Mince Pie Challenge: Adding and Listing Mince Pies with Amazon DynamoDB</title><link>https://eddmann.com/posts/mince-pie-challenge-adding-and-listing-mince-pies-with-amazon-dynamodb/</link><pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mince-pie-challenge-adding-and-listing-mince-pies-with-amazon-dynamodb/</guid><description>&lt;p>In the &lt;a href="https://eddmann.com/posts/mince-pie-challenge-adding-the-bootstrap-endpoint-and-serverless-offline/">previous post&lt;/a> we began to implement the API endpoints, starting off with creating the bootstrap response.
We did this in a manner that catered for both online and offline development access.
In this post we will incorporate the ability to add and list mince pies, persisting the state within &lt;a href="https://aws.amazon.com/dynamodb/" rel="external noopener" target="_blank">Amazon DynamoDB&lt;/a>.
Following this, we will enrich our offline development process by setting up an &lt;a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBLocal.html" rel="external noopener" target="_blank">Amazon DynamoDB Local&lt;/a> instance using Docker.&lt;/p></description></item><item><title>How to Expand a Linux AWS EBS Root/Partition Volume without Rebooting</title><link>https://eddmann.com/posts/how-to-expand-a-linux-aws-ebs-root-partition-volume-without-rebooting/</link><pubDate>Fri, 10 Aug 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/how-to-expand-a-linux-aws-ebs-root-partition-volume-without-rebooting/</guid><description>&lt;p>Over the past couple of months I have found myself having to look up how to expand a Linux-based AWS EBS volume.
This post showcases a simple step-by-step guide to performing this action.&lt;/p></description></item><item><title>Setting up Caddy Server within AWS using Packer and Terraform</title><link>https://eddmann.com/posts/setting-up-caddy-server-within-aws-using-packer-and-terraform/</link><pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/setting-up-caddy-server-within-aws-using-packer-and-terraform/</guid><description>&lt;p>With the &lt;a href="https://security.googleblog.com/2018/02/a-secure-web-is-here-to-stay.html" rel="external noopener" target="_blank">recent update&lt;/a> to Google Chrome helping shape a more secure Web by marking all HTTP sites as &amp;ldquo;not secure&amp;rdquo;.
I thought it was time that I make the necessary changes to how we host audio files for the &lt;a href="https://threedevsandamaybe.com/" rel="external noopener" target="_blank">Three Devs and a Maybe&lt;/a> podcast.
In this post I would like to discuss setting up &lt;a href="https://caddyserver.com/" rel="external noopener" target="_blank">Caddy Server&lt;/a> (which provides HTTPS out of the box!) as a static-hosting platform on AWS.
I will detail how to provision the instance with Packer and the surrounding infrastructure using Terraform.&lt;/p></description></item><item><title>Mince Pie Challenge: Building a Serverless RESTful API and React Client</title><link>https://eddmann.com/posts/mince-pie-challenge-building-a-serverless-restful-api-and-react-client/</link><pubDate>Thu, 07 Jun 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mince-pie-challenge-building-a-serverless-restful-api-and-react-client/</guid><description>&lt;p>Since moving our infrastructure over to the AWS stack, I have been keen to explore how we can take advantage of the numerous services at our disposal, alongside the serverless methodology.
In this blog &lt;a href="https://eddmann.com/archive/tag/mince-pie-challenge-series">series&lt;/a>, I wish to document my experience of building a complete serverless application which harnesses as many of the AWS offerings as possible.
We will explore building both a RESTful API and a React client, all hosted without any servers to maintain!&lt;/p></description></item><item><title>Unlocking the AWS WAF Logs</title><link>https://eddmann.com/posts/unlocking-the-aws-waf-logs/</link><pubDate>Fri, 12 Jan 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/unlocking-the-aws-waf-logs/</guid><description>&lt;p>In this post we discuss our recent move to route all requests through &lt;a href="https://aws.amazon.com/cloudfront/" rel="external noopener" target="_blank">CloudFront&lt;/a>.
This allows us to parse all traffic through the &lt;a href="https://aws.amazon.com/waf/" rel="external noopener" target="_blank">AWS Web Application Firewall&lt;/a> (WAF).
We highlight the reasoning behind this change, and some issues and remedies encountered when trying to garner concrete logs from the WAF instance.&lt;/p></description></item><item><title>Creating a 'Winning' Audio Lambda Service using Serverless, Polly and compiled SOX</title><link>https://eddmann.com/posts/creating-a-winning-audio-lambda-service-using-serverless-polly-and-compiled-sox/</link><pubDate>Mon, 11 Dec 2017 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/creating-a-winning-audio-lambda-service-using-serverless-polly-and-compiled-sox/</guid><description>&lt;p>Following on from my previous post which discussed &lt;a href="https://eddmann.com/posts/memes-as-a-service-using-lambda-serverless-and-imagemagick/">manipulating images&lt;/a>, I would now like to expand upon this and look into how you can interact with audio using Lambda.
To highlight this use-case we will be creating a simple service which, given a name and an optional voice (provided by &lt;a href="https://aws.amazon.com/polly/" rel="external noopener" target="_blank">Polly&lt;/a>), will synthesise the name and include it in a returned &amp;ldquo;And the winner is&amp;hellip;&amp;rdquo; applause MP3 file.
This will demonstrate how to integrate Polly within Lambda, compile and execute native code within Lambda and return a binary MP3 file to the client.&lt;/p></description></item><item><title>'Memes as a Service' using Lambda, Serverless and ImageMagick</title><link>https://eddmann.com/posts/memes-as-a-service-using-lambda-serverless-and-imagemagick/</link><pubDate>Mon, 04 Dec 2017 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/memes-as-a-service-using-lambda-serverless-and-imagemagick/</guid><description>&lt;p>I&amp;rsquo;ve recently become really interested in the concept of Functions as a Service (FaaS) and the &lt;a href="https://serverless.com/" rel="external noopener" target="_blank">Serverless Framework&lt;/a>.
I decided to create a small experimental AWS Lambda function to explore how it could be used to manipulate images.
For this contrived example, I came up with the (silly) idea of &amp;lsquo;Memes as a Service&amp;rsquo; (everything needs to be a service nowadays).&lt;/p></description></item><item><title>Scheduling EC2 Instances using Lambda and CloudWatch Events</title><link>https://eddmann.com/posts/scheduling-ec2-instances-using-lambda-and-cloudwatch-events/</link><pubDate>Fri, 24 Nov 2017 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/scheduling-ec2-instances-using-lambda-and-cloudwatch-events/</guid><description>&lt;p>Over the past couple of months, MyBuilder has been transitioning from primarily a dedicated server stack (with orchestration through &lt;a href="https://puppet.com/" rel="external noopener" target="_blank">Puppet&lt;/a>) to cloud infrastructure by way of &lt;a href="https://aws.amazon.com/" rel="external noopener" target="_blank">Amazon Web Services&lt;/a>.
We have been a proponent of AWS for quite some time, taking advantage of services such as S3 and CloudFront in our current setup.
We are also not unfamiliar with EC2, spreading some of our application requirements onto several instances over the past couple of years.
However, we have not been fully embracing the &amp;lsquo;Cloud nature&amp;rsquo; of the product and are still treating each server as something between a &lt;a href="https://martinfowler.com/bliki/SnowflakeServer.html" rel="external noopener" target="_blank">Snowflake&lt;/a> and a &lt;a href="https://martinfowler.com/bliki/PhoenixServer.html" rel="external noopener" target="_blank">Phoenix&lt;/a>.&lt;/p></description></item></channel></rss>