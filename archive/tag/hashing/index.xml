<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hashing on Edd Mann</title><link>https://eddmann.com/archive/tag/hashing/</link><description>Recent content in Hashing on Edd Mann</description><generator>Hugo</generator><language>en-GB</language><lastBuildDate>Thu, 28 Jun 2012 00:00:00 +0000</lastBuildDate><atom:link href="https://eddmann.com/archive/tag/hashing/index.xml" rel="self" type="application/rss+xml"/><item><title>PHPass, the go-to password hashing library</title><link>https://eddmann.com/posts/phpass-the-go-to-password-hashing-library/</link><pubDate>Thu, 28 Jun 2012 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/phpass-the-go-to-password-hashing-library/</guid><description>&lt;p>It is becoming a scarily common occurrence to read about &lt;a href="http://www.guardian.co.uk/technology/us-news-blog/2012/jun/07/blogpost-eharmony-linkedin-hacked-leaked" rel="external noopener" target="_blank">yet&lt;/a> &lt;a href="http://www.bbc.co.uk/news/technology-18338956" rel="external noopener" target="_blank">another&lt;/a> &lt;a href="http://www.pcworld.com/article/257178/music_site_lastfm_joins_the_passwordleak_parade.html" rel="external noopener" target="_blank">batch&lt;/a> of high-profile websites&amp;rsquo; users&amp;rsquo; passwords being leaked online - for everyone&amp;rsquo;s cracking pleasure.
What&amp;rsquo;s even more shocking is how poorly these sites are storing them.
In the case of LinkedIn, it turned out that they had stored them as unsalted, plain MD5 hashes, which any Joe Bloggs could easily crack using a rainbow table.
The tried and tested means of storing passwords in today&amp;rsquo;s web applications is to create a hash from the user&amp;rsquo;s input, and then compare any attempted authentication with this stored value.
The trouble and confusion arise, however, in how to actually achieve this, as there are so many incorrect methods available.&lt;/p></description></item></channel></rss>