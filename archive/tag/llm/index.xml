<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Llm on Edd Mann</title><link>https://eddmann.com/archive/tag/llm/</link><description>Recent content in Llm on Edd Mann</description><generator>Hugo</generator><language>en-GB</language><lastBuildDate>Fri, 17 Oct 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://eddmann.com/archive/tag/llm/index.xml" rel="self" type="application/rss+xml"/><item><title>Running MCPs Everywhere: Chatting with My Workouts</title><link>https://eddmann.com/posts/running-mcps-everywhere-chatting-with-my-workouts/</link><pubDate>Fri, 17 Oct 2025 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/running-mcps-everywhere-chatting-with-my-workouts/</guid><description>As both a runner and someone curious about MCPs, I wanted to chat about my workouts with an LLM. This led me to build Strava and Garmin Connect MCP servers, exploring the Python/FastMCP stack and discovering patterns for designing effective MCP tools. The result: a system that lets Claude generate throwaway code to analyse my training data in ways I never anticipated.</description></item><item><title>Contextual Movie Conversations: Building a Plex MCP Server</title><link>https://eddmann.com/posts/contextual-movie-conversations-building-a-plex-mcp-server/</link><pubDate>Fri, 03 Oct 2025 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/contextual-movie-conversations-building-a-plex-mcp-server/</guid><description>An exploration of building a Plex MCP server using Laravel 12 and Laravel MCP. By integrating Plex playback sessions with OpenSubtitles, I created a system that lets AI assistants understand exactly where I am in a film - perfect for catching up on missed plot points or diving deeper into themes while watching.</description></item><item><title>santa-lang Workshop: Exploring Agentic LLM Workflows for Language Implementation</title><link>https://eddmann.com/posts/santa-lang-workshop-exploring-agentic-llm-workflows-for-language-implementation/</link><pubDate>Mon, 15 Sep 2025 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/santa-lang-workshop-exploring-agentic-llm-workflows-for-language-implementation/</guid><description>Exploring how AI agents can implement programming languages from scratch. The santa-lang Workshop provides a structured approach using shared PHPT-style tests, Docker isolation, and stage-gated development to compare how different harnesses and models tackle the same language specification across multiple programming languages.</description></item><item><title>Vibe Coding a Chess UI: Building on the ESP32 with Cursor &amp; LVGL</title><link>https://eddmann.com/posts/vibe-coding-a-chess-ui-building-on-the-esp32-with-cursor-and-lvgl/</link><pubDate>Thu, 26 Jun 2025 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/vibe-coding-a-chess-ui-building-on-the-esp32-with-cursor-and-lvgl/</guid><description>In this post, I share my experience using AI-driven tools like Cursor, Claude Sonnet, and OpenAI&amp;rsquo;s o3 to rapidly prototype an embedded chess UI on the ESP32 microcontroller using LVGL. Letting the AI handle implementation allowed me to stay focused on high-level design, iterate quickly, and stay in flow. Hype aside, it&amp;rsquo;s a powerful tool for exploring ideas faster.</description></item><item><title>How I Used ChatGPT to Fix My Old Blog Posts (And What I Learned)</title><link>https://eddmann.com/posts/how-i-used-chatgpt-to-fix-my-old-blog-posts-and-what-i-learned/</link><pubDate>Thu, 06 Mar 2025 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/how-i-used-chatgpt-to-fix-my-old-blog-posts-and-what-i-learned/</guid><description>&lt;p>Over the past week, I have dedicated some of my free time to a long-overdue blog redesign.
During this process, I stumbled upon several glaring spelling mistakes in older posts, which led me down the path of manually reviewing all my previous entries.
This felt a lot like &lt;a href="https://en.wiktionary.org/wiki/yak_shaving" rel="external noopener" target="_blank">yak shaving&lt;/a>, prompting me to consider whether leveraging a Large Language Model (LLM) could be an effective solution to this problem.&lt;/p></description></item><item><title>Using LangChain Agents and Tools to answer questions on the NBA with OpenAI</title><link>https://eddmann.com/posts/using-langchain-agents-and-tools-to-answer-questions-on-the-nba-with-openai/</link><pubDate>Fri, 23 Jun 2023 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/using-langchain-agents-and-tools-to-answer-questions-on-the-nba-with-openai/</guid><description>&lt;p>Large language models (OpenAI/ChatGPT in particular) are all the rage at the moment.
Like many developers, I am interested in exploring what is possible with this new technology.
This post documents the use of &lt;a href="https://www.langchain.com/" rel="external noopener" target="_blank">LangChain&lt;/a> &lt;a href="https://python.langchain.com/docs/modules/agents/" rel="external noopener" target="_blank">Agents&lt;/a>/&lt;a href="https://python.langchain.com/docs/modules/tools/" rel="external noopener" target="_blank">Tools&lt;/a> to aid in answering questions based on recent NBA events.&lt;/p></description></item><item><title>Q&amp;A Retrieval Augmented Generation (RAG) with LangChain and Postgres</title><link>https://eddmann.com/posts/qa-retrieval-augmented-generation-rag-with-langchain-and-postgres/</link><pubDate>Mon, 15 May 2023 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/qa-retrieval-augmented-generation-rag-with-langchain-and-postgres/</guid><description>&lt;p>Large-language models (OpenAI/ChatGPT in particular) are all the rage at the moment.
Like many developers, I am interested in exploring what is possible with this new technology.
This post documents my experience exploring how to implement &lt;a href="https://python.langchain.com/docs/use_cases/question_answering/" rel="external noopener" target="_blank">Q&amp;amp;A Retrieval Augmented Generation&lt;/a> (RAG) using LangChain and Postgres (using the &lt;a href="https://github.com/pgvector/pgvector" rel="external noopener" target="_blank">pgvector&lt;/a> extension).&lt;/p></description></item><item><title>Q&amp;A Retrieval Augmented Generation (RAG) with LangChain and Chroma</title><link>https://eddmann.com/posts/qa-retrieval-augmented-generation-rag-with-langchain-and-chroma/</link><pubDate>Wed, 10 May 2023 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/qa-retrieval-augmented-generation-rag-with-langchain-and-chroma/</guid><description>&lt;p>Large-language models (OpenAI/ChatGPT in particular) are all the rage at the moment.
Like many developers, I am interested in exploring what is possible with this new technology.
This post documents my experience exploring how to implement &lt;a href="https://python.langchain.com/docs/use_cases/question_answering/" rel="external noopener" target="_blank">Q&amp;amp;A Retrieval Augmented Generation&lt;/a> (RAG) using LangChain and the &lt;a href="https://www.trychroma.com/" rel="external noopener" target="_blank">Chroma&lt;/a> vector database.&lt;/p></description></item></channel></rss>