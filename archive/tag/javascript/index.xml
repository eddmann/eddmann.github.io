<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Javascript on Edd Mann</title><link>https://eddmann.com/archive/tag/javascript/</link><description>Recent content in Javascript on Edd Mann</description><generator>Hugo</generator><language>en-GB</language><lastBuildDate>Fri, 28 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://eddmann.com/archive/tag/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>Bridging the Gap Between Android Native Functionality and JavaScript Web Applications</title><link>https://eddmann.com/posts/bridging-the-gap-between-android-native-functionality-and-javascript-web-applications/</link><pubDate>Fri, 28 Mar 2025 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/bridging-the-gap-between-android-native-functionality-and-javascript-web-applications/</guid><description>In this post, I share a pattern I&amp;rsquo;ve been using to bridge native Android functionality with JavaScript running inside a WebView. It covers setting up a lightweight Kotlin/Java-JavaScript bridge to handle asynchronous communication between the two.</description></item><item><title>Bridging the Gap Between iOS Native Functionality and JavaScript Web Applications</title><link>https://eddmann.com/posts/bridging-the-gap-between-ios-native-functionality-and-javascript-web-applications/</link><pubDate>Thu, 27 Mar 2025 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/bridging-the-gap-between-ios-native-functionality-and-javascript-web-applications/</guid><description>In this post, I share a pattern I&amp;rsquo;ve been using to bridge native iOS functionality with JavaScript running inside a WKWebView. It covers setting up a lightweight Swift/JavaScript bridge to handle asynchronous communication between the two.</description></item><item><title>Can you name that AWS service?</title><link>https://eddmann.com/posts/can-you-name-that-aws-service/</link><pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/can-you-name-that-aws-service/</guid><description>&lt;p>I have always been amazed by the sheer number of services AWS offers.
Although I spend a lot of time working within AWS, I am always surprised to find yet another service that I did not know existed.
Better still, with each new service comes an associated new service icon.
This is why I thought it would be interesting (and somewhat educational) to build a small trivia game that quizzes you on AWS service icons.&lt;/p></description></item><item><title>Building a Nokia Composer (RTTTL) Player and WAV-file Generator in the Browser</title><link>https://eddmann.com/posts/building-a-nokia-composer-rtttl-player-and-wav-file-generator-in-the-browser/</link><pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/building-a-nokia-composer-rtttl-player-and-wav-file-generator-in-the-browser/</guid><description>&lt;p>Who remembers punching in key-combinations found online into their Nokia 3210 to create &lt;em>custom ringtones&lt;/em>?
I spent more time than I would care to admit doing this in my youth.
Over the weekend I decided, as a bit of a nostalgic exercise, to see if I could implement a &lt;a href="https://nokia.fandom.com/wiki/Composer" rel="external noopener" target="_blank">Nokia Composer&lt;/a> clone using JavaScript and the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API" rel="external noopener" target="_blank">Web Audio API&lt;/a>.
From here, I expanded on the player to provide the ability to download the generated ringtone as a WAV file.&lt;/p></description></item><item><title>Creating a Contact Tracing Scanner using Web Bluetooth</title><link>https://eddmann.com/posts/creating-a-contact-tracing-scanner-using-web-bluetooth/</link><pubDate>Mon, 19 Oct 2020 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/creating-a-contact-tracing-scanner-using-web-bluetooth/</guid><description>&lt;p>I have recently been looking at the &lt;a href="https://covid19.apple.com/contacttracing" rel="external noopener" target="_blank">Contact Tracing specifications&lt;/a> that Apple and Google released earlier this year in aid of the fight against COVID-19.
Looking through these documents allowed me to grasp how the system was put together.
It also helped ease concerns that family members had regarding how privacy-conscious the Exposure Notification system is.&lt;/p></description></item><item><title>Building a Flag Guessing Game using React Hooks</title><link>https://eddmann.com/posts/building-a-flag-guessing-game-using-react-hooks/</link><pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/building-a-flag-guessing-game-using-react-hooks/</guid><description>&lt;p>Since &lt;a href="https://reactjs.org/docs/hooks-intro.html" rel="external noopener" target="_blank">React Hooks&lt;/a> were announced last autumn, I&amp;rsquo;ve been looking at ways to experiment with them in a couple of small side-projects.
In this post we will create a simple flag guessing game (called &lt;a href="https://eddmann.com/fun-with-flags/">Fun with Flags&lt;/a>) leveraging &lt;a href="https://facebook.github.io/create-react-app/" rel="external noopener" target="_blank">Create React App&lt;/a>, &lt;a href="https://www.styled-components.com/" rel="external noopener" target="_blank">Styled Components&lt;/a> and React Hooks.
Along the way we will highlight use-cases for several different hooks such as State, Effect and Memoization.
Finally, we will automate the process of publishing the compiled game to &lt;a href="https://pages.github.com/" rel="external noopener" target="_blank">GitHub Pages&lt;/a>.&lt;/p></description></item><item><title>Mince Pie Challenge: Viewing and Removing Mince Pies with Amazon DynamoDB</title><link>https://eddmann.com/posts/mince-pie-challenge-viewing-and-removing-mince-pies-with-amazon-dynamodb/</link><pubDate>Tue, 16 Oct 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mince-pie-challenge-viewing-and-removing-mince-pies-with-amazon-dynamodb/</guid><description>&lt;p>In this post we will progress in implementing the proposed endpoint behaviour documented in our &lt;a href="https://eddmann.com/posts/mince-pie-challenge-designing-the-restful-api-with-raml/#viewing-the-pies">RAML design&lt;/a>.
Using the online/offline DynamoDB abstractions that we constructed in the &lt;a href="https://eddmann.com/posts/mince-pie-challenge-adding-and-listing-mince-pies-with-amazon-dynamodb/">previous post&lt;/a>, we will incorporate the ability to view and remove specified mince pies from the challenge.&lt;/p></description></item><item><title>Mince Pie Challenge: Adding and Listing Mince Pies with Amazon DynamoDB</title><link>https://eddmann.com/posts/mince-pie-challenge-adding-and-listing-mince-pies-with-amazon-dynamodb/</link><pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mince-pie-challenge-adding-and-listing-mince-pies-with-amazon-dynamodb/</guid><description>&lt;p>In the &lt;a href="https://eddmann.com/posts/mince-pie-challenge-adding-the-bootstrap-endpoint-and-serverless-offline/">previous post&lt;/a> we began to implement the API endpoints, starting off with creating the bootstrap response.
We did this in a manner that catered for both online and offline development access.
In this post we will incorporate the ability to add and list mince pies, persisting the state within &lt;a href="https://aws.amazon.com/dynamodb/" rel="external noopener" target="_blank">Amazon DynamoDB&lt;/a>.
Following this, we will enrich our offline development process by setting up an &lt;a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBLocal.html" rel="external noopener" target="_blank">Amazon DynamoDB Local&lt;/a> instance using Docker.&lt;/p></description></item><item><title>Building a Babel Plugin: Adding a Function Composition Operator and Auto-Curried Functions to JavaScript</title><link>https://eddmann.com/posts/building-a-babel-plugin-adding-a-function-composition-operator-and-auto-curried-functions-to-javascript/</link><pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/building-a-babel-plugin-adding-a-function-composition-operator-and-auto-curried-functions-to-javascript/</guid><description>&lt;p>In a recent Software Engineering Daily &lt;a href="https://softwareengineeringdaily.com/2018/06/21/babel-with-henry-zhu/" rel="external noopener" target="_blank">podcast&lt;/a> Henry Zhu discussed the &lt;a href="https://babeljs.io/" rel="external noopener" target="_blank">Babel&lt;/a> project, and shed some light on how the transpiler works under the hood.
He touched upon how &lt;a href="https://babeljs.io/docs/en/plugins.html" rel="external noopener" target="_blank">Plugins&lt;/a> can be created to alter the resulting compiled code.
I was very interested in experimenting with this capability.
In this post I wish to highlight the process by which Babel transforms your code, developing several interesting plugins along the way.&lt;/p></description></item><item><title>Mince Pie Challenge: Adding Test Coverage using Jest and Travis CI</title><link>https://eddmann.com/posts/mince-pie-challenge-adding-test-coverage-using-jest-and-travis-ci/</link><pubDate>Wed, 18 Jul 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mince-pie-challenge-adding-test-coverage-using-jest-and-travis-ci/</guid><description>&lt;p>Following on from &lt;a href="https://eddmann.com/posts/mince-pie-challenge-setting-up-flow-with-babel-and-webpack/">adding Flow&lt;/a> to the API project, I now wish to garner further confidence in the code by adding tests.
In this post I will document the process of setting up the test-runner &lt;a href="https://jestjs.io/" rel="external noopener" target="_blank">Jest&lt;/a>, and adding suitable test coverage to the current authentication example.&lt;/p></description></item><item><title>Mince Pie Challenge: Setting up Flow with Babel and Webpack</title><link>https://eddmann.com/posts/mince-pie-challenge-setting-up-flow-with-babel-and-webpack/</link><pubDate>Mon, 09 Jul 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mince-pie-challenge-setting-up-flow-with-babel-and-webpack/</guid><description>&lt;p>We have now settled on how our application will perform &lt;a href="https://eddmann.com/posts/mince-pie-challenge-authentication-with-amazon-cognito-and-json-web-tokens/">user authentication&lt;/a>.
I now wish to take a step back and help improve our code confidence by adding the static type checker &lt;a href="https://flow.org/" rel="external noopener" target="_blank">Flow&lt;/a>.
In this article, I will document the process of configuring Flow with Babel and Webpack, expanding upon our previous example by adding sufficient typing.&lt;/p></description></item><item><title>Mince Pie Challenge: Building a Serverless RESTful API and React Client</title><link>https://eddmann.com/posts/mince-pie-challenge-building-a-serverless-restful-api-and-react-client/</link><pubDate>Thu, 07 Jun 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mince-pie-challenge-building-a-serverless-restful-api-and-react-client/</guid><description>&lt;p>Since moving our infrastructure over to the AWS stack, I have been keen to explore how we can take advantage of the numerous services at our disposal, alongside the serverless methodology.
In this blog &lt;a href="https://eddmann.com/archive/tag/mince-pie-challenge-series">series&lt;/a>, I wish to document my experience of building a complete serverless application which harnesses as many of the AWS offerings as possible.
We will explore building both a RESTful API and a React client, all hosted without any servers to maintain!&lt;/p></description></item><item><title>Determining if an IPv4 address is within a CIDR range in JavaScript</title><link>https://eddmann.com/posts/determining-if-an-ipv4-address-is-within-a-cidr-range-in-javascript/</link><pubDate>Tue, 05 Jun 2018 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/determining-if-an-ipv4-address-is-within-a-cidr-range-in-javascript/</guid><description>&lt;p>Recently I was required to process a group of &lt;a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing" rel="external noopener" target="_blank">CIDR&lt;/a> ranges in JavaScript to determine if a given IPv4 address fell within one of them.
In this post I would like to discuss how I went about completing this.&lt;/p></description></item><item><title>Creating a 'Winning' Audio Lambda Service using Serverless, Polly and compiled SOX</title><link>https://eddmann.com/posts/creating-a-winning-audio-lambda-service-using-serverless-polly-and-compiled-sox/</link><pubDate>Mon, 11 Dec 2017 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/creating-a-winning-audio-lambda-service-using-serverless-polly-and-compiled-sox/</guid><description>&lt;p>Following on from my previous post which discussed &lt;a href="https://eddmann.com/posts/memes-as-a-service-using-lambda-serverless-and-imagemagick/">manipulating images&lt;/a>, I would now like to expand upon this and look into how you can interact with audio using Lambda.
To highlight this use-case we will be creating a simple service which, given a name and an optional voice (provided by &lt;a href="https://aws.amazon.com/polly/" rel="external noopener" target="_blank">Polly&lt;/a>), will synthesise the name and include it in a returned &amp;ldquo;And the winner is&amp;hellip;&amp;rdquo; applause MP3 file.
This will demonstrate how to integrate Polly within Lambda, compile and execute native code within Lambda and return a binary MP3 file to the client.&lt;/p></description></item><item><title>'Memes as a Service' using Lambda, Serverless and ImageMagick</title><link>https://eddmann.com/posts/memes-as-a-service-using-lambda-serverless-and-imagemagick/</link><pubDate>Mon, 04 Dec 2017 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/memes-as-a-service-using-lambda-serverless-and-imagemagick/</guid><description>&lt;p>I&amp;rsquo;ve recently become really interested in the concept of Functions as a Service (FaaS) and the &lt;a href="https://serverless.com/" rel="external noopener" target="_blank">Serverless Framework&lt;/a>.
I decided to create a small experimental AWS Lambda function to explore how it could be used to manipulate images.
For this contrived example, I came up with the (silly) idea of &amp;lsquo;Memes as a Service&amp;rsquo; (everything needs to be a service nowadays).&lt;/p></description></item><item><title>Bitcoin Internals: Verifying Merkle Roots using Merkle Proofs in JavaScript</title><link>https://eddmann.com/posts/bitcoin-internals-verifying-merkle-roots-using-merkle-proofs-in-javascript/</link><pubDate>Fri, 10 Nov 2017 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/bitcoin-internals-verifying-merkle-roots-using-merkle-proofs-in-javascript/</guid><description>In this video, we expand on the previous one, in which we computed a Merkle root for a given list of transactions using Merkle trees. We will now compute a Merkle proof for a given transaction, allowing clients to validate that a transaction exists in a block without having to download its entire contents.</description></item><item><title>Bitcoin Internals: How Blocks use Merkle Trees in JavaScript</title><link>https://eddmann.com/posts/bitcoin-internals-how-blocks-use-merkle-trees-in-javascript/</link><pubDate>Thu, 09 Nov 2017 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/bitcoin-internals-how-blocks-use-merkle-trees-in-javascript/</guid><description>In this video, I take a look into how Bitcoin internally uses Merkle trees to generate its block Merkle roots. We delve into how this is computed and why it is so important to validate the state of transactions.</description></item><item><title>Handling Retries and Back-off Attempts with JavaScript Promises</title><link>https://eddmann.com/posts/handling-retries-and-back-off-attempts-with-javascript-promises/</link><pubDate>Fri, 21 Apr 2017 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/handling-retries-and-back-off-attempts-with-javascript-promises/</guid><description>&lt;p>Promises are an invaluable abstraction around &amp;rsquo;eventual&amp;rsquo; results within asynchronous operations.
I recently needed to retry a Promise-based action in the event of a failure.
It turned out to be very easy to implement such a process using simple recursive constructs.&lt;/p></description></item><item><title>Managing Newlines and Unicode within JavaScript and PHP</title><link>https://eddmann.com/posts/managing-newlines-and-unicode-within-javascript-and-php/</link><pubDate>Thu, 22 Dec 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/managing-newlines-and-unicode-within-javascript-and-php/</guid><description>&lt;p>We were recently sent a tweet regarding a text-area client/server-side length validation not correlating.
After some detective work, we were able to find two issues that could have caused this to occur.
In this post, I wish to discuss our findings and how we resolved each issue.&lt;/p></description></item><item><title>Throttling and Debouncing Function Invocation in JavaScript</title><link>https://eddmann.com/posts/throttling-and-debouncing-function-invocation-in-javascript/</link><pubDate>Tue, 22 Nov 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/throttling-and-debouncing-function-invocation-in-javascript/</guid><description>&lt;p>Whilst working on resolving a recent JavaScript event handler bug, it became necessary to implement a form of throttling to ensure a race condition would not occur.
Throughout the fix, I found myself seeking a clear definition of what both &lt;code>throttling&lt;/code> and &lt;code>debouncing&lt;/code> a function actually entailed, as it can be very easy to mix up these subtly different concepts.&lt;/p></description></item><item><title>Maybe in JavaScript</title><link>https://eddmann.com/posts/maybe-in-javascript/</link><pubDate>Wed, 08 Jun 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/maybe-in-javascript/</guid><description>&lt;p>Recently, I have been delving into the concepts of &lt;a href="http://learnyouahaskell.com/functors-applicative-functors-and-monoids" rel="external noopener" target="_blank">Functors&lt;/a> and &lt;a href="http://learnyouahaskell.com/a-fistful-of-monads" rel="external noopener" target="_blank">Monads&lt;/a>.
There are many good &lt;a href="https://curiosity-driven.org/monads-in-javascript" rel="external noopener" target="_blank">resources&lt;/a> available online that will do a far better job of explaining these concepts than I could.
However, I do wish to document an example of a Maybe type I have implemented in JavaScript.
Again, there are many excellent external &lt;a href="http://sean.voisen.org/blog/2013/10/intro-monads-maybe/" rel="external noopener" target="_blank">resources&lt;/a> that highlight the characteristics and power of using such a type, so I will direct your attention to those if you wish to learn more.&lt;/p></description></item><item><title>Binary/Octal/Hexadecimal to Decimal using Collection Pipelines in JavaScript</title><link>https://eddmann.com/posts/binary-octal-hexadecimal-to-decimal-using-collection-pipelines-in-javascript/</link><pubDate>Mon, 18 Apr 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/binary-octal-hexadecimal-to-decimal-using-collection-pipelines-in-javascript/</guid><description>&lt;p>In a recent &lt;a href="https://twitter.com/adamwathan/status/720432624548900864" rel="external noopener" target="_blank">tweet&lt;/a> from Adam Wathan, highlighting one of the examples in his &lt;a href="http://adamwathan.me/refactoring-to-collections/" rel="external noopener" target="_blank">upcoming book&lt;/a>, he demonstrated breaking down the process of converting from binary to decimal representation using a pipeline of transformations.
I thought it would be interesting to see how I would go about performing this process in JavaScript.&lt;/p></description></item><item><title>Implementing Transpose and Zip in JavaScript</title><link>https://eddmann.com/posts/implementing-transpose-and-zip-in-javascript/</link><pubDate>Fri, 08 Apr 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/implementing-transpose-and-zip-in-javascript/</guid><description>In a recent Full Stack Radio podcast, a discussion around the application of &lt;code>transpose&lt;/code> and &lt;code>zip&lt;/code> on collections made me wonder how I would go about implementing such a feature in JavaScript.</description></item><item><title>Bringing Back the Blink Tag using JavaScript</title><link>https://eddmann.com/posts/bringing-back-the-blink-tag-using-javascript/</link><pubDate>Mon, 29 Feb 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/bringing-back-the-blink-tag-using-javascript/</guid><description>&lt;p>Who doesn&amp;rsquo;t miss the &lt;code>blink&lt;/code> tag that was ever-present in years past?
I thought it would be fun to quickly code up a JavaScript implementation that replicates the functionality that has &amp;lsquo;sadly&amp;rsquo; been removed in modern browsers.&lt;/p></description></item><item><title>Handling Time-Dependent State Recording using React</title><link>https://eddmann.com/posts/handling-time-dependent-state-recording-using-react/</link><pubDate>Wed, 24 Feb 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/handling-time-dependent-state-recording-using-react/</guid><description>&lt;p>Sometimes, you look at a feature request and think that it may be a very tricky implementation to develop.
I felt this way regarding recording input fields in a recent application I have been working on.
The idea was to be able to record a user&amp;rsquo;s interaction with an HTML component (in this case, a textarea) and be able to replay these events (in real-time) at a later date.
Thinking about how I would go about creating such an implementation in trivial JavaScript, with all the browser nuances and user input differences, was not very appealing.&lt;/p></description></item><item><title>Promisifying Error-First Asynchronous Callbacks in JavaScript</title><link>https://eddmann.com/posts/promisifying-error-first-asynchronous-callbacks-in-javascript/</link><pubDate>Thu, 11 Feb 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/promisifying-error-first-asynchronous-callbacks-in-javascript/</guid><description>&lt;p>I have been writing a lot about Promises in JavaScript over the past couple of weeks.
What happens, however, when you wish to use an asynchronous function that does not return a Promise, such as those found in Node.js?
It is actually quite simple to abstract away the error-first asynchronous function callback into a Promise we can handle.&lt;/p></description></item><item><title>Using Generators for Promise Coroutines in JavaScript</title><link>https://eddmann.com/posts/using-generators-for-promise-coroutines-in-javascript/</link><pubDate>Wed, 10 Feb 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/using-generators-for-promise-coroutines-in-javascript/</guid><description>&lt;p>In a &lt;a href="https://eddmann.com/posts/fetching-link-titles-using-promises-and-async-await-in-javascript/">previous article&lt;/a>, I demonstrated how a new feature from ES2016 (&lt;code>async&lt;/code>/&lt;code>await&lt;/code> functions) could be used to help coordinate promises and execution.
However, we can instead use Generators (introduced in ES2015) to provide this feature, minus the syntactic sugar these two new keywords provide.&lt;/p></description></item><item><title>Fetching Link Titles using Promises and Async/Await in JavaScript</title><link>https://eddmann.com/posts/fetching-link-titles-using-promises-and-async-await-in-javascript/</link><pubDate>Sat, 06 Feb 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/fetching-link-titles-using-promises-and-async-await-in-javascript/</guid><description>&lt;p>One tool that I use on a regular basis when compiling the notes for a &lt;a href="https://threedevsandamaybe.com/" rel="external noopener" target="_blank">Three Devs and a Maybe&lt;/a> episode is a tool for converting a clipboard full of links into a Markdown-formatted list.
I created this tool a while back in Python and thought it would be interesting to see how it may look in JavaScript when combined with Promises and Async/Await functions.&lt;/p></description></item><item><title>Arrow Functions Lexical 'this' Scoping in JavaScript</title><link>https://eddmann.com/posts/arrow-functions-lexical-this-scoping-in-javascript/</link><pubDate>Thu, 04 Feb 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/arrow-functions-lexical-this-scoping-in-javascript/</guid><description>One feature of ES2015 that I feel can be a stumbling block (but is extremely useful) is Arrow Functions&amp;rsquo; lexical scoping of &lt;code>this&lt;/code>. Before this addition, every new function defined its own &lt;code>this&lt;/code>, meaning we were required to explicitly bind or locally store the &lt;code>this&lt;/code> reference that we desired in many use cases.</description></item><item><title>Mimicking Named Parameters in JavaScript</title><link>https://eddmann.com/posts/mimicking-named-parameters-in-javascript/</link><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/mimicking-named-parameters-in-javascript/</guid><description>Whilst working today, I came across a test helper function that required a few too many parameters. Debating whether to break the function up, I decided that an elegant solution would be to take advantage of ES2015 object destructuring and produce a form of &amp;lsquo;Named Parameters&amp;rsquo;.</description></item><item><title>Undefined Variable Checks in JavaScript</title><link>https://eddmann.com/posts/undefined-variable-checks-in-javascript/</link><pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/undefined-variable-checks-in-javascript/</guid><description>This morning, I stumbled upon an issue surrounding checking for the existence of a variable in JavaScript.</description></item><item><title>Implementing a Cancellable Promise in JavaScript</title><link>https://eddmann.com/posts/implementing-a-cancelable-promise-in-javascript/</link><pubDate>Thu, 28 Jan 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/implementing-a-cancelable-promise-in-javascript/</guid><description>&lt;p>I was recently working on a React component that complained about its state being set when it was not mounted.
This was due to an uncompleted promise being resolved after the component had already been unmounted.
To solve this issue, I used the concept of a cancellable promise, which could be cancelled before the component was unmounted.&lt;/p></description></item><item><title>Implementing Promise.all and Promise.race in JavaScript</title><link>https://eddmann.com/posts/implementing-promise-all-and-promise-race-in-javascript/</link><pubDate>Fri, 22 Jan 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/implementing-promise-all-and-promise-race-in-javascript/</guid><description>&lt;p>Throughout the past couple of months, much of the JavaScript development I have been involved with has revolved around &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" rel="external noopener" target="_blank">Promises&lt;/a>.
Promises are a simple abstraction to handle deferred and asynchronous computations.
This lunchtime, I decided to see how one would go about implementing two concepts that are present in the Promise standard: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all" rel="external noopener" target="_blank">&lt;code>all&lt;/code>&lt;/a> and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race" rel="external noopener" target="_blank">&lt;code>race&lt;/code>&lt;/a>.&lt;/p></description></item><item><title>Even Higher Trampolining in JavaScript</title><link>https://eddmann.com/posts/even-higher-trampolining-in-javascript/</link><pubDate>Fri, 08 Jan 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/even-higher-trampolining-in-javascript/</guid><description>The concept of trampolining_seems to have been a running trend throughout this week. I noted in my initial post on implementing trampolining in JavaScript that I would document a revised version capable of handling the case when a function is the desired return type.</description></item><item><title>Recursive Functions using a Trampoline in JavaScript</title><link>https://eddmann.com/posts/recursive-functions-using-a-trampoline-in-javascript/</link><pubDate>Wed, 06 Jan 2016 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/recursive-functions-using-a-trampoline-in-javascript/</guid><description>&lt;p>An interesting technique for managing perceived tail-call optimised algorithms in an environment that does not provide such capabilities is to use a concept called a &lt;em>trampoline&lt;/em>.
The following two examples provide all their work within the recursive function invocation and are in tail-call position.
However, in environments without such optimisations (before ES2015), a single stack frame is not reused and instead incurs the burden of O(n) memory complexity.&lt;/p></description></item><item><title>Asynchronous Calls within Flux</title><link>https://eddmann.com/posts/asynchronous-calls-within-flux/</link><pubDate>Wed, 28 Oct 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/asynchronous-calls-within-flux/</guid><description>&lt;p>The Flux architecture abides by a single unidirectional data-flow throughout the entire application.
This provides us with a host of benefits, ranging from easier to reason about code, to clearer testing strategies.
However, one issue we faced in our recently updated interface that tradesmen use to communicate with customers was how to handle asynchronous calls within these constraints.
Throughout this post I wish to guide you through the iterative design decisions made, along with the resulting abstractions and boundaries.&lt;/p></description></item><item><title>Arabic to Roman Numerals Converter in JavaScript</title><link>https://eddmann.com/posts/arabic-to-roman-numerals-converter-in-javascript/</link><pubDate>Tue, 20 Oct 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/arabic-to-roman-numerals-converter-in-javascript/</guid><description>Having an hour to spare recently, I decided to solve the common problem of converting from Hindu-Arabic to Roman numerals.</description></item><item><title>Cartesian Product in JavaScript</title><link>https://eddmann.com/posts/cartesian-product-in-javascript/</link><pubDate>Sun, 04 Oct 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/cartesian-product-in-javascript/</guid><description>This weekend I have had the chance to explore Cartesian products. The Cartesian product (cross-product) is essentially an operation that returns a product set from multiple supplied sets.</description></item><item><title>Peano Numbers and Arithmetic in JavaScript</title><link>https://eddmann.com/posts/peano-numbers-and-arithmetic-in-javascript/</link><pubDate>Thu, 01 Oct 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/peano-numbers-and-arithmetic-in-javascript/</guid><description>Whilst completing the Functional Programming Principles in Scala course a couple of years ago one of the exercises was in the realm of Peano numbers. This subject fascinated me, demonstrating how we were able to represent non-negative natural numbers without any pre-existing concepts - relying solely on logical expressions and recursive algorithms.</description></item><item><title>Implementing Classical Inheritance in JavaScript</title><link>https://eddmann.com/posts/implementing-classical-inheritance-in-javascript/</link><pubDate>Sat, 05 Sep 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/implementing-classical-inheritance-in-javascript/</guid><description>Developers who are well versed in class-based languages such as Java and C++ may find JavaScript&amp;rsquo;s prototypical and, in my heart, true object-oriented nature confusing. With the addition of the &lt;code>class&lt;/code> keyword in ES6 it has become extremely easy to crossover these class-based principles into JavaScript. However, it should be noted that this is nothing more than syntactic sugar over an extremely expressive and flexible language construct.</description></item><item><title>How the 'new' keyword works in JavaScript</title><link>https://eddmann.com/posts/how-the-new-keyword-works-in-javascript/</link><pubDate>Thu, 03 Sep 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/how-the-new-keyword-works-in-javascript/</guid><description>The &lt;code>new&lt;/code> keyword in JavaScript can sometimes slip up new and experienced programmers alike. We typically associate this word with classical-based object-oriented languages (such as Java, etc.), whereas in JavaScript it works a little differently.</description></item><item><title>Implementing the Shunting Yard algorithm in JavaScript</title><link>https://eddmann.com/posts/implementing-the-shunting-yard-algorithm-in-javascript/</link><pubDate>Sat, 29 Aug 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/implementing-the-shunting-yard-algorithm-in-javascript/</guid><description>Following on from my recent post on implementing a small RPN parser using JavaScript, we can expand on this by handling infix expressions. This can be achieved by initially parsing the expression into its postfix (RPN) counterpart, highlighting another use case where a stack-based approach works well.</description></item><item><title>Small RPN Implementation in JavaScript</title><link>https://eddmann.com/posts/small-rpn-implementation-in-javascript/</link><pubDate>Tue, 25 Aug 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/small-rpn-implementation-in-javascript/</guid><description>This morning I decided to quickly write up a small Reverse Polish Notation evaluator in JavaScript. Evaluation of these expressions highlights the perfect use-case for a stack-based approach.</description></item><item><title>Lifting JavaScript Operators into First-class Functions</title><link>https://eddmann.com/posts/lifting-javascript-operators-into-first-class-functions/</link><pubDate>Mon, 24 Aug 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/lifting-javascript-operators-into-first-class-functions/</guid><description>I have always enjoyed how succinctly you are able to use commonly found operators as first-class functions in languages such as Clojure. As a quick thought experiment, I decided to see if it would be possible to use JavaScript&amp;rsquo;s capabilities to dynamically create functions to mimic such behaviour.</description></item><item><title>Partial Application (Currying) and Composition using JavaScript ES6</title><link>https://eddmann.com/posts/partial-application-currying-and-composition-using-javascript-es6/</link><pubDate>Wed, 15 Apr 2015 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/partial-application-currying-and-composition-using-javascript-es6/</guid><description>&lt;p>Completion of a recent project sparked discussion surrounding JavaScript ES6 within the team, in part due to the welcome addition of &lt;a href="http://webpack.github.io/" rel="external noopener" target="_blank">Webpack&lt;/a> into our stack.
&lt;a href="http://en.wikipedia.org/wiki/ECMAScript" rel="external noopener" target="_blank">ECMAScript 6&lt;/a> is an upcoming standard which will eventually be used as a reference for all future JavaScript implementations (client and server-side).&lt;/p></description></item><item><title>Functional Quick sort in Scala and JavaScript</title><link>https://eddmann.com/posts/functional-quick-sort-in-scala-and-javascript/</link><pubDate>Sun, 06 Apr 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/functional-quick-sort-in-scala-and-javascript/</guid><description>&lt;p>Functional languages provide you with the ability to concisely define the intent of a piece of code, without low-level issues getting in the way.
This can be clearly seen when implementing the Quick sort algorithm.
Often referred to as &amp;lsquo;partition-exchange&amp;rsquo; sort, this divide and conquer algorithm recursively divides a list into two sub-lists, based on a chosen pivot element.&lt;/p></description></item><item><title>Providing Local JS and CSS Resources for CDN Fallbacks</title><link>https://eddmann.com/posts/providing-local-js-and-css-resources-for-cdn-fallbacks/</link><pubDate>Wed, 29 Jan 2014 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/providing-local-js-and-css-resources-for-cdn-fallbacks/</guid><description>In a recent podcast the topic of using Content Delivery Networks (CDN) to host commonly used resources such as jQuery and Twitter Bootstrap came up. The merits of having access to large-scale delivery infrastructure provided by Google etc. are significant.</description></item><item><title>Open external links in a new window using JavaScript</title><link>https://eddmann.com/posts/open-external-links-in-a-new-window-using-javascript/</link><pubDate>Mon, 09 Dec 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/open-external-links-in-a-new-window-using-javascript/</guid><description>&lt;p>It is good practise to open external links in a new window.
However, it can be a bit tedious to remember to include &lt;code>target=&amp;quot;_blank&amp;quot;&lt;/code>, especially in Markdown.
To get around this, I have incorporated a simple raw JavaScript solution, which can be found below.&lt;/p></description></item><item><title>Twitter API v1.1 User Timeline JavaScript Solution</title><link>https://eddmann.com/posts/twitter-api-v-1-1-user-timeline-javascript-solution/</link><pubDate>Thu, 05 Dec 2013 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/twitter-api-v-1-1-user-timeline-javascript-solution/</guid><description>&lt;p>When I redesigned my site earlier this year I wanted to include the last couple of Twitter interactions in the footer.
Using v1.0 of the Twitter API, this was a very simple process, giving access to a JSONP response with the publicly available tweets of a specified handle.
This all &lt;a href="http://dev.twitter.com/discussions/11564" rel="external noopener" target="_blank">changed&lt;/a> in v1.1 with the introduction of required OAuth.
Fortunately, I was able to find a workaround &lt;a href="http://jasonmayes.com/projects/twitterApi/" rel="external noopener" target="_blank">here&lt;/a> which took advantage of the response made available from a widget you create.
However, the returned tweets in this solution were already styled somewhat and I could not find an unminified version of the source.
So in the end I decided to spend 45 minutes last night implementing my own solution.&lt;/p></description></item><item><title>Ten ways to reverse a string in JavaScript</title><link>https://eddmann.com/posts/ten-ways-to-reverse-a-string-in-javascript/</link><pubDate>Mon, 31 Oct 2011 00:00:00 +0000</pubDate><guid>https://eddmann.com/posts/ten-ways-to-reverse-a-string-in-javascript/</guid><description>&lt;p>In a recent job interview, I was asked to write a simple C# function that would reverse a string and return the result.
However, there was a catch: I was unable to use the provided string object&amp;rsquo;s &lt;code>reverse()&lt;/code> function.
I successfully created a function that did as requested (using a decrementing for-loop and concatenation), though I realised that using concatenation would result in a new string being created in memory upon each iteration, as strings are immutable objects.
I solved this by using a &lt;code>StringBuilder&lt;/code> to append each character and then returning the result.
On the way home, I began to think of the endless ways in which you could reverse a string in code (extremely sad, I know).&lt;/p></description></item></channel></rss>